
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xd7\x9e)\x108\x05\xbd\xb6\x9f\x0bk82\x08\xa0%'
    
_lr_action_items = {'EXCLAMATION':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,40,-10,-11,-9,-8,-68,40,40,-26,40,-70,40,-67,-69,40,-80,40,-71,40,40,-12,-72,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-74,-75,-25,-81,-27,-73,40,40,40,40,40,-76,-78,40,40,-77,-79,]),'RETURN':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,41,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,41,-12,-72,-74,-75,-25,-81,-27,-73,41,41,-76,-78,41,41,-77,-79,]),'CHARACTER':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,59,-10,-11,-9,-8,-68,59,59,-26,59,-70,59,-67,-69,59,-80,59,-71,59,59,-12,-72,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-74,-75,-25,-81,-27,-73,59,59,59,59,59,-76,-78,59,59,-77,-79,]),'RIGHT_CURL':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,139,142,145,146,],[-7,-82,43,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,107,-12,-72,-74,-75,-25,-81,-27,-73,-76,-78,-77,-79,]),'CHAR':([0,1,2,4,7,8,9,16,17,18,19,20,31,32,34,35,37,43,74,107,],[5,-1,-3,-4,5,5,5,-2,5,-7,-5,5,5,-11,-6,-8,5,-26,-12,-25,]),'EXTERN':([0,1,2,4,9,16,18,19,20,31,32,34,35,43,74,107,],[8,-1,-3,-4,8,-2,-7,-5,8,8,-11,-6,-8,-26,-12,-25,]),'WHILE':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,44,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,44,-12,-72,-74,-75,-25,-81,-27,-73,44,44,-76,-78,44,44,-77,-79,]),'STATIC':([0,1,2,4,9,16,18,19,34,35,43,107,],[7,-1,-3,-4,7,-2,-7,-5,-6,-8,-26,-25,]),'REAL_NUM':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,72,-10,-11,-9,-8,-68,72,72,-26,72,-70,72,-67,-69,72,-80,72,-71,72,72,-12,-72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-74,-75,-25,-81,-27,-73,72,72,72,72,72,-76,-78,72,72,-77,-79,]),'MULTIPLY':([3,5,6,12,14,15,18,20,24,29,30,31,32,33,35,39,40,41,42,43,45,46,47,49,50,51,52,53,55,56,57,59,60,61,62,65,66,68,70,72,74,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,122,123,124,125,132,133,134,135,136,137,138,139,142,143,144,145,146,],[-13,-14,12,12,12,12,-7,-82,12,45,12,-10,-11,-9,-8,-68,45,45,-52,-26,45,-70,45,-63,-67,-69,-46,45,-80,-65,-59,-62,94,45,-40,-71,45,-60,45,-61,-12,-49,-72,45,-50,-47,45,45,-66,45,45,-48,45,45,45,45,45,45,45,45,-51,45,45,45,45,45,45,-74,-75,-25,-81,-27,-73,94,94,-42,45,-53,-55,-54,-64,45,-41,45,-43,45,45,-76,-78,45,45,-77,-79,]),'MINUS':([18,20,29,31,32,33,35,39,40,41,42,43,45,46,47,48,49,50,51,52,53,55,56,57,59,60,61,62,65,66,68,70,72,74,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,118,119,120,121,122,123,124,125,132,133,134,135,136,137,138,139,142,143,144,145,146,],[-7,-82,47,-10,-11,-9,-8,-68,47,47,-52,-26,47,-70,47,84,-63,-67,-69,-46,47,-80,-65,-59,-62,-56,47,-40,-71,47,-60,47,-61,-12,-49,-72,47,-50,-47,47,47,-66,47,47,-48,47,47,47,47,47,47,47,47,-51,47,47,47,47,47,47,-74,-75,-25,-81,-27,-73,-57,-58,-42,84,84,84,84,47,-53,-55,-54,-64,47,-41,47,-43,47,47,-76,-78,47,47,-77,-79,]),'DIVIDE':([42,49,52,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,123,124,125,132,134,136,],[-52,-63,-46,-65,-59,-62,96,-40,-60,-61,-49,-50,-47,-66,-48,-51,96,96,-42,-53,-55,-54,-64,-41,-43,]),'LE_OP':([42,48,49,52,54,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,89,-65,-59,-62,-56,-40,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,89,89,-64,-41,-43,]),'SEMICOLON':([10,11,13,21,23,28,38,41,42,48,49,52,54,56,57,59,60,62,63,67,68,69,71,72,73,77,79,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,126,127,128,129,130,132,134,136,],[-15,18,-17,-16,35,-19,-18,78,-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,-28,105,-60,106,109,-61,18,-49,110,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-31,-29,-34,-33,-30,-64,-41,-43,]),'G_OP':([42,48,49,52,54,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,90,-65,-59,-62,-56,-40,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,90,90,-64,-41,-43,]),'LEFT_SQUARE':([49,52,56,57,59,62,68,72,85,114,132,134,136,],[-63,87,-65,-59,-62,-40,-60,-61,-66,-42,-64,-41,-43,]),'PLUS':([18,20,29,31,32,33,35,39,40,41,42,43,45,46,47,48,49,50,51,52,53,55,56,57,59,60,61,62,65,66,68,70,72,74,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,118,119,120,121,122,123,124,125,132,133,134,135,136,137,138,139,142,143,144,145,146,],[-7,-82,53,-10,-11,-9,-8,-68,53,53,-52,-26,53,-70,53,83,-63,-67,-69,-46,53,-80,-65,-59,-62,-56,53,-40,-71,53,-60,53,-61,-12,-49,-72,53,-50,-47,53,53,-66,53,53,-48,53,53,53,53,53,53,53,53,-51,53,53,53,53,53,53,-74,-75,-25,-81,-27,-73,-57,-58,-42,83,83,83,83,53,-53,-55,-54,-64,53,-41,53,-43,53,53,-76,-78,53,53,-77,-79,]),'COMMA':([10,13,21,25,27,28,36,38,42,48,49,52,54,56,57,59,60,62,63,68,72,75,77,81,82,85,88,97,112,113,114,115,116,118,119,120,121,123,124,125,126,127,128,129,130,132,134,136,140,],[-15,-17,-16,37,-22,-19,-24,-18,-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,-28,-60,-61,-23,-49,-50,-47,-66,-48,-51,-57,-58,-42,135,-44,-38,-37,-36,-39,-53,-55,-54,-31,-29,-34,-33,-30,-64,-41,-43,-45,]),'IDENTIFIER':([3,5,6,12,14,15,18,20,24,29,30,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-13,-14,13,13,13,13,-7,-82,13,57,13,-10,-11,-9,-8,-68,57,57,-26,57,-70,57,-67,-69,57,-80,57,-71,57,57,-12,-72,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-74,-75,-25,-81,-27,-73,57,57,57,57,57,-76,-78,57,57,-77,-79,]),'ADD_ASSIGN':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,102,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-34,-33,-64,-41,-43,]),'$end':([1,2,4,9,16,18,19,34,35,43,107,],[-1,-3,-4,0,-2,-7,-5,-6,-8,-26,-25,]),'MODULO':([42,49,52,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,123,124,125,132,134,136,],[-52,-63,-46,-65,-59,-62,95,-40,-60,-61,-49,-50,-47,-66,-48,-51,95,95,-42,-53,-55,-54,-64,-41,-43,]),'STRING':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,49,50,51,53,55,56,61,65,66,70,74,78,80,83,84,85,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,56,-10,-11,-9,-8,-68,56,56,-26,56,-70,56,85,-67,-69,56,-80,-65,56,-71,56,56,-12,-72,56,56,56,-66,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-74,-75,-25,-81,-27,-73,56,56,56,56,56,-76,-78,56,56,-77,-79,]),'FOR':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,58,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,58,-12,-72,-74,-75,-25,-81,-27,-73,58,58,-76,-78,58,58,-77,-79,]),'EQUAL':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,99,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-34,-33,-64,-41,-43,]),'RIGHT_ROUND':([10,13,17,21,25,26,27,28,36,38,42,48,49,52,54,56,57,59,60,62,63,68,72,75,76,77,81,82,85,86,88,97,104,111,112,113,114,115,116,118,119,120,121,123,124,125,126,127,128,129,130,131,132,134,136,140,141,],[-15,-17,28,-16,-20,38,-22,-19,-24,-18,-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,-28,-60,-61,-23,-21,-49,-50,-47,-66,114,-48,-51,132,133,-57,-58,-42,134,-44,-38,-37,-36,-39,-53,-55,-54,-31,-29,-34,-33,-30,138,-64,-41,-43,-45,143,]),'ELSE':([39,43,46,50,51,65,78,105,106,107,109,110,139,142,145,146,],[-68,-26,-70,-67,-69,-71,-72,-74,-75,-25,-27,-73,-76,144,-77,-79,]),'GE_OP':([42,48,49,52,54,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,92,-65,-59,-62,-56,-40,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,92,92,-64,-41,-43,]),'AMPERSAND':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,61,-10,-11,-9,-8,-68,61,61,-26,61,-70,61,-67,-69,61,-80,61,-71,61,61,-12,-72,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-74,-75,-25,-81,-27,-73,61,61,61,61,61,-76,-78,61,61,-77,-79,]),'ELLIPSIS':([37,],[76,]),'IF':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,64,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,64,-12,-72,-74,-75,-25,-81,-27,-73,64,64,-76,-78,64,64,-77,-79,]),'SUB_ASSIGN':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,98,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-34,-33,-64,-41,-43,]),'LEFT_ROUND':([10,13,18,20,28,29,31,32,33,35,38,39,40,41,43,44,45,46,47,49,50,51,52,53,55,56,57,58,59,61,62,64,65,66,68,70,72,74,78,80,83,84,85,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,114,122,132,133,134,135,136,137,138,139,142,143,144,145,146,],[17,-17,-7,-82,-19,66,-10,-11,-9,-8,-18,-68,66,66,-26,80,66,-70,66,-63,-67,-69,86,66,-80,-65,-59,93,-62,66,-40,103,-71,66,-60,66,-61,-12,-72,66,66,66,-66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-74,-75,-25,-81,-27,-73,-42,66,-64,66,-41,66,-43,66,66,-76,-78,66,66,-77,-79,]),'INT':([0,1,2,4,7,8,9,16,17,18,19,20,31,32,34,35,37,43,74,107,],[3,-1,-3,-4,3,3,3,-2,3,-7,-5,3,3,-11,-6,-8,3,-26,-12,-25,]),'RIGHT_SQUARE':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,117,118,119,120,121,123,124,125,126,127,128,129,130,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,-28,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,136,-38,-37,-36,-39,-53,-55,-54,-31,-29,-34,-33,-30,-64,-41,-43,]),'LEFT_CURL':([10,11,13,18,20,21,22,28,29,31,32,33,35,38,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-15,20,-17,-7,-82,-16,20,-19,20,-10,-11,-9,-8,-18,-68,-26,-70,-67,-69,-80,-71,20,-12,-72,-74,-75,-25,-81,-27,-73,20,20,-76,-78,20,20,-77,-79,]),'L_OP':([42,48,49,52,54,56,57,59,60,62,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,91,-65,-59,-62,-56,-40,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,91,91,-64,-41,-43,]),'BREAK':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,67,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,67,-12,-72,-74,-75,-25,-81,-27,-73,67,67,-76,-78,67,67,-77,-79,]),'INT_NUM':([18,20,29,31,32,33,35,39,40,41,43,45,46,47,50,51,53,55,61,65,66,70,74,78,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,122,133,135,137,138,139,142,143,144,145,146,],[-7,-82,68,-10,-11,-9,-8,-68,68,68,-26,68,-70,68,-67,-69,68,-80,68,-71,68,68,-12,-72,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-74,-75,-25,-81,-27,-73,68,68,68,68,68,-76,-78,68,68,-77,-79,]),'CONTINUE':([18,20,29,31,32,33,35,39,43,46,50,51,55,65,70,74,78,105,106,107,108,109,110,133,138,139,142,143,144,145,146,],[-7,-82,69,-10,-11,-9,-8,-68,-26,-70,-67,-69,-80,-71,69,-12,-72,-74,-75,-25,-81,-27,-73,69,69,-76,-78,69,69,-77,-79,]),'NE_OP':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,100,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-34,-33,-64,-41,-43,]),'EQ_OP':([42,48,49,52,54,56,57,59,60,62,63,68,72,77,81,82,85,88,97,112,113,114,118,119,120,121,123,124,125,128,129,132,134,136,],[-52,-35,-63,-46,-32,-65,-59,-62,-56,-40,101,-60,-61,-49,-50,-47,-66,-48,-51,-57,-58,-42,-38,-37,-36,-39,-53,-55,-54,-34,-33,-64,-41,-43,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([29,70,93,122,133,138,143,144,],[39,39,122,137,39,39,39,39,]),'unary_expression':([29,40,41,45,47,53,61,66,70,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,133,135,137,138,143,144,],[42,77,42,81,82,88,97,42,42,42,42,42,42,42,42,42,42,42,42,123,124,125,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'iteration_statement':([29,70,133,138,143,144,],[46,46,46,46,46,46,]),'additive_expression':([29,41,66,70,80,86,87,89,90,91,92,93,98,99,100,101,102,103,122,133,135,137,138,143,144,],[48,48,48,48,48,48,48,118,119,120,121,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'external_declaration':([0,9,],[1,16,]),'type_specifier':([0,7,8,9,17,20,31,37,],[6,14,15,6,24,30,30,24,]),'compound_statement':([11,22,29,70,133,138,143,144,],[19,34,50,50,50,50,50,50,]),'selection_statement':([29,70,133,138,143,144,],[51,51,51,51,51,51,]),'postfix_expression':([29,40,41,45,47,53,61,66,70,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,133,135,137,138,143,144,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'relational_expression':([29,41,66,70,80,86,87,93,98,99,100,101,102,103,122,133,135,137,138,143,144,],[54,54,54,54,54,54,54,54,54,54,128,129,54,54,54,54,54,54,54,54,54,]),'statement':([29,70,133,138,143,144,],[55,108,139,142,145,146,]),'empty':([20,],[33,]),'string_literal':([29,40,41,45,47,53,61,66,70,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,133,135,137,138,143,144,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'parameter_type_list':([17,],[26,]),'parameter_declaration':([17,37,],[27,75,]),'direct_declarator':([6,12,14,15,24,30,],[10,10,10,10,10,10,]),'argument_expression_list':([86,],[115,]),'mult_expression':([29,41,66,70,80,83,84,86,87,89,90,91,92,93,98,99,100,101,102,103,122,133,135,137,138,143,144,],[60,60,60,60,60,112,113,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'primary_expression':([29,40,41,45,47,53,61,66,70,80,83,84,86,87,89,90,91,92,93,94,95,96,98,99,100,101,102,103,122,133,135,137,138,143,144,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'declaration':([0,9,20,31,],[4,4,32,74,]),'equality_expression':([29,41,66,70,80,86,87,93,98,99,102,103,122,133,135,137,138,143,144,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'jump_statement':([29,70,133,138,143,144,],[65,65,65,65,65,65,]),'declaration_list_opt':([20,],[29,]),'function_definition':([0,9,],[2,2,]),'parameter_list':([17,],[25,]),'declaration_list':([20,],[31,]),'translation_unit':([0,],[9,]),'declarator':([6,12,14,15,24,30,],[11,21,22,23,36,73,]),'statement_list':([29,],[70,]),'expression':([29,41,66,70,80,86,87,93,98,99,102,103,122,133,135,137,138,143,144,],[71,79,104,71,111,116,117,71,126,127,130,131,71,71,140,141,71,71,71,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_01','parser.py',39),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_02','parser.py',43),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','parser.py',47),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','parser.py',48),
  ('function_definition -> type_specifier declarator compound_statement','function_definition',3,'p_function_definition_01','parser.py',52),
  ('function_definition -> STATIC type_specifier declarator compound_statement','function_definition',4,'p_function_definition_02','parser.py',56),
  ('declaration -> type_specifier declarator SEMICOLON','declaration',3,'p_declaration_01','parser.py',60),
  ('declaration -> EXTERN type_specifier declarator SEMICOLON','declaration',4,'p_declaration_02','parser.py',64),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt_01','parser.py',68),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt_02','parser.py',72),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_02','parser.py',76),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_03','parser.py',80),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',84),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',85),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_01','parser.py',89),
  ('declarator -> MULTIPLY declarator','declarator',2,'p_declarator_02','parser.py',93),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator_01','parser.py',97),
  ('direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND','direct_declarator',4,'p_direct_declarator_02','parser.py',101),
  ('direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND','direct_declarator',3,'p_direct_declarator_03','parser.py',105),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list_01','parser.py',109),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list_02','parser.py',113),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_01','parser.py',117),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_02','parser.py',121),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',125),
  ('compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL','compound_statement',4,'p_compound_statement_01','parser.py',130),
  ('compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL','compound_statement',3,'p_compound_statement_02','parser.py',134),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',138),
  ('expression -> equality_expression','expression',1,'p_expression_01','parser.py',142),
  ('expression -> equality_expression EQUAL expression','expression',3,'p_expression_02','parser.py',146),
  ('expression -> equality_expression ADD_ASSIGN expression','expression',3,'p_expression_02','parser.py',147),
  ('expression -> equality_expression SUB_ASSIGN expression','expression',3,'p_expression_02','parser.py',148),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_01','parser.py',152),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression_02','parser.py',156),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression_02','parser.py',157),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression_01','parser.py',161),
  ('relational_expression -> relational_expression L_OP additive_expression','relational_expression',3,'p_relational_expression_02','parser.py',165),
  ('relational_expression -> relational_expression G_OP additive_expression','relational_expression',3,'p_relational_expression_02','parser.py',166),
  ('relational_expression -> relational_expression LE_OP additive_expression','relational_expression',3,'p_relational_expression_02','parser.py',167),
  ('relational_expression -> relational_expression GE_OP additive_expression','relational_expression',3,'p_relational_expression_02','parser.py',168),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_01','parser.py',172),
  ('postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND','postfix_expression',4,'p_postfix_expression_02','parser.py',176),
  ('postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND','postfix_expression',3,'p_postfix_expression_03','parser.py',180),
  ('postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE','postfix_expression',4,'p_postfix_expression_04','parser.py',184),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list_01','parser.py',188),
  ('argument_expression_list -> argument_expression_list COMMA expression','argument_expression_list',3,'p_argument_expression_list_02','parser.py',192),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_01','parser.py',196),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression_02','parser.py',200),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression_03','parser.py',204),
  ('unary_expression -> EXCLAMATION unary_expression','unary_expression',2,'p_unary_expression_06','parser.py',208),
  ('unary_expression -> MULTIPLY unary_expression','unary_expression',2,'p_unary_expression_04','parser.py',214),
  ('unary_expression -> AMPERSAND unary_expression','unary_expression',2,'p_unary_expression_05','parser.py',218),
  ('mult_expression -> unary_expression','mult_expression',1,'p_mult_expression_01','parser.py',222),
  ('mult_expression -> mult_expression MULTIPLY unary_expression','mult_expression',3,'p_mult_expression_02','parser.py',226),
  ('mult_expression -> mult_expression DIVIDE unary_expression','mult_expression',3,'p_mult_expression_02','parser.py',227),
  ('mult_expression -> mult_expression MODULO unary_expression','mult_expression',3,'p_mult_expression_02','parser.py',228),
  ('additive_expression -> mult_expression','additive_expression',1,'p_additive_expression_01','parser.py',232),
  ('additive_expression -> additive_expression PLUS mult_expression','additive_expression',3,'p_additive_expression_02','parser.py',236),
  ('additive_expression -> additive_expression MINUS mult_expression','additive_expression',3,'p_additive_expression_02','parser.py',237),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression_01','parser.py',241),
  ('primary_expression -> INT_NUM','primary_expression',1,'p_primary_expression_02','parser.py',245),
  ('primary_expression -> REAL_NUM','primary_expression',1,'p_primary_expression_03','parser.py',249),
  ('primary_expression -> CHARACTER','primary_expression',1,'p_primary_expression_04','parser.py',253),
  ('primary_expression -> string_literal','primary_expression',1,'p_primary_expression_05','parser.py',257),
  ('primary_expression -> LEFT_ROUND expression RIGHT_ROUND','primary_expression',3,'p_primary_expression_06','parser.py',261),
  ('string_literal -> STRING','string_literal',1,'p_string_literal_01','parser.py',265),
  ('string_literal -> string_literal STRING','string_literal',2,'p_string_literal_02','parser.py',269),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',273),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',274),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',275),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',276),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',277),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement_01','parser.py',281),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement_02','parser.py',285),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement_03','parser.py',289),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement_04','parser.py',293),
  ('iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement','iteration_statement',5,'p_iteration_statement_01','parser.py',297),
  ('iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement','iteration_statement',7,'p_iteration_statement_02','parser.py',301),
  ('selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement','selection_statement',5,'p_selection_statement_01','parser.py',305),
  ('selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement','selection_statement',7,'p_selection_statement_02','parser.py',309),
  ('statement_list -> statement','statement_list',1,'p_statement_list_02','parser.py',313),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_03','parser.py',317),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',321),
]
