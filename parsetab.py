
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x0f\x8c\x92\x96}\x15\xc1\xeft\xf8e\xe8\x01\xf2\xd7\xf1'
    
_lr_action_items = {'EXCLAMATION':([1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[10,-30,10,-26,10,-28,-27,-29,10,-25,10,10,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'RIGHT_OP':([2,3,4,6,7,8,9,11,17,21,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,-37,-40,-9,103,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,103,103,103,103,-34,-36,-35,-38,-39,-41,-42,-24,-12,-10,-32,]),'SHORT':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[78,78,78,-98,-131,-105,-96,-97,-100,78,-104,-102,-101,-99,78,-103,-106,-132,-109,78,-126,78,78,78,-112,78,-92,-93,78,-95,-94,-91,78,78,78,-108,-113,-124,78,78,-107,78,-114,-125,]),'CONST':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,139,152,153,154,160,162,163,164,165,166,167,172,177,178,180,185,186,187,197,203,207,211,217,220,225,226,],[79,79,79,-98,-131,-105,-96,-97,-100,79,-104,-102,-101,-99,79,-103,-106,-132,-109,79,-126,79,79,79,79,-112,79,-92,-93,79,-95,-94,-91,79,-146,79,79,79,-108,-113,-124,79,79,-147,-107,79,-114,-125,]),'RIGHT_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,48,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'DEC_OP':([1,2,3,4,6,7,8,9,10,12,14,15,16,17,18,19,23,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,56,58,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,99,100,101,102,103,108,112,113,130,137,147,148,149,150,181,193,199,221,222,],[12,-3,-8,-7,-5,-1,-2,-6,-30,12,-26,12,-28,58,-27,-29,12,-25,-9,12,12,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,12,12,12,12,12,-15,-16,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-4,12,12,12,12,-11,-14,-13,12,12,-12,12,-10,12,12,12,12,12,12,]),'OR_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,41,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'VOID':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[81,81,81,-98,-131,-105,-96,-97,-100,81,-104,-102,-101,-99,81,-103,-106,-132,-109,81,-126,81,81,81,-112,81,-92,-93,81,-95,-94,-91,81,81,81,-108,-113,-124,81,81,-107,81,-114,-125,]),'CHARACTER':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[3,3,-30,3,-26,3,-28,-27,-29,3,-25,3,3,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'EQUAL':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,159,],[-3,-8,-7,-5,-1,-2,-6,42,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,199,]),'CHAR':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[82,82,82,-98,-131,-105,-96,-97,-100,82,-104,-102,-101,-99,82,-103,-106,-132,-109,82,-126,82,82,82,-112,82,-92,-93,82,-95,-94,-91,82,82,82,-108,-113,-124,82,82,-107,82,-114,-125,]),'VOLATILE':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,139,152,153,154,160,162,163,164,165,166,167,172,177,178,180,185,186,187,197,203,207,211,217,220,225,226,],[98,98,98,-98,-131,-105,-96,-97,-100,98,-104,-102,-101,-99,98,-103,-106,-132,-109,98,-126,98,98,98,98,-112,98,-92,-93,98,-95,-94,-91,98,-146,98,98,98,-108,-113,-124,98,98,-147,-107,98,-114,-125,]),'AND_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,43,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'REAL_NUM':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[9,9,-30,9,-26,9,-28,-27,-29,9,-25,9,9,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'EXP_NUM':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[6,6,-30,6,-26,6,-28,-27,-29,6,-25,6,6,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'MULTIPLY':([1,2,3,4,6,7,8,9,10,11,12,14,15,16,17,18,19,21,23,26,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,93,94,95,96,97,98,99,100,101,102,103,104,108,112,113,121,122,123,124,125,129,130,131,133,135,136,137,139,146,147,148,149,150,151,155,160,162,163,164,165,166,167,170,172,177,178,181,186,189,193,197,199,200,201,203,208,211,217,221,222,224,226,],[14,-3,-8,-7,-5,-1,-2,-6,-30,-31,14,-26,14,-28,-19,-27,-29,-33,14,70,-25,-9,14,14,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,14,-21,14,-23,14,14,14,-15,-16,14,14,14,-31,-22,14,14,14,14,14,14,14,14,14,14,14,14,14,-98,-131,-105,-96,-97,-100,-116,-104,-102,-101,-99,-118,-103,139,-106,-132,-4,14,14,14,14,-20,-11,-14,-13,-34,-36,-35,70,70,-115,14,-109,-126,-117,139,14,139,-24,-12,14,-10,14,-32,139,-81,-92,-93,-83,-95,-94,-91,139,-85,-146,139,14,-108,139,14,-124,14,-82,-84,139,-86,-147,-107,14,14,139,-125,]),'SIZEOF':([1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[15,-30,15,-26,15,-28,-27,-29,15,-25,15,15,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MINUS':([1,2,3,4,6,7,8,9,10,11,12,14,15,16,17,18,19,21,23,26,27,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,99,100,101,102,103,104,108,112,113,121,122,123,124,125,130,137,144,145,146,147,148,149,150,151,181,193,199,221,222,],[16,-3,-8,-7,-5,-1,-2,-6,-30,-31,16,-26,16,-28,-19,-27,-29,-33,16,-37,74,-25,-9,16,16,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,16,-21,16,-23,16,16,16,-15,-16,16,16,16,-31,-22,16,16,16,16,16,16,16,16,16,16,16,16,16,-4,16,16,16,16,-20,-11,-14,-13,-34,-36,-35,-38,-39,16,16,74,74,-24,-12,16,-10,16,-32,16,16,16,16,16,]),'DOT':([2,3,4,6,7,8,9,17,29,56,58,99,108,112,113,147,149,],[-3,-8,-7,-5,-1,-2,-6,59,-9,-15,-16,-4,-11,-14,-13,-12,-10,]),'DIVIDE':([2,3,4,6,7,8,9,11,17,21,26,29,50,52,56,58,63,64,99,104,108,112,113,121,122,123,124,125,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,72,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-34,-36,-35,72,72,-24,-12,-10,-32,]),'LE_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,66,-37,-40,-9,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-46,-45,-44,-47,-34,-36,-35,-38,-39,66,66,-41,-42,-24,-12,-10,-32,]),'POWER':([2,3,4,6,7,8,9,11,13,17,20,21,24,26,27,29,31,35,50,52,56,58,63,64,99,104,106,108,112,113,114,117,118,119,120,121,122,123,124,125,127,128,143,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,51,-19,-53,-33,-48,-37,-40,-9,-51,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-46,-45,-44,-47,-34,-36,-35,-38,-39,-50,-49,51,-41,-42,-24,-12,-10,-32,]),'G_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,67,-37,-40,-9,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-46,-45,-44,-47,-34,-36,-35,-38,-39,67,67,-41,-42,-24,-12,-10,-32,]),'LEFT_SQUARE':([2,3,4,6,7,8,9,17,29,56,58,78,79,80,81,82,83,84,86,88,91,93,94,95,96,97,98,99,108,112,113,129,131,133,135,136,139,140,141,147,149,160,161,162,163,164,165,166,167,170,172,175,177,178,179,182,186,191,194,197,200,201,202,203,206,208,209,210,211,212,213,216,217,219,226,231,232,233,234,239,242,243,245,],[-3,-8,-7,-5,-1,-2,-6,55,-9,-15,-16,-98,-131,-105,-96,-97,-100,-116,-104,-102,-101,-99,-118,-103,137,-106,-132,-4,-11,-14,-13,-115,-109,-126,-117,137,-142,181,137,-12,-10,-81,-167,-92,-93,-83,-95,-94,-91,137,-85,-163,-146,-143,-144,181,-108,221,-135,-124,-82,-84,-168,137,137,-86,-162,-164,-147,-145,-169,-165,-107,221,-125,-170,-166,-136,-141,-138,-139,-140,-137,]),'REGISTER':([78,79,80,81,82,83,86,88,91,93,95,97,98,131,133,136,160,162,163,164,165,166,167,172,180,186,197,203,207,217,220,226,],[-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-109,-126,165,165,-92,-93,165,-95,-94,-91,165,165,-108,-124,165,165,-107,165,-125,]),'QUESTION':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,26,27,29,30,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,61,-48,-37,-40,-9,-59,-51,-57,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-56,-41,-42,-24,-12,-10,-32,]),'UNSIGNED':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[86,86,86,-98,-131,-105,-96,-97,-100,86,-104,-102,-101,-99,86,-103,-106,-132,-109,86,-126,86,86,86,-112,86,-92,-93,86,-95,-94,-91,86,86,86,-108,-113,-124,86,86,-107,86,-114,-125,]),'OR_OP':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,26,27,29,30,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,62,-48,-37,-40,-9,-59,-51,-57,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-56,-41,-42,-24,-12,-10,-32,]),'EQ_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,31,35,50,52,56,58,63,64,99,104,108,112,113,114,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,-48,-37,-40,-9,77,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,77,-46,-45,-44,-47,-34,-36,-35,-38,-39,-50,-49,-41,-42,-24,-12,-10,-32,]),'PIPE':([2,3,4,6,7,8,9,11,13,17,20,21,24,26,27,29,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-48,-37,-40,-9,-51,101,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-46,-45,-44,-47,-34,-36,-35,-38,-39,101,-50,-49,-56,-41,-42,-24,-12,-10,-32,]),'TILDA':([1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[19,-30,19,-26,19,-28,-27,-29,19,-25,19,19,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'PLUS':([1,2,3,4,6,7,8,9,10,11,12,14,15,16,17,18,19,21,23,26,27,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,99,100,101,102,103,104,108,112,113,121,122,123,124,125,130,137,144,145,146,147,148,149,150,151,181,193,199,221,222,],[18,-3,-8,-7,-5,-1,-2,-6,-30,-31,18,-26,18,-28,-19,-27,-29,-33,18,-37,73,-25,-9,18,18,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,18,-21,18,-23,18,18,18,-15,-16,18,18,18,-31,-22,18,18,18,18,18,18,18,18,18,18,18,18,18,-4,18,18,18,18,-20,-11,-14,-13,-34,-36,-35,-38,-39,18,18,73,73,-24,-12,18,-10,18,-32,18,18,18,18,18,]),'PTR_OP':([2,3,4,6,7,8,9,17,29,56,58,99,108,112,113,147,149,],[-3,-8,-7,-5,-1,-2,-6,57,-9,-15,-16,-4,-11,-14,-13,-12,-10,]),'AUTO':([78,79,80,81,82,83,86,88,91,93,95,97,98,131,133,136,160,162,163,164,165,166,167,172,180,186,197,203,207,217,220,226,],[-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-109,-126,166,166,-92,-93,166,-95,-94,-91,166,166,-108,-124,166,166,-107,166,-125,]),'COLON':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,25,26,27,29,30,31,34,35,36,50,52,56,58,63,64,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,99,104,105,106,108,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,135,142,143,144,145,146,147,149,151,155,184,186,191,192,194,197,217,219,224,226,233,234,239,242,243,245,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-61,-48,-76,-37,-40,-9,-59,-51,-57,-43,-63,-21,-23,-15,-16,-31,-22,-98,-131,-105,-96,-97,-100,-116,-104,-102,-101,-99,-118,-103,-106,-132,-4,-20,-64,-54,-11,-14,-13,-52,150,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-115,-109,-126,-117,-77,-56,-41,-42,-24,-12,-10,-32,193,-62,-108,-134,222,-135,-124,-107,-133,193,-125,-136,-141,-138,-139,-140,-137,]),'IDENTIFIER':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,57,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,97,98,100,101,102,103,129,130,131,133,134,135,137,139,148,150,155,156,160,162,163,164,165,166,167,170,172,177,178,179,181,186,189,190,193,197,198,199,200,201,203,206,208,211,212,217,220,221,222,224,226,244,],[7,7,-30,7,-26,7,-28,-27,-29,7,-25,7,7,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,7,7,7,7,7,112,113,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-98,-131,-105,-96,-97,-100,-116,-104,131,-102,-111,133,-101,-110,-99,-118,-103,-106,-132,7,7,7,7,-115,7,-109,-126,159,-117,7,-142,7,7,194,159,-81,-92,-93,-83,-95,-94,-91,194,-85,-146,-143,-144,7,-108,194,194,7,-124,159,7,-82,-84,194,194,-86,-147,-145,-107,235,7,7,194,-125,246,]),'ADD_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,47,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'$end':([2,3,4,5,6,7,8,9,99,],[-3,-8,-7,0,-5,-1,-2,-6,-4,]),'TYPEDEF':([78,79,80,81,82,83,86,88,91,93,95,97,98,131,133,136,160,162,163,164,165,166,167,172,180,186,197,203,207,217,220,226,],[-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-109,-126,167,167,-92,-93,167,-95,-94,-91,167,167,-108,-124,167,167,-107,167,-125,]),'MODULO':([2,3,4,6,7,8,9,11,17,21,26,29,50,52,56,58,63,64,99,104,108,112,113,121,122,123,124,125,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,71,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-34,-36,-35,71,71,-24,-12,-10,-32,]),'STRING':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[2,2,-30,2,-26,2,-28,-27,-29,2,-25,2,2,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'UNION':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[89,89,89,-98,-131,-105,-96,-97,-100,89,-104,-102,-101,-99,89,-103,-106,-132,-109,89,-126,89,89,89,-112,89,-92,-93,89,-95,-94,-91,89,89,89,-108,-113,-124,89,89,-107,89,-114,-125,]),'RIGHT_ROUND':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,25,26,27,29,30,31,33,34,35,36,50,52,54,56,58,63,64,78,79,80,81,82,83,84,85,86,88,91,93,94,95,96,97,98,99,104,105,106,107,108,109,110,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,135,136,138,139,140,141,142,143,144,145,146,147,149,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,178,179,180,182,183,184,186,191,194,197,200,201,202,203,204,205,206,208,209,210,211,212,213,214,216,217,218,219,220,226,229,230,231,232,233,234,235,236,237,239,242,243,245,246,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-61,-48,-76,-37,-40,-9,-59,-51,99,-57,-43,-63,-21,-23,108,-15,-16,-31,-22,-98,-131,-105,-96,-97,-100,-116,130,-104,-102,-101,-99,-118,-103,-157,-106,-132,-4,-20,-64,-54,146,-11,-17,147,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-115,-109,-126,-117,161,-158,-142,-160,-159,-77,-56,-41,-42,-24,-12,-10,-32,-81,-167,-92,-93,-83,-95,-94,-91,202,-150,-154,-148,-85,209,-163,-146,-143,-144,213,-161,-18,-62,-108,-134,-135,-124,-82,-84,-168,161,-153,-152,-159,-86,-162,-164,-147,-145,-169,231,-165,-107,233,-133,234,-125,-149,-151,-170,-166,-136,-141,-155,242,243,-138,-139,-140,-137,-156,]),'ENUM':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[90,90,90,-98,-131,-105,-96,-97,-100,90,-104,-102,-101,-99,90,-103,-106,-132,-109,90,-126,90,90,90,-112,90,-92,-93,90,-95,-94,-91,90,90,90,-108,-113,-124,90,90,-107,90,-114,-125,]),'RIGHT_CURL':([2,3,4,6,7,8,9,13,17,20,21,22,24,26,27,29,30,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,153,154,157,158,159,176,184,185,187,196,225,227,228,],[-3,-8,-7,-5,-1,-2,-6,-55,-19,-53,-33,-61,-48,-37,-40,-9,-59,-51,-57,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-56,-41,-42,-24,-12,-10,-32,186,-112,-127,197,-129,-78,-62,217,-113,226,-114,-128,-130,]),'AND_OP':([2,3,4,6,7,8,9,11,13,17,20,21,24,26,27,29,30,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-48,-37,-40,-9,75,-51,-57,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,75,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-56,-41,-42,-24,-12,-10,-32,]),'GE_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,69,-37,-40,-9,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-46,-45,-44,-47,-34,-36,-35,-38,-39,69,69,-41,-42,-24,-12,-10,-32,]),'AMPERSAND':([1,2,3,4,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,23,24,26,27,28,29,31,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,99,100,101,102,103,104,106,108,112,113,114,117,118,119,120,121,122,123,124,125,127,128,130,137,144,145,146,147,148,149,150,151,181,193,199,221,222,],[28,-3,-8,-7,-5,-1,-2,-6,-30,-31,28,-26,28,-28,-19,-27,-29,60,-33,28,-48,-37,-40,-25,-9,-51,28,-43,28,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,28,-21,28,-23,28,28,28,-15,-16,28,28,28,-31,-22,28,28,28,28,28,28,28,28,28,28,28,28,28,-4,28,28,28,28,-20,60,-11,-14,-13,-52,-46,-45,-44,-47,-34,-36,-35,-38,-39,-50,-49,28,28,-41,-42,-24,-12,28,-10,28,-32,28,28,28,28,28,]),'ELLIPSIS':([207,],[229,]),'LEFT_OP':([2,3,4,6,7,8,9,11,17,21,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,-37,-40,-9,102,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,102,102,102,102,-34,-36,-35,-38,-39,-41,-42,-24,-12,-10,-32,]),'LONG':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[83,83,83,-98,-131,-105,-96,-97,-100,83,-104,-102,-101,-99,83,-103,-106,-132,-109,83,-126,83,83,83,-112,83,-92,-93,83,-95,-94,-91,83,83,83,-108,-113,-124,83,83,-107,83,-114,-125,]),'HEX_NUM':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[8,8,-30,8,-26,8,-28,-27,-29,8,-25,8,8,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'STRUCT':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[92,92,92,-98,-131,-105,-96,-97,-100,92,-104,-102,-101,-99,92,-103,-106,-132,-109,92,-126,92,92,92,-112,92,-92,-93,92,-95,-94,-91,92,92,92,-108,-113,-124,92,92,-107,92,-114,-125,]),'SUB_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,38,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'MOD_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,39,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'LEFT_ROUND':([0,1,2,3,4,6,7,8,9,10,12,14,15,16,17,18,19,23,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,56,58,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,93,94,95,96,97,98,99,100,101,102,103,108,112,113,129,130,131,133,135,136,137,139,140,141,147,148,149,150,155,160,161,162,163,164,165,166,167,170,172,175,177,178,179,181,182,186,189,190,191,193,194,197,199,200,201,202,203,206,208,209,210,211,212,213,216,217,219,221,222,224,226,231,232,233,234,239,242,243,245,],[1,32,-3,-8,-7,-5,-1,-2,-6,-30,1,-26,53,-28,54,-27,-29,65,-25,-9,32,1,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,32,65,32,32,32,-15,-16,65,32,65,32,65,65,65,65,65,65,65,65,65,65,65,65,-98,-131,-105,-96,-97,-100,-116,-104,-102,-101,-99,-118,-103,136,-106,-132,-4,32,65,65,65,-11,-14,-13,-115,65,-109,-126,-117,136,65,-142,180,136,-12,32,-10,65,189,-81,-167,-92,-93,-83,-95,-94,-91,203,-85,-163,-146,-143,-144,65,180,-108,189,189,220,65,-135,-124,65,-82,-84,-168,203,203,-86,-162,-164,-147,-145,-169,-165,-107,220,65,65,189,-125,-170,-166,-136,-141,-138,-139,-140,-137,]),'SEMICOLON':([2,3,4,6,7,8,9,13,17,20,21,22,24,26,27,29,30,31,34,35,50,52,56,58,63,64,99,104,106,108,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,143,144,145,146,147,149,151,176,184,188,191,192,194,195,219,223,233,234,239,240,241,242,243,245,],[-3,-8,-7,-5,-1,-2,-6,-55,-19,-53,-33,-61,-48,-37,-40,-9,-59,-51,-57,-43,-21,-23,-15,-16,-31,-22,-4,-20,-54,-11,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-56,-41,-42,-24,-12,-10,-32,-78,-62,-119,-134,-121,-135,225,-133,-122,-136,-141,-138,-123,-120,-139,-140,-137,]),'XOR_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,40,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'INT':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[93,93,93,-98,-131,-105,-96,-97,-100,93,-104,-102,-101,-99,93,-103,-106,-132,-109,93,-126,93,93,93,-112,93,-92,-93,93,-95,-94,-91,93,93,93,-108,-113,-124,93,93,-107,93,-114,-125,]),'DOUBLE':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[88,88,88,-98,-131,-105,-96,-97,-100,88,-104,-102,-101,-99,88,-103,-106,-132,-109,88,-126,88,88,88,-112,88,-92,-93,88,-95,-94,-91,88,88,88,-108,-113,-124,88,88,-107,88,-114,-125,]),'FLOAT':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[91,91,91,-98,-131,-105,-96,-97,-100,91,-104,-102,-101,-99,91,-103,-106,-132,-109,91,-126,91,91,91,-112,91,-92,-93,91,-95,-94,-91,91,91,91,-108,-113,-124,91,91,-107,91,-114,-125,]),'RIGHT_SQUARE':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,25,26,27,29,30,31,34,35,36,50,52,56,58,63,64,99,104,105,106,108,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,137,142,143,144,145,146,147,149,151,174,176,181,184,215,221,238,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-61,-48,-76,-37,-40,-9,-59,-51,-57,-43,-63,-21,-23,-15,-16,-31,-22,-4,-20,-64,-54,-11,149,-14,-13,-52,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,175,-77,-56,-41,-42,-24,-12,-10,-32,210,-78,216,-62,232,239,245,]),'LEFT_CURL':([87,89,90,92,131,133,],[132,-111,134,-110,152,156,]),'L_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,35,50,52,56,58,63,64,99,104,108,112,113,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,68,-37,-40,-9,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-46,-45,-44,-47,-34,-36,-35,-38,-39,68,68,-41,-42,-24,-12,-10,-32,]),'SIGNED':([32,53,65,78,79,80,81,82,83,84,86,88,91,93,94,95,97,98,131,132,133,136,152,153,154,160,162,163,164,165,166,167,172,180,185,186,187,197,203,207,217,220,225,226,],[95,95,95,-98,-131,-105,-96,-97,-100,95,-104,-102,-101,-99,95,-103,-106,-132,-109,95,-126,95,95,95,-112,95,-92,-93,95,-95,-94,-91,95,95,95,-108,-113,-124,95,95,-107,95,-114,-125,]),'INT_NUM':([0,1,10,12,14,15,16,18,19,23,28,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[4,4,-30,4,-26,4,-28,-27,-29,4,-25,4,4,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'MUL_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,44,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'STATIC':([78,79,80,81,82,83,86,88,91,93,95,97,98,131,133,136,160,162,163,164,165,166,167,172,180,186,197,203,207,217,220,226,],[-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-109,-126,163,163,-92,-93,163,-95,-94,-91,163,163,-108,-124,163,163,-107,163,-125,]),'LEFT_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,46,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),'COMMA':([2,3,4,6,7,8,9,11,13,17,20,21,22,24,25,26,27,29,30,31,33,34,35,36,50,52,56,58,63,64,78,79,80,81,82,83,86,88,91,93,95,97,98,99,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,133,139,140,142,143,144,145,146,147,149,151,157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,175,176,177,178,179,182,183,184,186,188,191,192,194,195,196,197,200,201,202,204,205,206,208,209,210,211,212,213,216,217,219,223,226,227,228,230,231,232,233,234,235,237,239,240,241,242,243,245,246,],[-3,-8,-7,-5,-1,-2,-6,-31,-55,-19,-53,-33,-61,-48,-76,-37,-40,-9,-59,-51,100,-57,-43,-63,-21,-23,-15,-16,-31,-22,-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-4,-20,-64,-54,-11,-17,148,100,-14,-13,-52,100,-60,-46,-45,-44,-47,-34,-36,-35,-38,-39,-58,-50,-49,-109,-126,-142,-160,-77,-56,-41,-42,-24,-12,-10,-32,-127,198,-129,-81,-167,-92,-93,-83,-95,-94,-91,-150,-154,207,-85,-163,-78,-146,-143,-144,-161,-18,-62,-108,-119,-134,-121,-135,224,198,-124,-82,-84,-168,-153,-152,-159,-86,-162,-164,-147,-145,-169,-165,-107,-133,-122,-125,-128,-130,-151,-170,-166,-136,-141,-155,244,-138,-123,-120,-139,-140,-137,-156,]),'INC_OP':([1,2,3,4,6,7,8,9,10,12,14,15,16,17,18,19,23,28,29,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,56,58,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,99,100,101,102,103,108,112,113,130,137,147,148,149,150,181,193,199,221,222,],[37,-3,-8,-7,-5,-1,-2,-6,-30,37,-26,37,-28,56,-27,-29,37,-25,-9,37,37,-70,-68,-74,-75,-65,-73,-66,-67,-71,-69,-72,37,37,37,37,37,-15,-16,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-4,37,37,37,37,-11,-14,-13,37,37,-12,37,-10,37,37,37,37,37,37,]),'EXTERN':([78,79,80,81,82,83,86,88,91,93,95,97,98,131,133,136,160,162,163,164,165,166,167,172,180,186,197,203,207,217,220,226,],[-98,-131,-105,-96,-97,-100,-104,-102,-101,-99,-103,-106,-132,-109,-126,162,162,-92,-93,162,-95,-94,-91,162,162,-108,-124,162,162,-107,162,-125,]),'NE_OP':([2,3,4,6,7,8,9,11,17,21,24,26,27,29,31,35,50,52,56,58,63,64,99,104,108,112,113,114,117,118,119,120,121,122,123,124,125,127,128,144,145,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,-31,-19,-33,-48,-37,-40,-9,76,-43,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,76,-46,-45,-44,-47,-34,-36,-35,-38,-39,-50,-49,-41,-42,-24,-12,-10,-32,]),'DIV_ASSIGN':([2,3,4,6,7,8,9,11,17,29,50,52,56,58,63,64,99,104,108,112,113,146,147,149,151,],[-3,-8,-7,-5,-1,-2,-6,45,-19,-9,-21,-23,-15,-16,-31,-22,-4,-20,-11,-14,-13,-24,-12,-10,-32,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'storage_class_specifier':([136,160,164,172,180,203,207,220,],[160,160,160,160,160,160,160,160,]),'unary_expression':([1,12,15,23,32,37,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[11,50,52,63,11,104,11,63,11,11,11,63,11,63,11,63,63,63,63,63,63,63,63,63,63,63,63,11,63,63,63,63,63,11,63,63,63,63,63,63,]),'struct_or_union_specifier':([32,53,65,84,94,132,136,152,153,160,164,172,180,185,203,207,220,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'exclusive_or_expression':([1,32,49,53,54,55,61,62,65,75,100,101,137,148,150,181,193,199,221,222,],[13,13,13,13,13,13,13,13,13,13,13,143,13,13,13,13,13,13,13,13,]),'identifier_list':([220,],[237,]),'struct_declaration_list':([132,152,],[153,185,]),'enumerator':([134,156,198,],[157,157,227,]),'pointer':([96,136,139,155,170,178,189,203,224,],[141,141,179,190,206,212,190,206,190,]),'additive_expression':([1,32,49,51,53,54,55,60,61,62,65,66,67,68,69,75,76,77,100,101,102,103,137,148,150,181,193,199,221,222,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,144,145,27,27,27,27,27,27,27,27,]),'type_specifier':([32,53,65,84,94,132,136,152,153,160,164,172,180,185,203,207,220,],[84,84,84,84,84,84,164,84,84,164,164,164,164,84,164,164,164,]),'inclusive_or_expression':([1,32,49,53,54,55,61,62,65,75,100,137,148,150,181,193,199,221,222,],[34,34,34,34,34,34,34,34,34,126,34,34,34,34,34,34,34,34,34,]),'type_name':([32,53,65,],[85,107,85,]),'postfix_expression':([1,12,15,23,32,37,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'and_expression':([1,32,49,51,53,54,55,61,62,65,75,100,101,137,148,150,181,193,199,221,222,],[20,20,20,106,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'cast_expression':([1,23,32,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[21,64,21,21,21,21,21,21,21,21,21,21,21,21,21,21,121,122,123,21,21,21,21,21,21,21,21,21,151,21,21,21,21,21,21,21,21,]),'struct_declarator_list':([155,],[195,]),'logical_or_expression':([1,32,49,53,54,55,61,65,100,137,148,150,181,193,199,221,222,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'unary_operator':([1,12,15,23,32,37,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'relational_expression':([1,32,49,51,53,54,55,60,61,62,65,75,76,77,100,101,137,148,150,181,193,199,221,222,],[24,24,24,24,24,24,24,24,24,24,24,24,127,128,24,24,24,24,24,24,24,24,24,24,]),'struct_or_union':([32,53,65,84,94,132,136,152,153,160,164,172,180,185,203,207,220,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'struct_declaration':([132,152,153,185,],[154,154,187,187,]),'assignment_expression':([1,32,49,53,54,55,61,65,100,148,],[25,25,105,25,109,25,25,25,142,183,]),'parameter_type_list':([136,180,203,220,],[168,214,168,236,]),'parameter_declaration':([136,180,203,207,220,],[169,169,169,230,169,]),'multiplicative_expression':([1,32,49,51,53,54,55,60,61,62,65,66,67,68,69,73,74,75,76,77,100,101,102,103,137,148,150,181,193,199,221,222,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,124,125,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'type_qualifier_list':([139,],[178,]),'argument_expression_list':([54,],[110,]),'constant_expression':([137,181,193,199,221,222,],[174,215,223,228,238,240,]),'primary_expression':([0,1,12,15,23,32,37,49,51,53,54,55,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,100,101,102,103,130,137,148,150,181,193,199,221,222,],[5,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'declaration_specifiers':([136,160,164,172,180,203,207,220,],[170,200,201,208,170,170,170,170,]),'direct_declarator':([155,170,189,190,203,206,224,],[191,191,191,219,191,219,191,]),'logical_and_expression':([1,32,49,53,54,55,61,62,65,100,137,148,150,181,193,199,221,222,],[30,30,30,30,30,30,30,116,30,30,30,30,30,30,30,30,30,30,]),'declarator':([155,170,189,203,224,],[192,205,218,218,192,]),'shift_expression':([1,32,49,51,53,54,55,60,61,62,65,66,67,68,69,75,76,77,100,101,137,148,150,181,193,199,221,222,],[35,35,35,35,35,35,35,35,35,35,35,117,118,119,120,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'equality_expression':([1,32,49,51,53,54,55,60,61,62,65,75,100,101,137,148,150,181,193,199,221,222,],[31,31,31,31,31,31,31,114,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'struct_declarator':([155,224,],[188,241,]),'parameter_list':([136,180,203,220,],[171,171,171,171,]),'enum_specifier':([32,53,65,84,94,132,136,152,153,160,164,172,180,185,203,207,220,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'type_qualifier':([32,53,65,84,94,132,136,139,152,153,160,164,172,178,180,185,203,207,220,],[94,94,94,94,94,94,172,177,94,94,172,172,172,211,172,94,172,172,172,]),'enumerator_list':([134,156,],[158,196,]),'abstract_declarator':([96,136,170,203,],[138,173,204,173,]),'specifier_qualifier_list':([32,53,65,84,94,132,152,153,185,],[96,96,96,129,135,155,155,155,155,]),'assignment_operator':([11,],[49,]),'conditional_expression':([1,32,49,53,54,55,61,65,100,137,148,150,181,193,199,221,222,],[36,36,36,36,36,36,36,36,36,176,36,184,176,176,176,176,176,]),'direct_abstract_declarator':([96,136,141,170,203,206,],[140,140,182,140,140,182,]),'expression':([1,32,53,55,61,65,],[33,33,33,111,115,33,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> primary_expression","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression_1','parser.py',38),
  ('primary_expression -> HEX_NUM','primary_expression',1,'p_primary_expression_2','parser.py',41),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression_3','parser.py',44),
  ('primary_expression -> LEFT_ROUND expression RIGHT_ROUND','primary_expression',3,'p_primary_expression_4','parser.py',47),
  ('primary_expression -> EXP_NUM','primary_expression',1,'p_primary_expression_5','parser.py',50),
  ('primary_expression -> REAL_NUM','primary_expression',1,'p_primary_expression_6','parser.py',53),
  ('primary_expression -> INT_NUM','primary_expression',1,'p_primary_expression_7','parser.py',56),
  ('primary_expression -> CHARACTER','primary_expression',1,'p_primary_expression_8','parser.py',59),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','parser.py',62),
  ('postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE','postfix_expression',4,'p_postfix_expression_2','parser.py',65),
  ('postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND','postfix_expression',3,'p_postfix_expression_3','parser.py',68),
  ('postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND','postfix_expression',4,'p_postfix_expression_4','parser.py',71),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_5','parser.py',74),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression_6','parser.py',77),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression_7','parser.py',80),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression_8','parser.py',83),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list_1','parser.py',86),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list_2','parser.py',89),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','parser.py',92),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression_2','parser.py',95),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression_3','parser.py',98),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_4','parser.py',101),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_5','parser.py',104),
  ('unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND','unary_expression',4,'p_unary_expression_6','parser.py',107),
  ('unary_operator -> AMPERSAND','unary_operator',1,'p_unary_operator_1','parser.py',110),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator_2','parser.py',113),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator_3','parser.py',116),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator_4','parser.py',119),
  ('unary_operator -> TILDA','unary_operator',1,'p_unary_operator_5','parser.py',122),
  ('unary_operator -> EXCLAMATION','unary_operator',1,'p_unary_operator_6','parser.py',125),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','parser.py',128),
  ('cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression','cast_expression',4,'p_cast_expression_2','parser.py',131),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression_1','parser.py',134),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression_2','parser.py',137),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression_3','parser.py',140),
  ('multiplicative_expression -> multiplicative_expression MODULO cast_expression','multiplicative_expression',3,'p_multiplicative_expression_4','parser.py',143),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','parser.py',146),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression_2','parser.py',149),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression_3','parser.py',152),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression_1','parser.py',155),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression_2','parser.py',158),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression_3','parser.py',161),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression_1','parser.py',164),
  ('relational_expression -> relational_expression L_OP shift_expression','relational_expression',3,'p_relational_expression_2','parser.py',167),
  ('relational_expression -> relational_expression G_OP shift_expression','relational_expression',3,'p_relational_expression_3','parser.py',170),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression_4','parser.py',173),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression_5','parser.py',176),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',179),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',182),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression_3','parser.py',185),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression_1','parser.py',188),
  ('and_expression -> and_expression AMPERSAND equality_expression','and_expression',3,'p_and_expression_2','parser.py',191),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression_1','parser.py',194),
  ('exclusive_or_expression -> exclusive_or_expression POWER and_expression','exclusive_or_expression',3,'p_exclusive_or_expression_2','parser.py',197),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression_1','parser.py',200),
  ('inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression_2','parser.py',203),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression_1','parser.py',206),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression_2','parser.py',209),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression_1','parser.py',212),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression_2','parser.py',215),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression_1','parser.py',218),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression_2','parser.py',221),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',224),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',227),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator_1','parser.py',230),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator_2','parser.py',233),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator_3','parser.py',236),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator_4','parser.py',239),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator_5','parser.py',242),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator_6','parser.py',245),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator_7','parser.py',248),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator_8','parser.py',251),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator_9','parser.py',254),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator_10','parser.py',257),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator_11','parser.py',260),
  ('expression -> assignment_expression','expression',1,'p_expression_1','parser.py',263),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','parser.py',266),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression_1','parser.py',269),
  ('declaration -> declaration_specifiers SEMICOLON','declaration',2,'p_declaration_1','parser.py',272),
  ('declaration -> declaration_specifiers init_declarator_list SEMICOLON','declaration',3,'p_declaration_2','parser.py',275),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers_1','parser.py',278),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_2','parser.py',281),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers_3','parser.py',284),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_4','parser.py',287),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers_5','parser.py',290),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers_6','parser.py',293),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list_1','parser.py',296),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list_2','parser.py',299),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator_1','parser.py',302),
  ('init_declarator -> declarator EQUAL initializer','init_declarator',3,'p_init_declarator_2','parser.py',305),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier_1','parser.py',308),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier_2','parser.py',311),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier_3','parser.py',314),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier_4','parser.py',317),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier_5','parser.py',320),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_1','parser.py',323),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_2','parser.py',326),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier_3','parser.py',329),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_4','parser.py',332),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier_5','parser.py',335),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier_6','parser.py',338),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier_7','parser.py',341),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier_8','parser.py',344),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier_9','parser.py',347),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier_10','parser.py',350),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier_11','parser.py',353),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL','struct_or_union_specifier',5,'p_struct_or_union_specifier_1','parser.py',356),
  ('struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL','struct_or_union_specifier',4,'p_struct_or_union_specifier_2','parser.py',359),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier_3','parser.py',362),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union_1','parser.py',365),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union_2','parser.py',368),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list_1','parser.py',371),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list_2','parser.py',374),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON','struct_declaration',3,'p_struct_declaration_1','parser.py',377),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list_1','parser.py',380),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_2','parser.py',383),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list_3','parser.py',386),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_4','parser.py',389),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list_1','parser.py',392),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list_2','parser.py',395),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator_1','parser.py',398),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator_2','parser.py',401),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator_3','parser.py',404),
  ('enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL','enum_specifier',4,'p_enum_specifier_1','parser.py',407),
  ('enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL','enum_specifier',5,'p_enum_specifier_2','parser.py',410),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier_3','parser.py',413),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list_1','parser.py',416),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list_2','parser.py',419),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator_1','parser.py',422),
  ('enumerator -> IDENTIFIER EQUAL constant_expression','enumerator',3,'p_enumerator_2','parser.py',425),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier_1','parser.py',428),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier_2','parser.py',431),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_1','parser.py',434),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_2','parser.py',437),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator_1','parser.py',440),
  ('direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND','direct_declarator',3,'p_direct_declarator_2','parser.py',443),
  ('direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE','direct_declarator',4,'p_direct_declarator_3','parser.py',446),
  ('direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE','direct_declarator',3,'p_direct_declarator_4','parser.py',449),
  ('direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND','direct_declarator',4,'p_direct_declarator_5','parser.py',452),
  ('direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND','direct_declarator',4,'p_direct_declarator_6','parser.py',455),
  ('direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND','direct_declarator',3,'p_direct_declarator_7','parser.py',458),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer_1','parser.py',461),
  ('pointer -> MULTIPLY type_qualifier_list','pointer',2,'p_pointer_2','parser.py',464),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer_3','parser.py',467),
  ('pointer -> MULTIPLY type_qualifier_list pointer','pointer',3,'p_pointer_4','parser.py',470),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list_1','parser.py',473),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list_2','parser.py',476),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list1','parser.py',479),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list2','parser.py',482),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list_1','parser.py',485),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list_2','parser.py',488),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','parser.py',491),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration_2','parser.py',494),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration_3','parser.py',497),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list_1','parser.py',500),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list_2','parser.py',503),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name_1','parser.py',506),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name_2','parser.py',509),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator_1','parser.py',512),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator_2','parser.py',515),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator_3','parser.py',518),
  ('direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND','direct_abstract_declarator',3,'p_direct_abstract_declarator_1','parser.py',521),
  ('direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE','direct_abstract_declarator',2,'p_direct_abstract_declarator_2','parser.py',524),
  ('direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator_3','parser.py',527),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE','direct_abstract_declarator',3,'p_direct_abstract_declarator_4','parser.py',530),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE','direct_abstract_declarator',4,'p_direct_abstract_declarator_5','parser.py',533),
  ('direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND','direct_abstract_declarator',2,'p_direct_abstract_declarator_6','parser.py',536),
  ('direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND','direct_abstract_declarator',3,'p_direct_abstract_declarator_7','parser.py',539),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND','direct_abstract_declarator',3,'p_direct_abstract_declarator_8','parser.py',542),
  ('direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND','direct_abstract_declarator',4,'p_direct_abstract_declarator_9','parser.py',545),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','parser.py',548),
  ('initializer -> LEFT_CURL initializer_list RIGHT_CURL','initializer',3,'p_initializer_2','parser.py',551),
  ('initializer -> LEFT_CURL initializer_list COMMA RIGHT_CURL','initializer',4,'p_initializer_3','parser.py',554),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list_1','parser.py',557),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list_2','parser.py',560),
  ('statement -> labeled_statement','statement',1,'p_statement_1','parser.py',563),
  ('statement -> compound_statement','statement',1,'p_statement_2','parser.py',566),
  ('statement -> expression_statement','statement',1,'p_statement_3','parser.py',569),
  ('statement -> selection_statement','statement',1,'p_statement_4','parser.py',572),
  ('statement -> iteration_statement','statement',1,'p_statement_5','parser.py',575),
  ('statement -> jump_statement','statement',1,'p_statement_6','parser.py',578),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement_1','parser.py',581),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement_2','parser.py',584),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement_3','parser.py',587),
  ('compound_statement -> LEFT_CURL RIGHT_CURL','compound_statement',2,'p_compound_statement_1','parser.py',590),
  ('compound_statement -> LEFT_CURL statement_list RIGHT_CURL','compound_statement',3,'p_compound_statement_2','parser.py',593),
  ('compound_statement -> LEFT_CURL declaration_list RIGHT_CURL','compound_statement',3,'p_compound_statement_3','parser.py',596),
  ('compound_statement -> LEFT_CURL declaration_list statement_list RIGHT_CURL','compound_statement',4,'p_compound_statement_4','parser.py',599),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_1','parser.py',602),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_2','parser.py',605),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','parser.py',608),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','parser.py',611),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement_1','parser.py',614),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement_2','parser.py',617),
  ('selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement','selection_statement',5,'p_selection_statement_1','parser.py',620),
  ('selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement','selection_statement',7,'p_selection_statement_2','parser.py',623),
  ('selection_statement -> SWITCH LEFT_ROUND expression RIGHT_ROUND statement','selection_statement',5,'p_selection_statement_3','parser.py',626),
  ('iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement','iteration_statement',5,'p_iteration_statement_1','parser.py',629),
  ('iteration_statement -> DO statement WHILE LEFT_ROUND expression RIGHT_ROUND SEMICOLON','iteration_statement',7,'p_iteration_statement_2','parser.py',632),
  ('iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement RIGHT_ROUND statement','iteration_statement',6,'p_iteration_statement_3','parser.py',635),
  ('iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement','iteration_statement',7,'p_iteration_statement_4','parser.py',638),
  ('jump_statement -> GOTO IDENTIFIER SEMICOLON','jump_statement',3,'p_jump_statement_1','parser.py',641),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement_2','parser.py',644),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement_3','parser.py',647),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement_4','parser.py',650),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement_5','parser.py',653),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_1','parser.py',656),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_2','parser.py',659),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','parser.py',662),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','parser.py',665),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','parser.py',668),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_2','parser.py',671),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_3','parser.py',674),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_4','parser.py',677),
]
