
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xbf\x8dw.Xw\x92\x0fH\xf1DZ"\xd65`'
    
_lr_action_items = {'SHORT':([0,9,10,11,12,18,19,26,29,41,],[2,-3,-5,-4,2,-2,2,2,-6,-21,]),'VOID':([0,9,10,11,12,18,29,41,],[3,-3,-5,-4,3,-2,-6,-21,]),'RIGHT_ROUND':([21,22,23,24,28,31,39,44,46,47,50,],[-17,25,-19,-20,-35,-18,-37,-36,-34,49,53,]),'RIGHT_CURL':([33,34,36,37,42,52,54,57,58,60,61,63,64,66,67,68,69,],[-32,-33,-23,41,-22,-25,58,-31,-24,-26,64,67,-30,-27,-28,69,-29,]),'CHAR':([0,9,10,11,12,18,19,26,29,41,],[4,-3,-5,-4,4,-2,4,4,-6,-21,]),'SEMICOLON':([25,30,33,34,36,37,40,42,43,45,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[29,34,-32,-33,-23,34,34,-22,46,34,46,34,34,-25,34,34,34,34,-31,-24,34,-26,34,34,34,-30,34,-27,-28,34,-29,]),'LEFT_SQUARE':([23,39,],[27,27,]),'UNSIGNED':([0,9,10,11,12,18,19,26,29,41,],[6,-3,-5,-4,6,-2,6,6,-6,-21,]),'LONG':([0,9,10,11,12,18,19,26,29,41,],[7,-3,-5,-4,7,-2,7,7,-6,-21,]),'COMMA':([21,22,23,24,28,31,39,44,],[-17,26,-19,-20,-35,-18,-37,-36,]),'IDENTIFIER':([1,2,3,4,5,6,7,13,14,15,16,20,],[17,-10,-8,-9,-7,-16,-12,-11,-14,-13,-15,23,]),'$end':([8,9,10,11,12,18,29,41,],[0,-3,-5,-4,-1,-2,-6,-21,]),'FOR':([30,33,34,36,37,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[35,-32,-33,-23,35,-22,35,35,-25,35,35,35,35,-31,-24,35,-26,35,35,35,-30,35,-27,-28,35,-29,]),'ELSE':([33,34,52,57,58,60,64,66,67,69,],[-32,-33,55,-31,62,-26,-30,-27,-28,-29,]),'IF':([30,33,34,36,37,42,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[38,-32,-33,-23,38,-22,38,38,-25,38,38,38,38,-31,-24,38,-26,38,38,38,-30,38,-27,-28,38,-29,]),'LEFT_ROUND':([17,35,38,],[19,40,43,]),'INT':([0,9,10,11,12,18,19,26,29,41,],[13,-3,-5,-4,13,-2,13,13,-6,-21,]),'DOUBLE':([0,9,10,11,12,18,19,26,29,41,],[14,-3,-5,-4,14,-2,14,14,-6,-21,]),'FLOAT':([0,9,10,11,12,18,19,26,29,41,],[15,-3,-5,-4,15,-2,15,15,-6,-21,]),'RIGHT_SQUARE':([32,],[39,]),'LEFT_CURL':([25,49,53,55,62,],[30,51,56,59,65,]),'SIGNED':([0,9,10,11,12,18,19,26,29,41,],[16,-3,-5,-4,16,-2,16,16,-6,-21,]),'INT_NUM':([27,],[32,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([0,12,],[9,18,]),'return_type_specifier':([0,12,],[1,1,]),'function_definition':([0,12,],[10,10,]),'function_declaration':([0,12,],[11,11,]),'function_list':([0,],[12,]),'argument':([19,26,],[21,31,]),'program':([0,],[8,]),'statement':([30,37,49,51,53,54,55,56,59,61,62,63,65,68,],[36,42,52,36,57,42,60,36,36,42,66,42,36,42,]),'type_specifier':([0,12,19,26,],[5,5,20,20,]),'expression_statement':([30,37,40,45,49,51,53,54,55,56,59,61,62,63,65,68,],[33,33,45,48,33,33,33,33,33,33,33,33,33,33,33,33,]),'statement_list':([30,51,56,59,65,],[37,54,61,63,68,]),'array_index':([23,39,],[28,44,]),'array':([20,],[24,]),'expression':([43,48,],[47,50,]),'argument_list':([19,],[22,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_list','program',1,'p_program','parser.py',94),
  ('function_list -> function_list function','function_list',2,'p_function_list_1','parser.py',98),
  ('function_list -> function','function_list',1,'p_function_list_2','parser.py',103),
  ('function -> function_declaration','function',1,'p_function_1','parser.py',107),
  ('function -> function_definition','function',1,'p_function_2','parser.py',111),
  ('function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON','function_declaration',6,'p_function_declaration','parser.py',115),
  ('return_type_specifier -> type_specifier','return_type_specifier',1,'p_return_type_specifier_1','parser.py',119),
  ('return_type_specifier -> VOID','return_type_specifier',1,'p_return_type_specifier_2','parser.py',123),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_1','parser.py',127),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier_1','parser.py',128),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','parser.py',129),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier_1','parser.py',130),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier_1','parser.py',131),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier_1','parser.py',132),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier_1','parser.py',133),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier_1','parser.py',134),
  ('argument_list -> argument','argument_list',1,'p_argument_list_1','parser.py',138),
  ('argument_list -> argument_list COMMA argument','argument_list',3,'p_argument_list_2','parser.py',142),
  ('argument -> type_specifier IDENTIFIER','argument',2,'p_argument_1','parser.py',147),
  ('argument -> type_specifier array','argument',2,'p_argument_2','parser.py',151),
  ('function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL','function_definition',8,'p_function_definition','parser.py',155),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','parser.py',159),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','parser.py',164),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL','statement',7,'p_statement_2','parser.py',172),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND statement','statement',5,'p_statement_3','parser.py',176),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement','statement',7,'p_statement_4','parser.py',180),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement','statement',9,'p_statement_5','parser.py',184),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL','statement',9,'p_statement_6','parser.py',188),
  ('statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL','statement',11,'p_statement_7','parser.py',192),
  ('statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL','statement',9,'p_statement_8','parser.py',196),
  ('statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement','statement',7,'p_statement_9','parser.py',200),
  ('statement -> expression_statement','statement',1,'p_statement_10','parser.py',204),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','parser.py',208),
  ('expression -> SEMICOLON','expression',1,'p_expression','parser.py',212),
  ('array -> IDENTIFIER array_index','array',2,'p_array','parser.py',216),
  ('array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index','array_index',4,'p_array_index_1','parser.py',220),
  ('array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE','array_index',3,'p_array_index_2','parser.py',224),
]
