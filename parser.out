Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    DIV_ASSIGN
    MULTIPLY
    MINUS
    COMMENT
    LE_OP
    POWER
    PLUS
    ELLIPSIS
    MODULO
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    INC_OP
    NE_OP
    RETURN
    DEC_OP
    OR_ASSIGN
    STATIC
    EQ_OP
    SIZEOF
    OR_OP
    HEADER
    COLON
    TILDA
    DIVIDE
    UNION
    AMPERSAND
    SUB_ASSIGN
    XOR_ASSIGN
    CONTINUE
    MUL_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    WHILE
    EXTERN
    DOT
    CASE
    G_OP
    REGISTER
    PIPE
    L_OP
    SWITCH
    AND_ASSIGN
    ADD_ASSIGN
    HASH
    GE_OP
    MOD_ASSIGN
    BREAK
    VOLATILE
    DO
    CONST
    CHARACTER
    EQUAL
    REAL_NUM
    EXP_NUM
    QUESTION
    PTR_OP
    TYPEDEF
    STRING
    AUTO
    AND_OP
    HEX_NUM
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_declaration
Rule 5     function -> function_definition
Rule 6     function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 7     return_type_specifier -> type_specifier
Rule 8     return_type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> SHORT
Rule 11    type_specifier -> INT
Rule 12    type_specifier -> LONG
Rule 13    type_specifier -> FLOAT
Rule 14    type_specifier -> DOUBLE
Rule 15    type_specifier -> SIGNED
Rule 16    type_specifier -> UNSIGNED
Rule 17    argument_list -> argument
Rule 18    argument_list -> argument_list COMMA argument
Rule 19    argument -> type_specifier IDENTIFIER
Rule 20    argument -> type_specifier array
Rule 21    function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> statement
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 31    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 32    statement -> expression_statement
Rule 33    expression_statement -> SEMICOLON
Rule 34    expression -> SEMICOLON
Rule 35    array -> IDENTIFIER array_index
Rule 36    array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index
Rule 37    array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE

Terminals, with rules where they appear

ADD_ASSIGN           : 
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 
AUTO                 : 
BREAK                : 
CASE                 : 
CHAR                 : 9
CHARACTER            : 
COLON                : 
COMMA                : 18
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 
DEC_OP               : 
DEFAULT              : 
DIVIDE               : 
DIV_ASSIGN           : 
DO                   : 
DOT                  : 
DOUBLE               : 14
ELLIPSIS             : 
ELSE                 : 26 27 28 29
ENUM                 : 
EQUAL                : 
EQ_OP                : 
EXCLAMATION          : 
EXP_NUM              : 
EXTERN               : 
FLOAT                : 13
FOR                  : 30 31
GE_OP                : 
GOTO                 : 
G_OP                 : 
HASH                 : 
HEADER               : 
HEX_NUM              : 
IDENTIFIER           : 6 19 21 35
IF                   : 24 25 26 27 28 29
INC_OP               : 
INT                  : 11
INT_NUM              : 36 37
LEFT_ASSIGN          : 
LEFT_CURL            : 21 24 27 28 29 29 30
LEFT_OP              : 
LEFT_ROUND           : 6 21 24 25 26 27 28 29 30 31
LEFT_SQUARE          : 36 37
LE_OP                : 
LONG                 : 12
L_OP                 : 
MINUS                : 
MODULO               : 
MOD_ASSIGN           : 
MULTIPLY             : 
MUL_ASSIGN           : 
NE_OP                : 
OR_ASSIGN            : 
OR_OP                : 
PIPE                 : 
PLUS                 : 
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 
REGISTER             : 
RETURN               : 
RIGHT_ASSIGN         : 
RIGHT_CURL           : 21 24 27 28 29 29 30
RIGHT_OP             : 
RIGHT_ROUND          : 6 21 24 25 26 27 28 29 30 31
RIGHT_SQUARE         : 36 37
SEMICOLON            : 6 33 34
SHORT                : 10
SIGNED               : 15
SIZEOF               : 
STATIC               : 
STRING               : 
STRUCT               : 
SUB_ASSIGN           : 
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 16
VOID                 : 8
VOLATILE             : 
WHILE                : 
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 17 18
argument_list        : 6 18 21
array                : 20
array_index          : 35 36
expression           : 24 25 26 27 28 29 30 31
expression_statement : 30 30 31 31 32
function             : 2 3
function_declaration : 4
function_definition  : 5
function_list        : 1 2
program              : 0
return_type_specifier : 6 21
statement            : 22 23 25 26 26 27 28 31
statement_list       : 21 22 24 27 28 29 29 30
type_specifier       : 7 19 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 9
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    function_list                  shift and go to state 12
    type_specifier                 shift and go to state 5
    program                        shift and go to state 8

state 1

    (6) function_declaration -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    IDENTIFIER      shift and go to state 17


state 2

    (10) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> SHORT .)


state 3

    (8) return_type_specifier -> VOID .

    IDENTIFIER      reduce using rule 8 (return_type_specifier -> VOID .)


state 4

    (9) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 9 (type_specifier -> CHAR .)


state 5

    (7) return_type_specifier -> type_specifier .

    IDENTIFIER      reduce using rule 7 (return_type_specifier -> type_specifier .)


state 6

    (16) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 16 (type_specifier -> UNSIGNED .)


state 7

    (12) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 12 (type_specifier -> LONG .)


state 8

    (0) S' -> program .



state 9

    (3) function_list -> function .

    VOID            reduce using rule 3 (function_list -> function .)
    CHAR            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 10

    (5) function -> function_definition .

    VOID            reduce using rule 5 (function -> function_definition .)
    CHAR            reduce using rule 5 (function -> function_definition .)
    SHORT           reduce using rule 5 (function -> function_definition .)
    INT             reduce using rule 5 (function -> function_definition .)
    LONG            reduce using rule 5 (function -> function_definition .)
    FLOAT           reduce using rule 5 (function -> function_definition .)
    DOUBLE          reduce using rule 5 (function -> function_definition .)
    SIGNED          reduce using rule 5 (function -> function_definition .)
    UNSIGNED        reduce using rule 5 (function -> function_definition .)
    $end            reduce using rule 5 (function -> function_definition .)


state 11

    (4) function -> function_declaration .

    VOID            reduce using rule 4 (function -> function_declaration .)
    CHAR            reduce using rule 4 (function -> function_declaration .)
    SHORT           reduce using rule 4 (function -> function_declaration .)
    INT             reduce using rule 4 (function -> function_declaration .)
    LONG            reduce using rule 4 (function -> function_declaration .)
    FLOAT           reduce using rule 4 (function -> function_declaration .)
    DOUBLE          reduce using rule 4 (function -> function_declaration .)
    SIGNED          reduce using rule 4 (function -> function_declaration .)
    UNSIGNED        reduce using rule 4 (function -> function_declaration .)
    $end            reduce using rule 4 (function -> function_declaration .)


state 12

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 18
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    type_specifier                 shift and go to state 5

state 13

    (11) type_specifier -> INT .

    IDENTIFIER      reduce using rule 11 (type_specifier -> INT .)


state 14

    (14) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 14 (type_specifier -> DOUBLE .)


state 15

    (13) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 13 (type_specifier -> FLOAT .)


state 16

    (15) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 15 (type_specifier -> SIGNED .)


state 17

    (6) function_declaration -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 19


state 18

    (2) function_list -> function_list function .

    VOID            reduce using rule 2 (function_list -> function_list function .)
    CHAR            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 19

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (17) argument_list -> . argument
    (18) argument_list -> . argument_list COMMA argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 21
    argument_list                  shift and go to state 22

state 20

    (19) argument -> type_specifier . IDENTIFIER
    (20) argument -> type_specifier . array
    (35) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 23

    array                          shift and go to state 24

state 21

    (17) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 17 (argument_list -> argument .)
    COMMA           reduce using rule 17 (argument_list -> argument .)


state 22

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (18) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 25
    COMMA           shift and go to state 26


state 23

    (19) argument -> type_specifier IDENTIFIER .
    (35) array -> IDENTIFIER . array_index
    (36) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index
    (37) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 24

    (20) argument -> type_specifier array .

    RIGHT_ROUND     reduce using rule 20 (argument -> type_specifier array .)
    COMMA           reduce using rule 20 (argument -> type_specifier array .)


state 25

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL

    SEMICOLON       shift and go to state 29
    LEFT_CURL       shift and go to state 30


state 26

    (18) argument_list -> argument_list COMMA . argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 31

state 27

    (36) array_index -> LEFT_SQUARE . INT_NUM RIGHT_SQUARE array_index
    (37) array_index -> LEFT_SQUARE . INT_NUM RIGHT_SQUARE

    INT_NUM         shift and go to state 32


state 28

    (35) array -> IDENTIFIER array_index .

    RIGHT_ROUND     reduce using rule 35 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 35 (array -> IDENTIFIER array_index .)


state 29

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    VOID            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    CHAR            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 30

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 36
    statement_list                 shift and go to state 37

state 31

    (18) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 18 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 18 (argument_list -> argument_list COMMA argument .)


state 32

    (36) array_index -> LEFT_SQUARE INT_NUM . RIGHT_SQUARE array_index
    (37) array_index -> LEFT_SQUARE INT_NUM . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 39


state 33

    (32) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 34

    (33) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 33 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 33 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 33 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 33 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 33 (expression_statement -> SEMICOLON .)


state 35

    (30) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 40


state 36

    (23) statement_list -> statement .

    RIGHT_CURL      reduce using rule 23 (statement_list -> statement .)
    IF              reduce using rule 23 (statement_list -> statement .)
    FOR             reduce using rule 23 (statement_list -> statement .)
    SEMICOLON       reduce using rule 23 (statement_list -> statement .)


state 37

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    RIGHT_CURL      shift and go to state 41
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 42

state 38

    (24) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 43


state 39

    (36) array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE . array_index
    (37) array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .
    (36) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index
    (37) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 37 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    COMMA           reduce using rule 37 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 44

state 40

    (30) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (33) expression_statement -> . SEMICOLON

    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 45

state 41

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    VOID            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    $end            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 42

    (22) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement_list statement .)


state 43

    (24) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (34) expression -> . SEMICOLON

    SEMICOLON       shift and go to state 46

    expression                     shift and go to state 47

state 44

    (36) array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index .

    RIGHT_ROUND     reduce using rule 36 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index .)
    COMMA           reduce using rule 36 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE array_index .)


state 45

    (30) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (33) expression_statement -> . SEMICOLON

    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 48

state 46

    (34) expression -> SEMICOLON .

    RIGHT_ROUND     reduce using rule 34 (expression -> SEMICOLON .)


state 47

    (24) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_ROUND     shift and go to state 49


state 48

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (34) expression -> . SEMICOLON

    SEMICOLON       shift and go to state 46

    expression                     shift and go to state 50

state 49

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    LEFT_CURL       shift and go to state 51
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 52

state 50

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement

    RIGHT_ROUND     shift and go to state 53


state 51

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    statement_list                 shift and go to state 54
    expression_statement           shift and go to state 33
    statement                      shift and go to state 36

state 52

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 55

  ! ELSE            [ reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 53

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    LEFT_CURL       shift and go to state 56
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 57

state 54

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    RIGHT_CURL      shift and go to state 58
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 42

state 55

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    LEFT_CURL       shift and go to state 59
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 60

state 56

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement_list                 shift and go to state 61
    statement                      shift and go to state 36

state 57

    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 58

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            shift and go to state 62

  ! ELSE            [ reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .) ]


state 59

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    statement_list                 shift and go to state 63
    expression_statement           shift and go to state 33
    statement                      shift and go to state 36

state 60

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 61

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    RIGHT_CURL      shift and go to state 64
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 42

state 62

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    LEFT_CURL       shift and go to state 65
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 66

state 63

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    RIGHT_CURL      shift and go to state 67
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 42

state 64

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 65

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    statement_list                 shift and go to state 68
    expression_statement           shift and go to state 33
    statement                      shift and go to state 36

state 66

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    ELSE            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)


state 67

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)


state 68

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) expression_statement -> . SEMICOLON

    RIGHT_CURL      shift and go to state 69
    IF              shift and go to state 38
    FOR             shift and go to state 35
    SEMICOLON       shift and go to state 34

    expression_statement           shift and go to state 33
    statement                      shift and go to state 42

state 69

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)

