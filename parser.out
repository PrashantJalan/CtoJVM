Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    LONG
    ELLIPSIS
    GOTO
    ENUM
    LEFT_OP
    DOUBLE
    COMMENTS
    SHORT
    OR_ASSIGN
    STATIC
    SIZEOF
    UNSIGNED
    HEADER
    COLON
    UNION
    AMPERSAND
    XOR_ASSIGN
    SIGNED
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    STRING
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_definition
Rule 5     function -> function_declaration
Rule 6     function -> declaration_statement
Rule 7     type_specifier -> CHAR
Rule 8     type_specifier -> INT
Rule 9     type_specifier -> FLOAT
Rule 10    type_specifier -> VOID
Rule 11    argument_list -> argument
Rule 12    argument_list -> argument_list COMMA argument
Rule 13    argument -> type_specifier IDENTIFIER
Rule 14    argument -> type_specifier array_parameter
Rule 15    array_parameter -> array
Rule 16    array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
Rule 17    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 18    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
Rule 19    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
Rule 20    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> statement
Rule 23    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
Rule 29    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 31    statement -> expression_statement
Rule 32    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 33    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 34    statement -> RETURN SEMICOLON
Rule 35    statement -> RETURN expression SEMICOLON
Rule 36    statement -> declaration_statement
Rule 37    statement -> CONTINUE SEMICOLON
Rule 38    statement -> BREAK SEMICOLON
Rule 39    statement -> PRINT IDENTIFIER SEMICOLON
Rule 40    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 41    declaration_list -> declaration
Rule 42    declaration_list -> declaration_list COMMA declaration
Rule 43    declaration -> IDENTIFIER
Rule 44    declaration -> array
Rule 45    declaration -> declaration_assignment
Rule 46    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 47    constant -> HEX_NUM
Rule 48    constant -> INT_NUM
Rule 49    constant -> REAL_NUM
Rule 50    constant -> EXP_NUM
Rule 51    constant -> CHARACTER
Rule 52    constant -> MINUS HEX_NUM
Rule 53    constant -> MINUS INT_NUM
Rule 54    constant -> MINUS REAL_NUM
Rule 55    constant -> MINUS EXP_NUM
Rule 56    array -> IDENTIFIER array_index
Rule 57    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 58    expression_statement -> SEMICOLON
Rule 59    expression_statement -> expression SEMICOLON
Rule 60    expression -> expression PLUS expression
Rule 61    expression -> expression MINUS expression
Rule 62    expression -> expression MULTIPLY expression
Rule 63    expression -> expression DIVIDE expression
Rule 64    expression -> expression L_OP expression
Rule 65    expression -> expression G_OP expression
Rule 66    expression -> expression NE_OP expression
Rule 67    expression -> expression EQ_OP expression
Rule 68    expression -> expression GE_OP expression
Rule 69    expression -> expression LE_OP expression
Rule 70    expression -> expression AND_OP expression
Rule 71    expression -> expression OR_OP expression
Rule 72    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 73    expression -> IDENTIFIER
Rule 74    expression -> array
Rule 75    expression -> constant
Rule 76    expression -> assignment
Rule 77    expression -> unary_expression
Rule 78    expression -> function_call
Rule 79    expression -> expression MODULO expression
Rule 80    expression -> TILDA expression
Rule 81    assignment -> array EQUAL expression
Rule 82    assignment -> IDENTIFIER EQUAL expression
Rule 83    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 84    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 85    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 86    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 87    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 88    assignment -> array ADD_ASSIGN expression
Rule 89    assignment -> array SUB_ASSIGN expression
Rule 90    assignment -> array DIV_ASSIGN expression
Rule 91    assignment -> array MUL_ASSIGN expression
Rule 92    assignment -> array MOD_ASSIGN expression
Rule 93    unary_expression -> IDENTIFIER INC_OP
Rule 94    unary_expression -> IDENTIFIER DEC_OP
Rule 95    unary_expression -> array INC_OP
Rule 96    unary_expression -> array DEC_OP
Rule 97    unary_expression -> INC_OP IDENTIFIER
Rule 98    unary_expression -> INC_OP array
Rule 99    unary_expression -> DEC_OP IDENTIFIER
Rule 100   unary_expression -> DEC_OP array
Rule 101   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 102   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 103   function_call_list -> function_argument
Rule 104   function_call_list -> function_call_list COMMA function_argument
Rule 105   function_argument -> expression
Rule 106   left_curl -> LEFT_CURL
Rule 107   right_curl -> RIGHT_CURL

Terminals, with rules where they appear

ADD_ASSIGN           : 83 88
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 70
AUTO                 : 
BREAK                : 38
CASE                 : 
CHAR                 : 7
CHARACTER            : 51
COLON                : 
COMMA                : 12 42 104
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 37
DEC_OP               : 94 96 99 100
DEFAULT              : 
DIVIDE               : 63
DIV_ASSIGN           : 85 90
DO                   : 
DOT                  : 
DOUBLE               : 
ELLIPSIS             : 
ELSE                 : 25 26 27 28
ENUM                 : 
EQUAL                : 46 81 82
EQ_OP                : 67
EXCLAMATION          : 
EXP_NUM              : 50 55
EXTERN               : 
FLOAT                : 9
FOR                  : 29 30
GE_OP                : 68
GOTO                 : 
G_OP                 : 65
HASH                 : 
HEADER               : 
HEX_NUM              : 47 52
IDENTIFIER           : 13 16 17 18 19 20 39 43 46 56 73 82 83 84 85 86 87 93 94 97 99 101 102
IF                   : 23 24 25 26 27 28
INC_OP               : 93 95 97 98
INT                  : 8
INT_NUM              : 48 53
LEFT_ASSIGN          : 
LEFT_CURL            : 106
LEFT_OP              : 
LEFT_ROUND           : 17 18 19 20 23 24 25 26 27 28 29 30 32 33 72 101 102
LEFT_SQUARE          : 16 57
LE_OP                : 69
LONG                 : 
L_OP                 : 64
MINUS                : 52 53 54 55 61
MODULO               : 79
MOD_ASSIGN           : 87 92
MULTIPLY             : 62
MUL_ASSIGN           : 86 91
NE_OP                : 66
OR_ASSIGN            : 
OR_OP                : 71
PIPE                 : 
PLUS                 : 60
POWER                : 
PRINT                : 39
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 49 54
REGISTER             : 
RETURN               : 34 35
RIGHT_ASSIGN         : 
RIGHT_CURL           : 107
RIGHT_OP             : 
RIGHT_ROUND          : 17 18 19 20 23 24 25 26 27 28 29 30 32 33 72 101 102
RIGHT_SQUARE         : 16 57
SEMICOLON            : 17 18 34 35 37 38 39 40 58 59
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 
STRUCT               : 
SUB_ASSIGN           : 84 89
SWITCH               : 
TILDA                : 80
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 10
VOLATILE             : 
WHILE                : 32 33
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 11 12
argument_list        : 12 17 19
array                : 15 44 74 81 88 89 90 91 92 95 96 98 100
array_index          : 56
array_parameter      : 14
assignment           : 76
constant             : 75
declaration          : 41 42
declaration_assignment : 45
declaration_list     : 40 42
declaration_statement : 6 36
expression           : 23 24 25 26 27 28 29 30 32 33 35 46 57 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 79 79 80 81 82 83 84 85 86 87 88 89 90 91 92 105
expression_statement : 29 29 30 30 31
function             : 2 3
function_argument    : 103 104
function_call        : 78
function_call_list   : 101 104
function_declaration : 5
function_definition  : 4
function_list        : 1 2
left_curl            : 19 20 23 26 27 28 28 29 32
program              : 0
right_curl           : 19 20 23 26 27 28 28 29 32
statement            : 21 22 24 25 25 26 27 30 33
statement_list       : 19 20 21 23 26 27 28 28 29 32
type_specifier       : 13 14 17 18 19 20 40
unary_expression     : 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (19) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (20) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (18) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID

    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7

    function                       shift and go to state 1
    function_definition            shift and go to state 3
    function_declaration           shift and go to state 4
    function_list                  shift and go to state 5
    program                        shift and go to state 9
    type_specifier                 shift and go to state 10
    declaration_statement          shift and go to state 11

state 1

    (3) function_list -> function .

    CHAR            reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    VOID            reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 2

    (9) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 9 (type_specifier -> FLOAT .)


state 3

    (4) function -> function_definition .

    CHAR            reduce using rule 4 (function -> function_definition .)
    INT             reduce using rule 4 (function -> function_definition .)
    FLOAT           reduce using rule 4 (function -> function_definition .)
    VOID            reduce using rule 4 (function -> function_definition .)
    $end            reduce using rule 4 (function -> function_definition .)


state 4

    (5) function -> function_declaration .

    CHAR            reduce using rule 5 (function -> function_declaration .)
    INT             reduce using rule 5 (function -> function_declaration .)
    FLOAT           reduce using rule 5 (function -> function_declaration .)
    VOID            reduce using rule 5 (function -> function_declaration .)
    $end            reduce using rule 5 (function -> function_declaration .)


state 5

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (19) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (20) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (18) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> function_list .)
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7

    function                       shift and go to state 12
    type_specifier                 shift and go to state 10
    function_declaration           shift and go to state 4
    function_definition            shift and go to state 3
    declaration_statement          shift and go to state 11

state 6

    (8) type_specifier -> INT .

    IDENTIFIER      reduce using rule 8 (type_specifier -> INT .)


state 7

    (10) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 10 (type_specifier -> VOID .)


state 8

    (7) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 7 (type_specifier -> CHAR .)


state 9

    (0) S' -> program .



state 10

    (19) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (20) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (18) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (40) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (41) declaration_list -> . declaration
    (42) declaration_list -> . declaration_list COMMA declaration
    (43) declaration -> . IDENTIFIER
    (44) declaration -> . array
    (45) declaration -> . declaration_assignment
    (56) array -> . IDENTIFIER array_index
    (46) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 17

    declaration_assignment         shift and go to state 13
    declaration_list               shift and go to state 14
    declaration                    shift and go to state 15
    array                          shift and go to state 16

state 11

    (6) function -> declaration_statement .

    CHAR            reduce using rule 6 (function -> declaration_statement .)
    INT             reduce using rule 6 (function -> declaration_statement .)
    FLOAT           reduce using rule 6 (function -> declaration_statement .)
    VOID            reduce using rule 6 (function -> declaration_statement .)
    $end            reduce using rule 6 (function -> declaration_statement .)


state 12

    (2) function_list -> function_list function .

    CHAR            reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    VOID            reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 13

    (45) declaration -> declaration_assignment .

    SEMICOLON       reduce using rule 45 (declaration -> declaration_assignment .)
    COMMA           reduce using rule 45 (declaration -> declaration_assignment .)


state 14

    (40) declaration_statement -> type_specifier declaration_list . SEMICOLON
    (42) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 19
    COMMA           shift and go to state 18


state 15

    (41) declaration_list -> declaration .

    SEMICOLON       reduce using rule 41 (declaration_list -> declaration .)
    COMMA           reduce using rule 41 (declaration_list -> declaration .)


state 16

    (44) declaration -> array .

    SEMICOLON       reduce using rule 44 (declaration -> array .)
    COMMA           reduce using rule 44 (declaration -> array .)


state 17

    (19) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (20) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (18) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND SEMICOLON
    (43) declaration -> IDENTIFIER .
    (56) array -> IDENTIFIER . array_index
    (46) declaration_assignment -> IDENTIFIER . EQUAL expression
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    LEFT_ROUND      shift and go to state 20
    SEMICOLON       reduce using rule 43 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 43 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 21
    LEFT_SQUARE     shift and go to state 22

    array_index                    shift and go to state 23

state 18

    (42) declaration_list -> declaration_list COMMA . declaration
    (43) declaration -> . IDENTIFIER
    (44) declaration -> . array
    (45) declaration -> . declaration_assignment
    (56) array -> . IDENTIFIER array_index
    (46) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 25

    declaration_assignment         shift and go to state 13
    declaration                    shift and go to state 24
    array                          shift and go to state 16

state 19

    (40) declaration_statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PRINT           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    TILDA           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 40 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 20

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND left_curl statement_list right_curl
    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND SEMICOLON
    (11) argument_list -> . argument
    (12) argument_list -> . argument_list COMMA argument
    (13) argument -> . type_specifier IDENTIFIER
    (14) argument -> . type_specifier array_parameter
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID

    RIGHT_ROUND     shift and go to state 28
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7

    type_specifier                 shift and go to state 26
    argument                       shift and go to state 27
    argument_list                  shift and go to state 29

state 21

    (46) declaration_assignment -> IDENTIFIER EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 45

state 22

    (57) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 47

state 23

    (56) array -> IDENTIFIER array_index .

    EQUAL           reduce using rule 56 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 56 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 56 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 56 (array -> IDENTIFIER array_index .)
    MUL_ASSIGN      reduce using rule 56 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 56 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 56 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 56 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 56 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 56 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 56 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 56 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 56 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 56 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 56 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 56 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 56 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 56 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 56 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 56 (array -> IDENTIFIER array_index .)
    MODULO          reduce using rule 56 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 56 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 56 (array -> IDENTIFIER array_index .)
    RIGHT_SQUARE    reduce using rule 56 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 56 (array -> IDENTIFIER array_index .)


state 24

    (42) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 42 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 42 (declaration_list -> declaration_list COMMA declaration .)


state 25

    (43) declaration -> IDENTIFIER .
    (56) array -> IDENTIFIER . array_index
    (46) declaration_assignment -> IDENTIFIER . EQUAL expression
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 43 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 43 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 21
    LEFT_SQUARE     shift and go to state 22

    array_index                    shift and go to state 23

state 26

    (13) argument -> type_specifier . IDENTIFIER
    (14) argument -> type_specifier . array_parameter
    (15) array_parameter -> . array
    (16) array_parameter -> . IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
    (56) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 50

    array                          shift and go to state 49
    array_parameter                shift and go to state 48

state 27

    (11) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 11 (argument_list -> argument .)
    COMMA           reduce using rule 11 (argument_list -> argument .)


state 28

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . left_curl statement_list right_curl
    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . SEMICOLON
    (106) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 51
    LEFT_CURL       shift and go to state 52

    left_curl                      shift and go to state 53

state 29

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND left_curl statement_list right_curl
    (17) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (12) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 54
    COMMA           shift and go to state 55


state 30

    (75) expression -> constant .

    SEMICOLON       reduce using rule 75 (expression -> constant .)
    PLUS            reduce using rule 75 (expression -> constant .)
    MINUS           reduce using rule 75 (expression -> constant .)
    MULTIPLY        reduce using rule 75 (expression -> constant .)
    DIVIDE          reduce using rule 75 (expression -> constant .)
    L_OP            reduce using rule 75 (expression -> constant .)
    G_OP            reduce using rule 75 (expression -> constant .)
    NE_OP           reduce using rule 75 (expression -> constant .)
    EQ_OP           reduce using rule 75 (expression -> constant .)
    GE_OP           reduce using rule 75 (expression -> constant .)
    LE_OP           reduce using rule 75 (expression -> constant .)
    AND_OP          reduce using rule 75 (expression -> constant .)
    OR_OP           reduce using rule 75 (expression -> constant .)
    MODULO          reduce using rule 75 (expression -> constant .)
    COMMA           reduce using rule 75 (expression -> constant .)
    RIGHT_SQUARE    reduce using rule 75 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 75 (expression -> constant .)


state 31

    (77) expression -> unary_expression .

    SEMICOLON       reduce using rule 77 (expression -> unary_expression .)
    PLUS            reduce using rule 77 (expression -> unary_expression .)
    MINUS           reduce using rule 77 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 77 (expression -> unary_expression .)
    DIVIDE          reduce using rule 77 (expression -> unary_expression .)
    L_OP            reduce using rule 77 (expression -> unary_expression .)
    G_OP            reduce using rule 77 (expression -> unary_expression .)
    NE_OP           reduce using rule 77 (expression -> unary_expression .)
    EQ_OP           reduce using rule 77 (expression -> unary_expression .)
    GE_OP           reduce using rule 77 (expression -> unary_expression .)
    LE_OP           reduce using rule 77 (expression -> unary_expression .)
    AND_OP          reduce using rule 77 (expression -> unary_expression .)
    OR_OP           reduce using rule 77 (expression -> unary_expression .)
    MODULO          reduce using rule 77 (expression -> unary_expression .)
    COMMA           reduce using rule 77 (expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 77 (expression -> unary_expression .)


state 32

    (99) unary_expression -> DEC_OP . IDENTIFIER
    (100) unary_expression -> DEC_OP . array
    (56) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 57

    array                          shift and go to state 56

state 33

    (78) expression -> function_call .

    SEMICOLON       reduce using rule 78 (expression -> function_call .)
    PLUS            reduce using rule 78 (expression -> function_call .)
    MINUS           reduce using rule 78 (expression -> function_call .)
    MULTIPLY        reduce using rule 78 (expression -> function_call .)
    DIVIDE          reduce using rule 78 (expression -> function_call .)
    L_OP            reduce using rule 78 (expression -> function_call .)
    G_OP            reduce using rule 78 (expression -> function_call .)
    NE_OP           reduce using rule 78 (expression -> function_call .)
    EQ_OP           reduce using rule 78 (expression -> function_call .)
    GE_OP           reduce using rule 78 (expression -> function_call .)
    LE_OP           reduce using rule 78 (expression -> function_call .)
    AND_OP          reduce using rule 78 (expression -> function_call .)
    OR_OP           reduce using rule 78 (expression -> function_call .)
    MODULO          reduce using rule 78 (expression -> function_call .)
    COMMA           reduce using rule 78 (expression -> function_call .)
    RIGHT_SQUARE    reduce using rule 78 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 78 (expression -> function_call .)


state 34

    (50) constant -> EXP_NUM .

    PLUS            reduce using rule 50 (constant -> EXP_NUM .)
    MINUS           reduce using rule 50 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 50 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 50 (constant -> EXP_NUM .)
    L_OP            reduce using rule 50 (constant -> EXP_NUM .)
    G_OP            reduce using rule 50 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 50 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 50 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 50 (constant -> EXP_NUM .)
    MODULO          reduce using rule 50 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 50 (constant -> EXP_NUM .)
    COMMA           reduce using rule 50 (constant -> EXP_NUM .)
    SEMICOLON       reduce using rule 50 (constant -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 50 (constant -> EXP_NUM .)


state 35

    (74) expression -> array .
    (81) assignment -> array . EQUAL expression
    (88) assignment -> array . ADD_ASSIGN expression
    (89) assignment -> array . SUB_ASSIGN expression
    (90) assignment -> array . DIV_ASSIGN expression
    (91) assignment -> array . MUL_ASSIGN expression
    (92) assignment -> array . MOD_ASSIGN expression
    (95) unary_expression -> array . INC_OP
    (96) unary_expression -> array . DEC_OP

    SEMICOLON       reduce using rule 74 (expression -> array .)
    PLUS            reduce using rule 74 (expression -> array .)
    MINUS           reduce using rule 74 (expression -> array .)
    MULTIPLY        reduce using rule 74 (expression -> array .)
    DIVIDE          reduce using rule 74 (expression -> array .)
    L_OP            reduce using rule 74 (expression -> array .)
    G_OP            reduce using rule 74 (expression -> array .)
    NE_OP           reduce using rule 74 (expression -> array .)
    EQ_OP           reduce using rule 74 (expression -> array .)
    GE_OP           reduce using rule 74 (expression -> array .)
    LE_OP           reduce using rule 74 (expression -> array .)
    AND_OP          reduce using rule 74 (expression -> array .)
    OR_OP           reduce using rule 74 (expression -> array .)
    MODULO          reduce using rule 74 (expression -> array .)
    COMMA           reduce using rule 74 (expression -> array .)
    RIGHT_SQUARE    reduce using rule 74 (expression -> array .)
    RIGHT_ROUND     reduce using rule 74 (expression -> array .)
    EQUAL           shift and go to state 62
    ADD_ASSIGN      shift and go to state 65
    SUB_ASSIGN      shift and go to state 58
    DIV_ASSIGN      shift and go to state 64
    MUL_ASSIGN      shift and go to state 63
    MOD_ASSIGN      shift and go to state 59
    INC_OP          shift and go to state 61
    DEC_OP          shift and go to state 60


state 36

    (52) constant -> MINUS . HEX_NUM
    (53) constant -> MINUS . INT_NUM
    (54) constant -> MINUS . REAL_NUM
    (55) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 69
    INT_NUM         shift and go to state 67
    REAL_NUM        shift and go to state 66
    EXP_NUM         shift and go to state 68


state 37

    (51) constant -> CHARACTER .

    PLUS            reduce using rule 51 (constant -> CHARACTER .)
    MINUS           reduce using rule 51 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 51 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 51 (constant -> CHARACTER .)
    L_OP            reduce using rule 51 (constant -> CHARACTER .)
    G_OP            reduce using rule 51 (constant -> CHARACTER .)
    NE_OP           reduce using rule 51 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 51 (constant -> CHARACTER .)
    GE_OP           reduce using rule 51 (constant -> CHARACTER .)
    LE_OP           reduce using rule 51 (constant -> CHARACTER .)
    AND_OP          reduce using rule 51 (constant -> CHARACTER .)
    OR_OP           reduce using rule 51 (constant -> CHARACTER .)
    MODULO          reduce using rule 51 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 51 (constant -> CHARACTER .)
    COMMA           reduce using rule 51 (constant -> CHARACTER .)
    SEMICOLON       reduce using rule 51 (constant -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 51 (constant -> CHARACTER .)


state 38

    (80) expression -> TILDA . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 70

state 39

    (73) expression -> IDENTIFIER .
    (56) array -> IDENTIFIER . array_index
    (82) assignment -> IDENTIFIER . EQUAL expression
    (83) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (84) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (85) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (86) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (87) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (93) unary_expression -> IDENTIFIER . INC_OP
    (94) unary_expression -> IDENTIFIER . DEC_OP
    (101) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> IDENTIFIER . LEFT_ROUND RIGHT_ROUND
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 73 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 73 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 73 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 73 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 73 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 73 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 73 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 73 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 73 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 73 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 73 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 73 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 73 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 73 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 73 (expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 73 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 73 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 76
    ADD_ASSIGN      shift and go to state 78
    SUB_ASSIGN      shift and go to state 71
    DIV_ASSIGN      shift and go to state 79
    MUL_ASSIGN      shift and go to state 77
    MOD_ASSIGN      shift and go to state 72
    INC_OP          shift and go to state 75
    DEC_OP          shift and go to state 74
    LEFT_ROUND      shift and go to state 73
    LEFT_SQUARE     shift and go to state 22

    array_index                    shift and go to state 23

state 40

    (76) expression -> assignment .

    SEMICOLON       reduce using rule 76 (expression -> assignment .)
    PLUS            reduce using rule 76 (expression -> assignment .)
    MINUS           reduce using rule 76 (expression -> assignment .)
    MULTIPLY        reduce using rule 76 (expression -> assignment .)
    DIVIDE          reduce using rule 76 (expression -> assignment .)
    L_OP            reduce using rule 76 (expression -> assignment .)
    G_OP            reduce using rule 76 (expression -> assignment .)
    NE_OP           reduce using rule 76 (expression -> assignment .)
    EQ_OP           reduce using rule 76 (expression -> assignment .)
    GE_OP           reduce using rule 76 (expression -> assignment .)
    LE_OP           reduce using rule 76 (expression -> assignment .)
    AND_OP          reduce using rule 76 (expression -> assignment .)
    OR_OP           reduce using rule 76 (expression -> assignment .)
    MODULO          reduce using rule 76 (expression -> assignment .)
    COMMA           reduce using rule 76 (expression -> assignment .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 76 (expression -> assignment .)


state 41

    (47) constant -> HEX_NUM .

    PLUS            reduce using rule 47 (constant -> HEX_NUM .)
    MINUS           reduce using rule 47 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 47 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 47 (constant -> HEX_NUM .)
    L_OP            reduce using rule 47 (constant -> HEX_NUM .)
    G_OP            reduce using rule 47 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 47 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 47 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 47 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 47 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 47 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 47 (constant -> HEX_NUM .)
    MODULO          reduce using rule 47 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 47 (constant -> HEX_NUM .)
    COMMA           reduce using rule 47 (constant -> HEX_NUM .)
    SEMICOLON       reduce using rule 47 (constant -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 47 (constant -> HEX_NUM .)


state 42

    (72) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 80

state 43

    (97) unary_expression -> INC_OP . IDENTIFIER
    (98) unary_expression -> INC_OP . array
    (56) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 82

    array                          shift and go to state 81

state 44

    (48) constant -> INT_NUM .

    PLUS            reduce using rule 48 (constant -> INT_NUM .)
    MINUS           reduce using rule 48 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 48 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 48 (constant -> INT_NUM .)
    L_OP            reduce using rule 48 (constant -> INT_NUM .)
    G_OP            reduce using rule 48 (constant -> INT_NUM .)
    NE_OP           reduce using rule 48 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 48 (constant -> INT_NUM .)
    GE_OP           reduce using rule 48 (constant -> INT_NUM .)
    LE_OP           reduce using rule 48 (constant -> INT_NUM .)
    AND_OP          reduce using rule 48 (constant -> INT_NUM .)
    OR_OP           reduce using rule 48 (constant -> INT_NUM .)
    MODULO          reduce using rule 48 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 48 (constant -> INT_NUM .)
    COMMA           reduce using rule 48 (constant -> INT_NUM .)
    SEMICOLON       reduce using rule 48 (constant -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 48 (constant -> INT_NUM .)


state 45

    (46) declaration_assignment -> IDENTIFIER EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 46 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 46 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 46

    (49) constant -> REAL_NUM .

    PLUS            reduce using rule 49 (constant -> REAL_NUM .)
    MINUS           reduce using rule 49 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 49 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 49 (constant -> REAL_NUM .)
    L_OP            reduce using rule 49 (constant -> REAL_NUM .)
    G_OP            reduce using rule 49 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 49 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 49 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 49 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 49 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 49 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 49 (constant -> REAL_NUM .)
    MODULO          reduce using rule 49 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 49 (constant -> REAL_NUM .)
    COMMA           reduce using rule 49 (constant -> REAL_NUM .)
    SEMICOLON       reduce using rule 49 (constant -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 49 (constant -> REAL_NUM .)


state 47

    (57) array_index -> LEFT_SQUARE expression . RIGHT_SQUARE
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_SQUARE    shift and go to state 96
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 48

    (14) argument -> type_specifier array_parameter .

    RIGHT_ROUND     reduce using rule 14 (argument -> type_specifier array_parameter .)
    COMMA           reduce using rule 14 (argument -> type_specifier array_parameter .)


state 49

    (15) array_parameter -> array .

    RIGHT_ROUND     reduce using rule 15 (array_parameter -> array .)
    COMMA           reduce using rule 15 (array_parameter -> array .)


state 50

    (13) argument -> type_specifier IDENTIFIER .
    (16) array_parameter -> IDENTIFIER . LEFT_SQUARE RIGHT_SQUARE
    (56) array -> IDENTIFIER . array_index
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 13 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 13 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 97

    array_index                    shift and go to state 23

state 51

    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)


state 52

    (106) left_curl -> LEFT_CURL .

    IF              reduce using rule 106 (left_curl -> LEFT_CURL .)
    FOR             reduce using rule 106 (left_curl -> LEFT_CURL .)
    WHILE           reduce using rule 106 (left_curl -> LEFT_CURL .)
    RETURN          reduce using rule 106 (left_curl -> LEFT_CURL .)
    CONTINUE        reduce using rule 106 (left_curl -> LEFT_CURL .)
    BREAK           reduce using rule 106 (left_curl -> LEFT_CURL .)
    PRINT           reduce using rule 106 (left_curl -> LEFT_CURL .)
    SEMICOLON       reduce using rule 106 (left_curl -> LEFT_CURL .)
    LEFT_ROUND      reduce using rule 106 (left_curl -> LEFT_CURL .)
    IDENTIFIER      reduce using rule 106 (left_curl -> LEFT_CURL .)
    TILDA           reduce using rule 106 (left_curl -> LEFT_CURL .)
    CHAR            reduce using rule 106 (left_curl -> LEFT_CURL .)
    INT             reduce using rule 106 (left_curl -> LEFT_CURL .)
    FLOAT           reduce using rule 106 (left_curl -> LEFT_CURL .)
    VOID            reduce using rule 106 (left_curl -> LEFT_CURL .)
    HEX_NUM         reduce using rule 106 (left_curl -> LEFT_CURL .)
    INT_NUM         reduce using rule 106 (left_curl -> LEFT_CURL .)
    REAL_NUM        reduce using rule 106 (left_curl -> LEFT_CURL .)
    EXP_NUM         reduce using rule 106 (left_curl -> LEFT_CURL .)
    CHARACTER       reduce using rule 106 (left_curl -> LEFT_CURL .)
    MINUS           reduce using rule 106 (left_curl -> LEFT_CURL .)
    INC_OP          reduce using rule 106 (left_curl -> LEFT_CURL .)
    DEC_OP          reduce using rule 106 (left_curl -> LEFT_CURL .)


state 53

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 110
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 54

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . left_curl statement_list right_curl
    (17) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (106) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 112
    LEFT_CURL       shift and go to state 52

    left_curl                      shift and go to state 113

state 55

    (12) argument_list -> argument_list COMMA . argument
    (13) argument -> . type_specifier IDENTIFIER
    (14) argument -> . type_specifier array_parameter
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID

    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7

    type_specifier                 shift and go to state 26
    argument                       shift and go to state 114

state 56

    (100) unary_expression -> DEC_OP array .

    SEMICOLON       reduce using rule 100 (unary_expression -> DEC_OP array .)
    PLUS            reduce using rule 100 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 100 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 100 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 100 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 100 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 100 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 100 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 100 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 100 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 100 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 100 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 100 (unary_expression -> DEC_OP array .)
    MODULO          reduce using rule 100 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 100 (unary_expression -> DEC_OP array .)
    RIGHT_SQUARE    reduce using rule 100 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 100 (unary_expression -> DEC_OP array .)


state 57

    (99) unary_expression -> DEC_OP IDENTIFIER .
    (56) array -> IDENTIFIER . array_index
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    PLUS            reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    MODULO          reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 99 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 22

    array_index                    shift and go to state 23

state 58

    (89) assignment -> array SUB_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 115

state 59

    (92) assignment -> array MOD_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 116

state 60

    (96) unary_expression -> array DEC_OP .

    SEMICOLON       reduce using rule 96 (unary_expression -> array DEC_OP .)
    PLUS            reduce using rule 96 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 96 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 96 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 96 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 96 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 96 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 96 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 96 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 96 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 96 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 96 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 96 (unary_expression -> array DEC_OP .)
    MODULO          reduce using rule 96 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 96 (unary_expression -> array DEC_OP .)
    RIGHT_SQUARE    reduce using rule 96 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 96 (unary_expression -> array DEC_OP .)


state 61

    (95) unary_expression -> array INC_OP .

    SEMICOLON       reduce using rule 95 (unary_expression -> array INC_OP .)
    PLUS            reduce using rule 95 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 95 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 95 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 95 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 95 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 95 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 95 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 95 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 95 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 95 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 95 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 95 (unary_expression -> array INC_OP .)
    MODULO          reduce using rule 95 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 95 (unary_expression -> array INC_OP .)
    RIGHT_SQUARE    reduce using rule 95 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 95 (unary_expression -> array INC_OP .)


state 62

    (81) assignment -> array EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 117

state 63

    (91) assignment -> array MUL_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 118

state 64

    (90) assignment -> array DIV_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 119

state 65

    (88) assignment -> array ADD_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 120

state 66

    (54) constant -> MINUS REAL_NUM .

    PLUS            reduce using rule 54 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 54 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 54 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 54 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 54 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 54 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    MODULO          reduce using rule 54 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 54 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 54 (constant -> MINUS REAL_NUM .)
    SEMICOLON       reduce using rule 54 (constant -> MINUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 54 (constant -> MINUS REAL_NUM .)


state 67

    (53) constant -> MINUS INT_NUM .

    PLUS            reduce using rule 53 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 53 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 53 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 53 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 53 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 53 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 53 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 53 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 53 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 53 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 53 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 53 (constant -> MINUS INT_NUM .)
    MODULO          reduce using rule 53 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 53 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 53 (constant -> MINUS INT_NUM .)
    SEMICOLON       reduce using rule 53 (constant -> MINUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 53 (constant -> MINUS INT_NUM .)


state 68

    (55) constant -> MINUS EXP_NUM .

    PLUS            reduce using rule 55 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 55 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 55 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 55 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 55 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 55 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    MODULO          reduce using rule 55 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 55 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 55 (constant -> MINUS EXP_NUM .)
    SEMICOLON       reduce using rule 55 (constant -> MINUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 55 (constant -> MINUS EXP_NUM .)


state 69

    (52) constant -> MINUS HEX_NUM .

    PLUS            reduce using rule 52 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 52 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 52 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 52 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 52 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 52 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    MODULO          reduce using rule 52 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 52 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 52 (constant -> MINUS HEX_NUM .)
    SEMICOLON       reduce using rule 52 (constant -> MINUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 52 (constant -> MINUS HEX_NUM .)


state 70

    (80) expression -> TILDA expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 80 (expression -> TILDA expression .)
    PLUS            reduce using rule 80 (expression -> TILDA expression .)
    MINUS           reduce using rule 80 (expression -> TILDA expression .)
    MULTIPLY        reduce using rule 80 (expression -> TILDA expression .)
    DIVIDE          reduce using rule 80 (expression -> TILDA expression .)
    L_OP            reduce using rule 80 (expression -> TILDA expression .)
    G_OP            reduce using rule 80 (expression -> TILDA expression .)
    NE_OP           reduce using rule 80 (expression -> TILDA expression .)
    EQ_OP           reduce using rule 80 (expression -> TILDA expression .)
    GE_OP           reduce using rule 80 (expression -> TILDA expression .)
    LE_OP           reduce using rule 80 (expression -> TILDA expression .)
    AND_OP          reduce using rule 80 (expression -> TILDA expression .)
    OR_OP           reduce using rule 80 (expression -> TILDA expression .)
    MODULO          reduce using rule 80 (expression -> TILDA expression .)
    COMMA           reduce using rule 80 (expression -> TILDA expression .)
    RIGHT_SQUARE    reduce using rule 80 (expression -> TILDA expression .)
    RIGHT_ROUND     reduce using rule 80 (expression -> TILDA expression .)

  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! MULTIPLY        [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]
  ! MODULO          [ shift and go to state 92 ]


state 71

    (84) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 121

state 72

    (87) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 122

state 73

    (101) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (102) function_call -> IDENTIFIER LEFT_ROUND . RIGHT_ROUND
    (103) function_call_list -> . function_argument
    (104) function_call_list -> . function_call_list COMMA function_argument
    (105) function_argument -> . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 123
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    function_call_list             shift and go to state 124
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    function_argument              shift and go to state 125
    array                          shift and go to state 35
    expression                     shift and go to state 126

state 74

    (94) unary_expression -> IDENTIFIER DEC_OP .

    SEMICOLON       reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    PLUS            reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    MODULO          reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_SQUARE    reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 94 (unary_expression -> IDENTIFIER DEC_OP .)


state 75

    (93) unary_expression -> IDENTIFIER INC_OP .

    SEMICOLON       reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    PLUS            reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    MODULO          reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_SQUARE    reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 93 (unary_expression -> IDENTIFIER INC_OP .)


state 76

    (82) assignment -> IDENTIFIER EQUAL . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 127

state 77

    (86) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 128

state 78

    (83) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 129

state 79

    (85) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 130

state 80

    (72) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 131
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 81

    (98) unary_expression -> INC_OP array .

    SEMICOLON       reduce using rule 98 (unary_expression -> INC_OP array .)
    PLUS            reduce using rule 98 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 98 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 98 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 98 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 98 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 98 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 98 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 98 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 98 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 98 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 98 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 98 (unary_expression -> INC_OP array .)
    MODULO          reduce using rule 98 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 98 (unary_expression -> INC_OP array .)
    RIGHT_SQUARE    reduce using rule 98 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 98 (unary_expression -> INC_OP array .)


state 82

    (97) unary_expression -> INC_OP IDENTIFIER .
    (56) array -> IDENTIFIER . array_index
    (57) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    PLUS            reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    MODULO          reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 97 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 22

    array_index                    shift and go to state 23

state 83

    (69) expression -> expression LE_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 132

state 84

    (63) expression -> expression DIVIDE . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 133

state 85

    (65) expression -> expression G_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 134

state 86

    (64) expression -> expression L_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 135

state 87

    (70) expression -> expression AND_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 136

state 88

    (68) expression -> expression GE_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 137

state 89

    (60) expression -> expression PLUS . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 138

state 90

    (67) expression -> expression EQ_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 139

state 91

    (62) expression -> expression MULTIPLY . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 140

state 92

    (79) expression -> expression MODULO . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 141

state 93

    (61) expression -> expression MINUS . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 142

state 94

    (66) expression -> expression NE_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 143

state 95

    (71) expression -> expression OR_OP . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 144

state 96

    (57) array_index -> LEFT_SQUARE expression RIGHT_SQUARE .

    SEMICOLON       reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 57 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)


state 97

    (16) array_parameter -> IDENTIFIER LEFT_SQUARE . RIGHT_SQUARE
    (57) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_SQUARE    shift and go to state 145
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 47

state 98

    (31) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 31 (statement -> expression_statement .)
    IF              reduce using rule 31 (statement -> expression_statement .)
    FOR             reduce using rule 31 (statement -> expression_statement .)
    WHILE           reduce using rule 31 (statement -> expression_statement .)
    RETURN          reduce using rule 31 (statement -> expression_statement .)
    CONTINUE        reduce using rule 31 (statement -> expression_statement .)
    BREAK           reduce using rule 31 (statement -> expression_statement .)
    PRINT           reduce using rule 31 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 31 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 31 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 31 (statement -> expression_statement .)
    TILDA           reduce using rule 31 (statement -> expression_statement .)
    CHAR            reduce using rule 31 (statement -> expression_statement .)
    INT             reduce using rule 31 (statement -> expression_statement .)
    FLOAT           reduce using rule 31 (statement -> expression_statement .)
    VOID            reduce using rule 31 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 31 (statement -> expression_statement .)
    INT_NUM         reduce using rule 31 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 31 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 31 (statement -> expression_statement .)
    CHARACTER       reduce using rule 31 (statement -> expression_statement .)
    MINUS           reduce using rule 31 (statement -> expression_statement .)
    INC_OP          reduce using rule 31 (statement -> expression_statement .)
    DEC_OP          reduce using rule 31 (statement -> expression_statement .)
    ELSE            reduce using rule 31 (statement -> expression_statement .)


state 99

    (34) statement -> RETURN . SEMICOLON
    (35) statement -> RETURN . expression SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 146
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 147

state 100

    (32) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 148


state 101

    (39) statement -> PRINT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 149


state 102

    (40) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (41) declaration_list -> . declaration
    (42) declaration_list -> . declaration_list COMMA declaration
    (43) declaration -> . IDENTIFIER
    (44) declaration -> . array
    (45) declaration -> . declaration_assignment
    (56) array -> . IDENTIFIER array_index
    (46) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 25

    declaration_assignment         shift and go to state 13
    declaration_list               shift and go to state 14
    declaration                    shift and go to state 15
    array                          shift and go to state 16

state 103

    (58) expression_statement -> SEMICOLON .

    LEFT_ROUND      reduce using rule 58 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 58 (expression_statement -> SEMICOLON .)
    TILDA           reduce using rule 58 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 58 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 58 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 58 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 58 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 58 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 58 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 58 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 58 (expression_statement -> SEMICOLON .)
    RIGHT_CURL      reduce using rule 58 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 58 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 58 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 58 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 58 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 58 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 58 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 58 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 58 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 58 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 58 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 58 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 58 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 58 (expression_statement -> SEMICOLON .)


state 104

    (37) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 150


state 105

    (22) statement_list -> statement .

    RIGHT_CURL      reduce using rule 22 (statement_list -> statement .)
    IF              reduce using rule 22 (statement_list -> statement .)
    FOR             reduce using rule 22 (statement_list -> statement .)
    WHILE           reduce using rule 22 (statement_list -> statement .)
    RETURN          reduce using rule 22 (statement_list -> statement .)
    CONTINUE        reduce using rule 22 (statement_list -> statement .)
    BREAK           reduce using rule 22 (statement_list -> statement .)
    PRINT           reduce using rule 22 (statement_list -> statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 22 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 22 (statement_list -> statement .)
    TILDA           reduce using rule 22 (statement_list -> statement .)
    CHAR            reduce using rule 22 (statement_list -> statement .)
    INT             reduce using rule 22 (statement_list -> statement .)
    FLOAT           reduce using rule 22 (statement_list -> statement .)
    VOID            reduce using rule 22 (statement_list -> statement .)
    HEX_NUM         reduce using rule 22 (statement_list -> statement .)
    INT_NUM         reduce using rule 22 (statement_list -> statement .)
    REAL_NUM        reduce using rule 22 (statement_list -> statement .)
    EXP_NUM         reduce using rule 22 (statement_list -> statement .)
    CHARACTER       reduce using rule 22 (statement_list -> statement .)
    MINUS           reduce using rule 22 (statement_list -> statement .)
    INC_OP          reduce using rule 22 (statement_list -> statement .)
    DEC_OP          reduce using rule 22 (statement_list -> statement .)


state 106

    (29) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 151


state 107

    (23) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl

    LEFT_ROUND      shift and go to state 152


state 108

    (38) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 153


state 109

    (36) statement -> declaration_statement .

    RIGHT_CURL      reduce using rule 36 (statement -> declaration_statement .)
    IF              reduce using rule 36 (statement -> declaration_statement .)
    FOR             reduce using rule 36 (statement -> declaration_statement .)
    WHILE           reduce using rule 36 (statement -> declaration_statement .)
    RETURN          reduce using rule 36 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 36 (statement -> declaration_statement .)
    BREAK           reduce using rule 36 (statement -> declaration_statement .)
    PRINT           reduce using rule 36 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 36 (statement -> declaration_statement .)
    LEFT_ROUND      reduce using rule 36 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 36 (statement -> declaration_statement .)
    TILDA           reduce using rule 36 (statement -> declaration_statement .)
    CHAR            reduce using rule 36 (statement -> declaration_statement .)
    INT             reduce using rule 36 (statement -> declaration_statement .)
    FLOAT           reduce using rule 36 (statement -> declaration_statement .)
    VOID            reduce using rule 36 (statement -> declaration_statement .)
    HEX_NUM         reduce using rule 36 (statement -> declaration_statement .)
    INT_NUM         reduce using rule 36 (statement -> declaration_statement .)
    REAL_NUM        reduce using rule 36 (statement -> declaration_statement .)
    EXP_NUM         reduce using rule 36 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 36 (statement -> declaration_statement .)
    MINUS           reduce using rule 36 (statement -> declaration_statement .)
    INC_OP          reduce using rule 36 (statement -> declaration_statement .)
    DEC_OP          reduce using rule 36 (statement -> declaration_statement .)
    ELSE            reduce using rule 36 (statement -> declaration_statement .)


state 110

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 156
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 111

    (59) expression_statement -> expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 157
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 112

    (17) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 17 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 17 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 17 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 17 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 17 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 113

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 158
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 114

    (12) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 12 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 12 (argument_list -> argument_list COMMA argument .)


state 115

    (89) assignment -> array SUB_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 89 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 89 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 89 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 89 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 89 (assignment -> array SUB_ASSIGN expression .) ]


state 116

    (92) assignment -> array MOD_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 92 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 92 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 92 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 92 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 92 (assignment -> array MOD_ASSIGN expression .) ]


state 117

    (81) assignment -> array EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 81 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 81 (assignment -> array EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 81 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 81 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 81 (assignment -> array EQUAL expression .) ]
  ! MODULO          [ reduce using rule 81 (assignment -> array EQUAL expression .) ]


state 118

    (91) assignment -> array MUL_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 91 (assignment -> array MUL_ASSIGN expression .)
    COMMA           reduce using rule 91 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 91 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 91 (assignment -> array MUL_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 91 (assignment -> array MUL_ASSIGN expression .) ]


state 119

    (90) assignment -> array DIV_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 90 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 90 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 90 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 90 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 90 (assignment -> array DIV_ASSIGN expression .) ]


state 120

    (88) assignment -> array ADD_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 88 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 88 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 88 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 88 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 88 (assignment -> array ADD_ASSIGN expression .) ]


state 121

    (84) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 84 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 122

    (87) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 87 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 123

    (102) function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .

    PLUS            reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 102 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)


state 124

    (101) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (104) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 159
    COMMA           shift and go to state 160


state 125

    (103) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 103 (function_call_list -> function_argument .)
    COMMA           reduce using rule 103 (function_call_list -> function_argument .)


state 126

    (105) function_argument -> expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_ROUND     reduce using rule 105 (function_argument -> expression .)
    COMMA           reduce using rule 105 (function_argument -> expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 127

    (82) assignment -> IDENTIFIER EQUAL expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MODULO          [ reduce using rule 82 (assignment -> IDENTIFIER EQUAL expression .) ]


state 128

    (86) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 86 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 129

    (83) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 83 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 130

    (85) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 85 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 131

    (72) expression -> LEFT_ROUND expression RIGHT_ROUND .

    SEMICOLON       reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PLUS            reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 72 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 132

    (69) expression -> expression LE_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 69 (expression -> expression LE_OP expression .)
    L_OP            reduce using rule 69 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 69 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 69 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 69 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 69 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 69 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 69 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 69 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 69 (expression -> expression LE_OP expression .)
    RIGHT_SQUARE    reduce using rule 69 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 69 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression LE_OP expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 133

    (63) expression -> expression DIVIDE expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 63 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 63 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 63 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 63 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 63 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 63 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 63 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 63 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 63 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 63 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 63 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 63 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 63 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 63 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 63 (expression -> expression DIVIDE expression .)
    RIGHT_SQUARE    reduce using rule 63 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 63 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! MULTIPLY        [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]
  ! MODULO          [ shift and go to state 92 ]


state 134

    (65) expression -> expression G_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 65 (expression -> expression G_OP expression .)
    L_OP            reduce using rule 65 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 65 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 65 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 65 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 65 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 65 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 65 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 65 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 65 (expression -> expression G_OP expression .)
    RIGHT_SQUARE    reduce using rule 65 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 65 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 65 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 65 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression G_OP expression .) ]
  ! MODULO          [ reduce using rule 65 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 135

    (64) expression -> expression L_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 64 (expression -> expression L_OP expression .)
    L_OP            reduce using rule 64 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 64 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 64 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 64 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 64 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 64 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 64 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 64 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 64 (expression -> expression L_OP expression .)
    RIGHT_SQUARE    reduce using rule 64 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 64 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 64 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression L_OP expression .) ]
  ! MODULO          [ reduce using rule 64 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 136

    (70) expression -> expression AND_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 70 (expression -> expression AND_OP expression .)
    AND_OP          reduce using rule 70 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 70 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 70 (expression -> expression AND_OP expression .)
    RIGHT_SQUARE    reduce using rule 70 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 137

    (68) expression -> expression GE_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 68 (expression -> expression GE_OP expression .)
    L_OP            reduce using rule 68 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 68 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 68 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 68 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 68 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 68 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 68 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 68 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 68 (expression -> expression GE_OP expression .)
    RIGHT_SQUARE    reduce using rule 68 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 68 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 68 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression GE_OP expression .) ]
  ! MODULO          [ reduce using rule 68 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 138

    (60) expression -> expression PLUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 60 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 60 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 60 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 60 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 60 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 60 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 60 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 60 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 60 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 60 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 60 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 60 (expression -> expression PLUS expression .)
    RIGHT_SQUARE    reduce using rule 60 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 60 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! MULTIPLY        [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 139

    (67) expression -> expression EQ_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 67 (expression -> expression EQ_OP expression .)
    NE_OP           reduce using rule 67 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 67 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 67 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 67 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 67 (expression -> expression EQ_OP expression .)
    RIGHT_SQUARE    reduce using rule 67 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 67 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! MODULO          [ reduce using rule 67 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 140

    (62) expression -> expression MULTIPLY expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 62 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 62 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 62 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 62 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 62 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 62 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 62 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 62 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 62 (expression -> expression MULTIPLY expression .)
    RIGHT_SQUARE    reduce using rule 62 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 62 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! MULTIPLY        [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]
  ! MODULO          [ shift and go to state 92 ]


state 141

    (79) expression -> expression MODULO expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 79 (expression -> expression MODULO expression .)
    PLUS            reduce using rule 79 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 79 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 79 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 79 (expression -> expression MODULO expression .)
    L_OP            reduce using rule 79 (expression -> expression MODULO expression .)
    G_OP            reduce using rule 79 (expression -> expression MODULO expression .)
    NE_OP           reduce using rule 79 (expression -> expression MODULO expression .)
    EQ_OP           reduce using rule 79 (expression -> expression MODULO expression .)
    GE_OP           reduce using rule 79 (expression -> expression MODULO expression .)
    LE_OP           reduce using rule 79 (expression -> expression MODULO expression .)
    AND_OP          reduce using rule 79 (expression -> expression MODULO expression .)
    OR_OP           reduce using rule 79 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 79 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 79 (expression -> expression MODULO expression .)
    RIGHT_SQUARE    reduce using rule 79 (expression -> expression MODULO expression .)
    RIGHT_ROUND     reduce using rule 79 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! MULTIPLY        [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]
  ! MODULO          [ shift and go to state 92 ]


state 142

    (61) expression -> expression MINUS expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 61 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 61 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 61 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 61 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 61 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 61 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 61 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 61 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 61 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 61 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 61 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 61 (expression -> expression MINUS expression .)
    RIGHT_SQUARE    reduce using rule 61 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 61 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    MODULO          shift and go to state 92

  ! MULTIPLY        [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 93 ]
  ! L_OP            [ shift and go to state 86 ]
  ! G_OP            [ shift and go to state 85 ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! GE_OP           [ shift and go to state 88 ]
  ! LE_OP           [ shift and go to state 83 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 143

    (66) expression -> expression NE_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 66 (expression -> expression NE_OP expression .)
    NE_OP           reduce using rule 66 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 66 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 66 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 66 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 66 (expression -> expression NE_OP expression .)
    RIGHT_SQUARE    reduce using rule 66 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 66 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! MODULO          [ reduce using rule 66 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 94 ]
  ! EQ_OP           [ shift and go to state 90 ]
  ! AND_OP          [ shift and go to state 87 ]
  ! OR_OP           [ shift and go to state 95 ]


state 144

    (71) expression -> expression OR_OP expression .
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 71 (expression -> expression OR_OP expression .)
    OR_OP           reduce using rule 71 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 71 (expression -> expression OR_OP expression .)
    RIGHT_SQUARE    reduce using rule 71 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    MODULO          shift and go to state 92

  ! PLUS            [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! MODULO          [ reduce using rule 71 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 95 ]


state 145

    (16) array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .

    RIGHT_ROUND     reduce using rule 16 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 16 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)


state 146

    (34) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 34 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 34 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 34 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 34 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 34 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 34 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 34 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (statement -> RETURN SEMICOLON .)
    TILDA           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 34 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 34 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 34 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 34 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 34 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 34 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 34 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 34 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 34 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 34 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 34 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 34 (statement -> RETURN SEMICOLON .)


state 147

    (35) statement -> RETURN expression . SEMICOLON
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 161
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 148

    (32) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 162

state 149

    (39) statement -> PRINT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 163


state 150

    (37) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    TILDA           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)


state 151

    (29) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 164
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 152

    (23) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (25) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 165

state 153

    (38) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 38 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 38 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    TILDA           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 38 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 38 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 38 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> BREAK SEMICOLON .)


state 154

    (107) right_curl -> RIGHT_CURL .

    RIGHT_CURL      reduce using rule 107 (right_curl -> RIGHT_CURL .)
    IF              reduce using rule 107 (right_curl -> RIGHT_CURL .)
    FOR             reduce using rule 107 (right_curl -> RIGHT_CURL .)
    WHILE           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    RETURN          reduce using rule 107 (right_curl -> RIGHT_CURL .)
    CONTINUE        reduce using rule 107 (right_curl -> RIGHT_CURL .)
    BREAK           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    PRINT           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    SEMICOLON       reduce using rule 107 (right_curl -> RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 107 (right_curl -> RIGHT_CURL .)
    IDENTIFIER      reduce using rule 107 (right_curl -> RIGHT_CURL .)
    TILDA           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    CHAR            reduce using rule 107 (right_curl -> RIGHT_CURL .)
    INT             reduce using rule 107 (right_curl -> RIGHT_CURL .)
    FLOAT           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    VOID            reduce using rule 107 (right_curl -> RIGHT_CURL .)
    HEX_NUM         reduce using rule 107 (right_curl -> RIGHT_CURL .)
    INT_NUM         reduce using rule 107 (right_curl -> RIGHT_CURL .)
    REAL_NUM        reduce using rule 107 (right_curl -> RIGHT_CURL .)
    EXP_NUM         reduce using rule 107 (right_curl -> RIGHT_CURL .)
    CHARACTER       reduce using rule 107 (right_curl -> RIGHT_CURL .)
    MINUS           reduce using rule 107 (right_curl -> RIGHT_CURL .)
    INC_OP          reduce using rule 107 (right_curl -> RIGHT_CURL .)
    DEC_OP          reduce using rule 107 (right_curl -> RIGHT_CURL .)
    ELSE            reduce using rule 107 (right_curl -> RIGHT_CURL .)
    $end            reduce using rule 107 (right_curl -> RIGHT_CURL .)


state 155

    (21) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    FOR             reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 21 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 21 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 21 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 21 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 21 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 21 (statement_list -> statement_list statement .)
    TILDA           reduce using rule 21 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 21 (statement_list -> statement_list statement .)
    INT             reduce using rule 21 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 21 (statement_list -> statement_list statement .)
    VOID            reduce using rule 21 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 21 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 21 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 21 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 21 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 21 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 21 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 21 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 21 (statement_list -> statement_list statement .)


state 156

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)


state 157

    (59) expression_statement -> expression SEMICOLON .

    LEFT_ROUND      reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    TILDA           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    RIGHT_CURL      reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 59 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 59 (expression_statement -> expression SEMICOLON .)


state 158

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    right_curl                     shift and go to state 166
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 159

    (101) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    PLUS            reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MODULO          reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 101 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 160

    (104) function_call_list -> function_call_list COMMA . function_argument
    (105) function_argument -> . expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    function_argument              shift and go to state 167
    array                          shift and go to state 35
    expression                     shift and go to state 126

state 161

    (35) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    TILDA           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 35 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 35 (statement -> RETURN expression SEMICOLON .)


state 162

    (32) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 168
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 163

    (39) statement -> PRINT IDENTIFIER SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    TILDA           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT             reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> PRINT IDENTIFIER SEMICOLON .)


state 164

    (29) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 169
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 165

    (23) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (25) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 170
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 166

    (19) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 19 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 19 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 19 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 19 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 19 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)


state 167

    (104) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 104 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 104 (function_call_list -> function_call_list COMMA function_argument .)


state 168

    (32) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (106) left_curl -> . LEFT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 52
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    left_curl                      shift and go to state 171
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 172
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 169

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    array                          shift and go to state 35
    expression                     shift and go to state 173

state 170

    (23) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE left_curl statement_list right_curl
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (106) left_curl -> . LEFT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 52
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    left_curl                      shift and go to state 174
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 175
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 171

    (32) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 176
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 172

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 173

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . MULTIPLY expression
    (63) expression -> expression . DIVIDE expression
    (64) expression -> expression . L_OP expression
    (65) expression -> expression . G_OP expression
    (66) expression -> expression . NE_OP expression
    (67) expression -> expression . EQ_OP expression
    (68) expression -> expression . GE_OP expression
    (69) expression -> expression . LE_OP expression
    (70) expression -> expression . AND_OP expression
    (71) expression -> expression . OR_OP expression
    (79) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 177
    PLUS            shift and go to state 89
    MINUS           shift and go to state 93
    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 84
    L_OP            shift and go to state 86
    G_OP            shift and go to state 85
    NE_OP           shift and go to state 94
    EQ_OP           shift and go to state 90
    GE_OP           shift and go to state 88
    LE_OP           shift and go to state 83
    AND_OP          shift and go to state 87
    OR_OP           shift and go to state 95
    MODULO          shift and go to state 92


state 174

    (23) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE left_curl statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 178
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 175

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 179

  ! ELSE            [ reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 176

    (32) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 180
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 177

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . left_curl statement_list right_curl
    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (106) left_curl -> . LEFT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 52
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    left_curl                      shift and go to state 181
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 182
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 178

    (23) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE left_curl statement_list right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 183
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 179

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . left_curl statement_list right_curl
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (106) left_curl -> . LEFT_CURL
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    LEFT_CURL       shift and go to state 52
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    left_curl                      shift and go to state 184
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 185
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 180

    (32) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 32 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)


state 181

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 186
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 182

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    VOID            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 183

    (23) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            shift and go to state 187

  ! ELSE            [ reduce using rule 23 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .) ]


state 184

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 188
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 185

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PRINT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    TILDA           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    VOID            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 186

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 189
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 187

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . left_curl statement_list right_curl
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (106) left_curl -> . LEFT_CURL
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    LEFT_CURL       shift and go to state 52
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    left_curl                      shift and go to state 190
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 191
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 188

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 192
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 189

    (29) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 29 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)


state 190

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl . statement_list right_curl
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 105
    statement_list                 shift and go to state 193
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 191

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    PRINT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    TILDA           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    VOID            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    MINUS           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    ELSE            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)


state 192

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)


state 193

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list . right_curl
    (21) statement_list -> statement_list . statement
    (107) right_curl -> . RIGHT_CURL
    (23) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (29) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (31) statement -> . expression_statement
    (32) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (34) statement -> . RETURN SEMICOLON
    (35) statement -> . RETURN expression SEMICOLON
    (36) statement -> . declaration_statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . PRINT IDENTIFIER SEMICOLON
    (58) expression_statement -> . SEMICOLON
    (59) expression_statement -> . expression SEMICOLON
    (40) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression MULTIPLY expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . expression L_OP expression
    (65) expression -> . expression G_OP expression
    (66) expression -> . expression NE_OP expression
    (67) expression -> . expression EQ_OP expression
    (68) expression -> . expression GE_OP expression
    (69) expression -> . expression LE_OP expression
    (70) expression -> . expression AND_OP expression
    (71) expression -> . expression OR_OP expression
    (72) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (73) expression -> . IDENTIFIER
    (74) expression -> . array
    (75) expression -> . constant
    (76) expression -> . assignment
    (77) expression -> . unary_expression
    (78) expression -> . function_call
    (79) expression -> . expression MODULO expression
    (80) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . INT
    (9) type_specifier -> . FLOAT
    (10) type_specifier -> . VOID
    (56) array -> . IDENTIFIER array_index
    (47) constant -> . HEX_NUM
    (48) constant -> . INT_NUM
    (49) constant -> . REAL_NUM
    (50) constant -> . EXP_NUM
    (51) constant -> . CHARACTER
    (52) constant -> . MINUS HEX_NUM
    (53) constant -> . MINUS INT_NUM
    (54) constant -> . MINUS REAL_NUM
    (55) constant -> . MINUS EXP_NUM
    (81) assignment -> . array EQUAL expression
    (82) assignment -> . IDENTIFIER EQUAL expression
    (83) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (84) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (85) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (86) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (87) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (88) assignment -> . array ADD_ASSIGN expression
    (89) assignment -> . array SUB_ASSIGN expression
    (90) assignment -> . array DIV_ASSIGN expression
    (91) assignment -> . array MUL_ASSIGN expression
    (92) assignment -> . array MOD_ASSIGN expression
    (93) unary_expression -> . IDENTIFIER INC_OP
    (94) unary_expression -> . IDENTIFIER DEC_OP
    (95) unary_expression -> . array INC_OP
    (96) unary_expression -> . array DEC_OP
    (97) unary_expression -> . INC_OP IDENTIFIER
    (98) unary_expression -> . INC_OP array
    (99) unary_expression -> . DEC_OP IDENTIFIER
    (100) unary_expression -> . DEC_OP array
    (101) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (102) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 154
    IF              shift and go to state 107
    FOR             shift and go to state 106
    WHILE           shift and go to state 100
    RETURN          shift and go to state 99
    CONTINUE        shift and go to state 104
    BREAK           shift and go to state 108
    PRINT           shift and go to state 101
    SEMICOLON       shift and go to state 103
    LEFT_ROUND      shift and go to state 42
    IDENTIFIER      shift and go to state 39
    TILDA           shift and go to state 38
    CHAR            shift and go to state 8
    INT             shift and go to state 6
    FLOAT           shift and go to state 2
    VOID            shift and go to state 7
    HEX_NUM         shift and go to state 41
    INT_NUM         shift and go to state 44
    REAL_NUM        shift and go to state 46
    EXP_NUM         shift and go to state 34
    CHARACTER       shift and go to state 37
    MINUS           shift and go to state 36
    INC_OP          shift and go to state 43
    DEC_OP          shift and go to state 32

    expression_statement           shift and go to state 98
    type_specifier                 shift and go to state 102
    constant                       shift and go to state 30
    unary_expression               shift and go to state 31
    assignment                     shift and go to state 40
    function_call                  shift and go to state 33
    right_curl                     shift and go to state 194
    declaration_statement          shift and go to state 109
    statement                      shift and go to state 155
    array                          shift and go to state 35
    expression                     shift and go to state 111

state 194

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)

