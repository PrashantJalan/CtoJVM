Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    MODULO
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    TILDA
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    STRUCT
    LEFT_CURL
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_definition
Rule 5     function -> declaration_statement
Rule 6     type_specifier -> CHAR
Rule 7     type_specifier -> VOID
Rule 8     type_specifier -> SHORT
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> LONG
Rule 11    type_specifier -> FLOAT
Rule 12    type_specifier -> DOUBLE
Rule 13    type_specifier -> SIGNED
Rule 14    type_specifier -> UNSIGNED
Rule 15    argument_list -> argument
Rule 16    argument_list -> argument_list COMMA argument
Rule 17    argument -> type_specifier IDENTIFIER
Rule 18    argument -> type_specifier array
Rule 19    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
Rule 20    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> statement
Rule 23    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
Rule 29    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 31    statement -> expression_statement
Rule 32    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 33    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 34    statement -> CONTINUE SEMICOLON
Rule 35    statement -> BREAK SEMICOLON
Rule 36    statement -> RETURN SEMICOLON
Rule 37    statement -> RETURN expression SEMICOLON
Rule 38    statement -> declaration_statement
Rule 39    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 40    declaration_list -> declaration
Rule 41    declaration_list -> declaration_list COMMA declaration
Rule 42    declaration -> IDENTIFIER
Rule 43    declaration -> array
Rule 44    declaration -> declaration_assignment
Rule 45    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 46    constant -> HEX_NUM
Rule 47    constant -> REAL_NUM
Rule 48    constant -> INT_NUM
Rule 49    constant -> CHARACTER
Rule 50    constant -> STRING
Rule 51    constant -> EXP_NUM
Rule 52    constant -> PLUS HEX_NUM
Rule 53    constant -> PLUS REAL_NUM
Rule 54    constant -> PLUS INT_NUM
Rule 55    constant -> PLUS EXP_NUM
Rule 56    constant -> MINUS HEX_NUM
Rule 57    constant -> MINUS REAL_NUM
Rule 58    constant -> MINUS INT_NUM
Rule 59    constant -> MINUS EXP_NUM
Rule 60    array -> IDENTIFIER array_index
Rule 61    array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE
Rule 62    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 63    expression_statement -> SEMICOLON
Rule 64    expression_statement -> expression SEMICOLON
Rule 65    expression -> expression PLUS expression
Rule 66    expression -> expression MINUS expression
Rule 67    expression -> expression MULTIPLY expression
Rule 68    expression -> expression DIVIDE expression
Rule 69    expression -> expression L_OP expression
Rule 70    expression -> expression G_OP expression
Rule 71    expression -> expression NE_OP expression
Rule 72    expression -> expression EQ_OP expression
Rule 73    expression -> expression GE_OP expression
Rule 74    expression -> expression LE_OP expression
Rule 75    expression -> expression AND_OP expression
Rule 76    expression -> expression OR_OP expression
Rule 77    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 78    expression -> IDENTIFIER
Rule 79    expression -> array
Rule 80    expression -> assignment
Rule 81    expression -> unary_expression
Rule 82    expression -> function_call
Rule 83    expression -> constant
Rule 84    assignment -> array EQUAL expression
Rule 85    assignment -> IDENTIFIER EQUAL expression
Rule 86    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 87    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 88    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 89    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 90    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 91    assignment -> array ADD_ASSIGN expression
Rule 92    assignment -> array SUB_ASSIGN expression
Rule 93    assignment -> array DIV_ASSIGN expression
Rule 94    assignment -> array MUL_ASSIGN expression
Rule 95    assignment -> array MOD_ASSIGN expression
Rule 96    unary_expression -> IDENTIFIER INC_OP
Rule 97    unary_expression -> IDENTIFIER DEC_OP
Rule 98    unary_expression -> array INC_OP
Rule 99    unary_expression -> array DEC_OP
Rule 100   unary_expression -> INC_OP IDENTIFIER
Rule 101   unary_expression -> INC_OP array
Rule 102   unary_expression -> DEC_OP IDENTIFIER
Rule 103   unary_expression -> DEC_OP array
Rule 104   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 105   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 106   function_call_list -> function_argument
Rule 107   function_call_list -> function_call_list COMMA function_argument
Rule 108   function_argument -> IDENTIFIER
Rule 109   function_argument -> array
Rule 110   function_argument -> constant
Rule 111   right_curl -> RIGHT_CURL

Terminals, with rules where they appear

ADD_ASSIGN           : 86 91
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 75
AUTO                 : 
BREAK                : 35
CASE                 : 
CHAR                 : 6
CHARACTER            : 49
COLON                : 
COMMA                : 16 41 107
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 34
DEC_OP               : 97 99 102 103
DEFAULT              : 
DIVIDE               : 68
DIV_ASSIGN           : 88 93
DO                   : 
DOT                  : 
DOUBLE               : 12
ELLIPSIS             : 
ELSE                 : 25 26 27 28
ENUM                 : 
EQUAL                : 45 84 85
EQ_OP                : 72
EXCLAMATION          : 
EXP_NUM              : 51 55 59
EXTERN               : 
FLOAT                : 11
FOR                  : 29 30
GE_OP                : 73
GOTO                 : 
G_OP                 : 70
HASH                 : 
HEADER               : 
HEX_NUM              : 46 52 56
IDENTIFIER           : 17 19 20 42 45 60 78 85 86 87 88 89 90 96 97 100 102 104 105 108
IF                   : 23 24 25 26 27 28
INC_OP               : 96 98 100 101
INT                  : 9
INT_NUM              : 48 54 58
LEFT_ASSIGN          : 
LEFT_CURL            : 
LEFT_OP              : 
LEFT_ROUND           : 19 20 23 24 25 26 27 28 29 30 32 33 77 104 105
LEFT_SQUARE          : 61 62
LE_OP                : 74
LONG                 : 10
L_OP                 : 69
MINUS                : 56 57 58 59 66
MODULO               : 
MOD_ASSIGN           : 90 95
MULTIPLY             : 67
MUL_ASSIGN           : 89 94
NE_OP                : 71
OR_ASSIGN            : 
OR_OP                : 76
PIPE                 : 
PLUS                 : 52 53 54 55 65
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 47 53 57
REGISTER             : 
RETURN               : 36 37
RIGHT_ASSIGN         : 
RIGHT_CURL           : 111
RIGHT_OP             : 
RIGHT_ROUND          : 19 20 23 24 25 26 27 28 29 30 32 33 77 104 105
RIGHT_SQUARE         : 61 62
SEMICOLON            : 34 35 36 37 39 63 64
SHORT                : 8
SIGNED               : 13
SIZEOF               : 
STATIC               : 
STRING               : 50
STRUCT               : 
SUB_ASSIGN           : 87 92
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 14
VOID                 : 7
VOLATILE             : 
WHILE                : 32 33
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 15 16
argument_list        : 16 19
array                : 18 43 79 84 91 92 93 94 95 98 99 101 103 109
array_index          : 60 61
assignment           : 80
constant             : 83 110
declaration          : 40 41
declaration_assignment : 44
declaration_list     : 39 41
declaration_statement : 5 38
expression           : 23 24 25 26 27 28 29 30 32 33 37 45 61 62 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 84 85 86 87 88 89 90 91 92 93 94 95
expression_statement : 29 29 30 30 31
function             : 2 3
function_argument    : 106 107
function_call        : 82
function_call_list   : 104 107
function_definition  : 4
function_list        : 1 2
left_curl            : 19 20 23 26 27 28 28 29 32
program              : 0
right_curl           : 19 20 23 26 27 28 28 29 32
statement            : 21 22 24 25 25 26 27 30 33
statement_list       : 19 20 21 23 26 27 28 28 29 32
type_specifier       : 17 18 19 20 39
unary_expression     : 81

