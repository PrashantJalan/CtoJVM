Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    MODULO
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    TILDA
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_declaration
Rule 5     function -> function_definition
Rule 6     function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 7     return_type_specifier -> type_specifier
Rule 8     return_type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> SHORT
Rule 11    type_specifier -> INT
Rule 12    type_specifier -> LONG
Rule 13    type_specifier -> FLOAT
Rule 14    type_specifier -> DOUBLE
Rule 15    type_specifier -> SIGNED
Rule 16    type_specifier -> UNSIGNED
Rule 17    argument_list -> argument
Rule 18    argument_list -> argument_list COMMA argument
Rule 19    argument -> type_specifier IDENTIFIER
Rule 20    argument -> type_specifier array
Rule 21    function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> statement
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 31    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 32    statement -> expression_statement
Rule 33    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 34    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 35    statement -> CONTINUE SEMICOLON
Rule 36    statement -> BREAK SEMICOLON
Rule 37    statement -> RETURN SEMICOLON
Rule 38    statement -> RETURN expression SEMICOLON
Rule 39    statement -> type_specifier declaration_list SEMICOLON
Rule 40    declaration_list -> declaration
Rule 41    declaration_list -> declaration_list COMMA declaration
Rule 42    declaration -> IDENTIFIER
Rule 43    declaration -> array
Rule 44    declaration -> equal_or_initialise
Rule 45    constant -> HEX_NUM
Rule 46    constant -> REAL_NUM
Rule 47    constant -> INT_NUM
Rule 48    constant -> CHARACTER
Rule 49    constant -> STRING
Rule 50    constant -> EXP_NUM
Rule 51    constant -> PLUS HEX_NUM
Rule 52    constant -> PLUS REAL_NUM
Rule 53    constant -> PLUS INT_NUM
Rule 54    constant -> PLUS EXP_NUM
Rule 55    constant -> MINUS HEX_NUM
Rule 56    constant -> MINUS REAL_NUM
Rule 57    constant -> MINUS INT_NUM
Rule 58    constant -> MINUS EXP_NUM
Rule 59    array -> IDENTIFIER array_index
Rule 60    array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
Rule 61    array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE
Rule 62    expression_statement -> SEMICOLON
Rule 63    expression_statement -> expression SEMICOLON
Rule 64    expression -> expression PLUS expression
Rule 65    expression -> expression MINUS expression
Rule 66    expression -> expression MULTIPLY expression
Rule 67    expression -> expression DIVIDE expression
Rule 68    expression -> expression L_OP expression
Rule 69    expression -> expression G_OP expression
Rule 70    expression -> expression NE_OP expression
Rule 71    expression -> expression EQ_OP expression
Rule 72    expression -> expression GE_OP expression
Rule 73    expression -> expression LE_OP expression
Rule 74    expression -> expression AND_OP expression
Rule 75    expression -> expression OR_OP expression
Rule 76    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 77    expression -> IDENTIFIER
Rule 78    expression -> array
Rule 79    expression -> constant
Rule 80    expression -> assignment
Rule 81    expression -> unary_expression
Rule 82    expression -> function_call
Rule 83    assignment -> equal_or_initialise
Rule 84    equal_or_initialise -> IDENTIFIER EQUAL expression
Rule 85    assignment -> array EQUAL expression
Rule 86    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 87    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 88    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 89    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 90    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 91    assignment -> array ADD_ASSIGN expression
Rule 92    assignment -> array SUB_ASSIGN expression
Rule 93    assignment -> array DIV_ASSIGN expression
Rule 94    assignment -> array MOD_ASSIGN expression
Rule 95    unary_expression -> IDENTIFIER INC_OP
Rule 96    unary_expression -> IDENTIFIER DEC_OP
Rule 97    unary_expression -> array INC_OP
Rule 98    unary_expression -> array DEC_OP
Rule 99    unary_expression -> INC_OP IDENTIFIER
Rule 100   unary_expression -> INC_OP array
Rule 101   unary_expression -> DEC_OP IDENTIFIER
Rule 102   unary_expression -> DEC_OP array
Rule 103   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 104   function_call_list -> function_argument
Rule 105   function_call_list -> function_call_list COMMA function_argument
Rule 106   function_argument -> IDENTIFIER
Rule 107   function_argument -> array
Rule 108   function_argument -> constant

Terminals, with rules where they appear

ADD_ASSIGN           : 86 91
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 74
AUTO                 : 
BREAK                : 36
CASE                 : 
CHAR                 : 9
CHARACTER            : 48
COLON                : 
COMMA                : 18 41 105
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 35
DEC_OP               : 96 98 101 102
DEFAULT              : 
DIVIDE               : 67
DIV_ASSIGN           : 88 93
DO                   : 
DOT                  : 
DOUBLE               : 14
ELLIPSIS             : 
ELSE                 : 26 27 28 29
ENUM                 : 
EQUAL                : 84 85
EQ_OP                : 71
EXCLAMATION          : 
EXP_NUM              : 50 54 58
EXTERN               : 
FLOAT                : 13
FOR                  : 30 31
GE_OP                : 72
GOTO                 : 
G_OP                 : 69
HASH                 : 
HEADER               : 
HEX_NUM              : 45 51 55
IDENTIFIER           : 6 19 21 42 59 77 84 86 87 88 89 90 95 96 99 101 103 106
IF                   : 24 25 26 27 28 29
INC_OP               : 95 97 99 100
INT                  : 11
INT_NUM              : 47 53 57 60 61
LEFT_ASSIGN          : 
LEFT_CURL            : 21 24 27 28 29 29 30 33
LEFT_OP              : 
LEFT_ROUND           : 6 21 24 25 26 27 28 29 30 31 33 34 76 103
LEFT_SQUARE          : 60 61
LE_OP                : 73
LONG                 : 12
L_OP                 : 68
MINUS                : 55 56 57 58 65
MODULO               : 
MOD_ASSIGN           : 90 94
MULTIPLY             : 66
MUL_ASSIGN           : 89
NE_OP                : 70
OR_ASSIGN            : 
OR_OP                : 75
PIPE                 : 
PLUS                 : 51 52 53 54 64
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 46 52 56
REGISTER             : 
RETURN               : 37 38
RIGHT_ASSIGN         : 
RIGHT_CURL           : 21 24 27 28 29 29 30 33
RIGHT_OP             : 
RIGHT_ROUND          : 6 21 24 25 26 27 28 29 30 31 33 34 76 103
RIGHT_SQUARE         : 60 61
SEMICOLON            : 6 35 36 37 38 39 62 63
SHORT                : 10
SIGNED               : 15
SIZEOF               : 
STATIC               : 
STRING               : 49
STRUCT               : 
SUB_ASSIGN           : 87 92
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 16
VOID                 : 8
VOLATILE             : 
WHILE                : 33 34
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 17 18
argument_list        : 6 18 21
array                : 20 43 78 85 91 92 93 94 97 98 100 102 107
array_index          : 59 60
assignment           : 80
constant             : 79 108
declaration          : 40 41
declaration_list     : 39 41
equal_or_initialise  : 44 83
expression           : 24 25 26 27 28 29 30 31 33 34 38 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 84 85 86 87 88 89 90 91 92 93 94
expression_statement : 30 30 31 31 32
function             : 2 3
function_argument    : 104 105
function_call        : 82
function_call_list   : 103 105
function_declaration : 4
function_definition  : 5
function_list        : 1 2
program              : 0
return_type_specifier : 6 21
statement            : 22 23 25 26 26 27 28 31 34
statement_list       : 21 22 24 27 28 29 29 30 33
type_specifier       : 7 19 20 39
unary_expression     : 81

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 9
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    function_list                  shift and go to state 12
    type_specifier                 shift and go to state 5
    program                        shift and go to state 8

state 1

    (6) function_declaration -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    IDENTIFIER      shift and go to state 17


state 2

    (10) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> SHORT .)


state 3

    (8) return_type_specifier -> VOID .

    IDENTIFIER      reduce using rule 8 (return_type_specifier -> VOID .)


state 4

    (9) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 9 (type_specifier -> CHAR .)


state 5

    (7) return_type_specifier -> type_specifier .

    IDENTIFIER      reduce using rule 7 (return_type_specifier -> type_specifier .)


state 6

    (16) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 16 (type_specifier -> UNSIGNED .)


state 7

    (12) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 12 (type_specifier -> LONG .)


state 8

    (0) S' -> program .



state 9

    (3) function_list -> function .

    VOID            reduce using rule 3 (function_list -> function .)
    CHAR            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 10

    (5) function -> function_definition .

    VOID            reduce using rule 5 (function -> function_definition .)
    CHAR            reduce using rule 5 (function -> function_definition .)
    SHORT           reduce using rule 5 (function -> function_definition .)
    INT             reduce using rule 5 (function -> function_definition .)
    LONG            reduce using rule 5 (function -> function_definition .)
    FLOAT           reduce using rule 5 (function -> function_definition .)
    DOUBLE          reduce using rule 5 (function -> function_definition .)
    SIGNED          reduce using rule 5 (function -> function_definition .)
    UNSIGNED        reduce using rule 5 (function -> function_definition .)
    $end            reduce using rule 5 (function -> function_definition .)


state 11

    (4) function -> function_declaration .

    VOID            reduce using rule 4 (function -> function_declaration .)
    CHAR            reduce using rule 4 (function -> function_declaration .)
    SHORT           reduce using rule 4 (function -> function_declaration .)
    INT             reduce using rule 4 (function -> function_declaration .)
    LONG            reduce using rule 4 (function -> function_declaration .)
    FLOAT           reduce using rule 4 (function -> function_declaration .)
    DOUBLE          reduce using rule 4 (function -> function_declaration .)
    SIGNED          reduce using rule 4 (function -> function_declaration .)
    UNSIGNED        reduce using rule 4 (function -> function_declaration .)
    $end            reduce using rule 4 (function -> function_declaration .)


state 12

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 18
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    type_specifier                 shift and go to state 5

state 13

    (11) type_specifier -> INT .

    IDENTIFIER      reduce using rule 11 (type_specifier -> INT .)


state 14

    (14) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 14 (type_specifier -> DOUBLE .)


state 15

    (13) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 13 (type_specifier -> FLOAT .)


state 16

    (15) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 15 (type_specifier -> SIGNED .)


state 17

    (6) function_declaration -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 19


state 18

    (2) function_list -> function_list function .

    VOID            reduce using rule 2 (function_list -> function_list function .)
    CHAR            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 19

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (17) argument_list -> . argument
    (18) argument_list -> . argument_list COMMA argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 21
    argument_list                  shift and go to state 22

state 20

    (19) argument -> type_specifier . IDENTIFIER
    (20) argument -> type_specifier . array
    (59) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 23

    array                          shift and go to state 24

state 21

    (17) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 17 (argument_list -> argument .)
    COMMA           reduce using rule 17 (argument_list -> argument .)


state 22

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (18) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 25
    COMMA           shift and go to state 26


state 23

    (19) argument -> type_specifier IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 24

    (20) argument -> type_specifier array .

    RIGHT_ROUND     reduce using rule 20 (argument -> type_specifier array .)
    COMMA           reduce using rule 20 (argument -> type_specifier array .)


state 25

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL

    SEMICOLON       shift and go to state 29
    LEFT_CURL       shift and go to state 30


state 26

    (18) argument_list -> argument_list COMMA . argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 31

state 27

    (61) array_index -> LEFT_SQUARE . INT_NUM RIGHT_SQUARE

    INT_NUM         shift and go to state 32


state 28

    (59) array -> IDENTIFIER array_index .
    (60) array_index -> array_index . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 59 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 59 (array -> IDENTIFIER array_index .)
    EQUAL           reduce using rule 59 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 59 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 59 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 59 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 59 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 59 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 59 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 59 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 59 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 59 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 59 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 59 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 59 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 59 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 59 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 59 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 59 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 59 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 59 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 59 (array -> IDENTIFIER array_index .)
    LEFT_SQUARE     shift and go to state 33


state 29

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    VOID            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    CHAR            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 30

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    equal_or_initialise            shift and go to state 55
    statement                      shift and go to state 50
    statement_list                 shift and go to state 62
    array                          shift and go to state 43
    expression                     shift and go to state 63

state 31

    (18) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 18 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 18 (argument_list -> argument_list COMMA argument .)


state 32

    (61) array_index -> LEFT_SQUARE INT_NUM . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 64


state 33

    (60) array_index -> array_index LEFT_SQUARE . INT_NUM RIGHT_SQUARE

    INT_NUM         shift and go to state 65


state 34

    (32) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    WHILE           reduce using rule 32 (statement -> expression_statement .)
    CONTINUE        reduce using rule 32 (statement -> expression_statement .)
    BREAK           reduce using rule 32 (statement -> expression_statement .)
    RETURN          reduce using rule 32 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 32 (statement -> expression_statement .)
    CHAR            reduce using rule 32 (statement -> expression_statement .)
    SHORT           reduce using rule 32 (statement -> expression_statement .)
    INT             reduce using rule 32 (statement -> expression_statement .)
    LONG            reduce using rule 32 (statement -> expression_statement .)
    FLOAT           reduce using rule 32 (statement -> expression_statement .)
    DOUBLE          reduce using rule 32 (statement -> expression_statement .)
    SIGNED          reduce using rule 32 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 32 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 32 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 32 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 32 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 32 (statement -> expression_statement .)
    INT_NUM         reduce using rule 32 (statement -> expression_statement .)
    CHARACTER       reduce using rule 32 (statement -> expression_statement .)
    STRING          reduce using rule 32 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 32 (statement -> expression_statement .)
    PLUS            reduce using rule 32 (statement -> expression_statement .)
    MINUS           reduce using rule 32 (statement -> expression_statement .)
    INC_OP          reduce using rule 32 (statement -> expression_statement .)
    DEC_OP          reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 35

    (37) statement -> RETURN . SEMICOLON
    (38) statement -> RETURN . expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 66
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 67
    equal_or_initialise            shift and go to state 55

state 36

    (81) expression -> unary_expression .

    SEMICOLON       reduce using rule 81 (expression -> unary_expression .)
    PLUS            reduce using rule 81 (expression -> unary_expression .)
    MINUS           reduce using rule 81 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 81 (expression -> unary_expression .)
    DIVIDE          reduce using rule 81 (expression -> unary_expression .)
    L_OP            reduce using rule 81 (expression -> unary_expression .)
    G_OP            reduce using rule 81 (expression -> unary_expression .)
    NE_OP           reduce using rule 81 (expression -> unary_expression .)
    EQ_OP           reduce using rule 81 (expression -> unary_expression .)
    GE_OP           reduce using rule 81 (expression -> unary_expression .)
    LE_OP           reduce using rule 81 (expression -> unary_expression .)
    AND_OP          reduce using rule 81 (expression -> unary_expression .)
    OR_OP           reduce using rule 81 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 81 (expression -> unary_expression .)
    COMMA           reduce using rule 81 (expression -> unary_expression .)


state 37

    (101) unary_expression -> DEC_OP . IDENTIFIER
    (102) unary_expression -> DEC_OP . array
    (59) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 69

    array                          shift and go to state 68

state 38

    (82) expression -> function_call .

    SEMICOLON       reduce using rule 82 (expression -> function_call .)
    PLUS            reduce using rule 82 (expression -> function_call .)
    MINUS           reduce using rule 82 (expression -> function_call .)
    MULTIPLY        reduce using rule 82 (expression -> function_call .)
    DIVIDE          reduce using rule 82 (expression -> function_call .)
    L_OP            reduce using rule 82 (expression -> function_call .)
    G_OP            reduce using rule 82 (expression -> function_call .)
    NE_OP           reduce using rule 82 (expression -> function_call .)
    EQ_OP           reduce using rule 82 (expression -> function_call .)
    GE_OP           reduce using rule 82 (expression -> function_call .)
    LE_OP           reduce using rule 82 (expression -> function_call .)
    AND_OP          reduce using rule 82 (expression -> function_call .)
    OR_OP           reduce using rule 82 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 82 (expression -> function_call .)
    COMMA           reduce using rule 82 (expression -> function_call .)


state 39

    (99) unary_expression -> INC_OP . IDENTIFIER
    (100) unary_expression -> INC_OP . array
    (59) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 71

    array                          shift and go to state 70

state 40

    (33) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 72


state 41

    (50) constant -> EXP_NUM .

    SEMICOLON       reduce using rule 50 (constant -> EXP_NUM .)
    PLUS            reduce using rule 50 (constant -> EXP_NUM .)
    MINUS           reduce using rule 50 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 50 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 50 (constant -> EXP_NUM .)
    L_OP            reduce using rule 50 (constant -> EXP_NUM .)
    G_OP            reduce using rule 50 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 50 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 50 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 50 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 50 (constant -> EXP_NUM .)
    COMMA           reduce using rule 50 (constant -> EXP_NUM .)


state 42

    (79) expression -> constant .

    SEMICOLON       reduce using rule 79 (expression -> constant .)
    PLUS            reduce using rule 79 (expression -> constant .)
    MINUS           reduce using rule 79 (expression -> constant .)
    MULTIPLY        reduce using rule 79 (expression -> constant .)
    DIVIDE          reduce using rule 79 (expression -> constant .)
    L_OP            reduce using rule 79 (expression -> constant .)
    G_OP            reduce using rule 79 (expression -> constant .)
    NE_OP           reduce using rule 79 (expression -> constant .)
    EQ_OP           reduce using rule 79 (expression -> constant .)
    GE_OP           reduce using rule 79 (expression -> constant .)
    LE_OP           reduce using rule 79 (expression -> constant .)
    AND_OP          reduce using rule 79 (expression -> constant .)
    OR_OP           reduce using rule 79 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 79 (expression -> constant .)
    COMMA           reduce using rule 79 (expression -> constant .)


state 43

    (78) expression -> array .
    (85) assignment -> array . EQUAL expression
    (91) assignment -> array . ADD_ASSIGN expression
    (92) assignment -> array . SUB_ASSIGN expression
    (93) assignment -> array . DIV_ASSIGN expression
    (94) assignment -> array . MOD_ASSIGN expression
    (97) unary_expression -> array . INC_OP
    (98) unary_expression -> array . DEC_OP

    SEMICOLON       reduce using rule 78 (expression -> array .)
    PLUS            reduce using rule 78 (expression -> array .)
    MINUS           reduce using rule 78 (expression -> array .)
    MULTIPLY        reduce using rule 78 (expression -> array .)
    DIVIDE          reduce using rule 78 (expression -> array .)
    L_OP            reduce using rule 78 (expression -> array .)
    G_OP            reduce using rule 78 (expression -> array .)
    NE_OP           reduce using rule 78 (expression -> array .)
    EQ_OP           reduce using rule 78 (expression -> array .)
    GE_OP           reduce using rule 78 (expression -> array .)
    LE_OP           reduce using rule 78 (expression -> array .)
    AND_OP          reduce using rule 78 (expression -> array .)
    OR_OP           reduce using rule 78 (expression -> array .)
    RIGHT_ROUND     reduce using rule 78 (expression -> array .)
    COMMA           reduce using rule 78 (expression -> array .)
    EQUAL           shift and go to state 77
    ADD_ASSIGN      shift and go to state 79
    SUB_ASSIGN      shift and go to state 73
    DIV_ASSIGN      shift and go to state 78
    MOD_ASSIGN      shift and go to state 74
    INC_OP          shift and go to state 76
    DEC_OP          shift and go to state 75


state 44

    (55) constant -> MINUS . HEX_NUM
    (56) constant -> MINUS . REAL_NUM
    (57) constant -> MINUS . INT_NUM
    (58) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 83
    REAL_NUM        shift and go to state 80
    INT_NUM         shift and go to state 81
    EXP_NUM         shift and go to state 82


state 45

    (49) constant -> STRING .

    SEMICOLON       reduce using rule 49 (constant -> STRING .)
    PLUS            reduce using rule 49 (constant -> STRING .)
    MINUS           reduce using rule 49 (constant -> STRING .)
    MULTIPLY        reduce using rule 49 (constant -> STRING .)
    DIVIDE          reduce using rule 49 (constant -> STRING .)
    L_OP            reduce using rule 49 (constant -> STRING .)
    G_OP            reduce using rule 49 (constant -> STRING .)
    NE_OP           reduce using rule 49 (constant -> STRING .)
    EQ_OP           reduce using rule 49 (constant -> STRING .)
    GE_OP           reduce using rule 49 (constant -> STRING .)
    LE_OP           reduce using rule 49 (constant -> STRING .)
    AND_OP          reduce using rule 49 (constant -> STRING .)
    OR_OP           reduce using rule 49 (constant -> STRING .)
    RIGHT_ROUND     reduce using rule 49 (constant -> STRING .)
    COMMA           reduce using rule 49 (constant -> STRING .)


state 46

    (39) statement -> type_specifier . declaration_list SEMICOLON
    (40) declaration_list -> . declaration
    (41) declaration_list -> . declaration_list COMMA declaration
    (42) declaration -> . IDENTIFIER
    (43) declaration -> . array
    (44) declaration -> . equal_or_initialise
    (59) array -> . IDENTIFIER array_index
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 88

    declaration_list               shift and go to state 84
    declaration                    shift and go to state 86
    array                          shift and go to state 87
    equal_or_initialise            shift and go to state 85

state 47

    (62) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 62 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 62 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 62 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 62 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 62 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 62 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 62 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 62 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 62 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 62 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 62 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 62 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 62 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 62 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 62 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 62 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 62 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 62 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 62 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 62 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 62 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 62 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 62 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 62 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 62 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 62 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 62 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 62 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 62 (expression_statement -> SEMICOLON .)


state 48

    (48) constant -> CHARACTER .

    SEMICOLON       reduce using rule 48 (constant -> CHARACTER .)
    PLUS            reduce using rule 48 (constant -> CHARACTER .)
    MINUS           reduce using rule 48 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 48 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 48 (constant -> CHARACTER .)
    L_OP            reduce using rule 48 (constant -> CHARACTER .)
    G_OP            reduce using rule 48 (constant -> CHARACTER .)
    NE_OP           reduce using rule 48 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 48 (constant -> CHARACTER .)
    GE_OP           reduce using rule 48 (constant -> CHARACTER .)
    LE_OP           reduce using rule 48 (constant -> CHARACTER .)
    AND_OP          reduce using rule 48 (constant -> CHARACTER .)
    OR_OP           reduce using rule 48 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 48 (constant -> CHARACTER .)
    COMMA           reduce using rule 48 (constant -> CHARACTER .)


state 49

    (51) constant -> PLUS . HEX_NUM
    (52) constant -> PLUS . REAL_NUM
    (53) constant -> PLUS . INT_NUM
    (54) constant -> PLUS . EXP_NUM

    HEX_NUM         shift and go to state 91
    REAL_NUM        shift and go to state 92
    INT_NUM         shift and go to state 89
    EXP_NUM         shift and go to state 90


state 50

    (23) statement_list -> statement .

    RIGHT_CURL      reduce using rule 23 (statement_list -> statement .)
    IF              reduce using rule 23 (statement_list -> statement .)
    FOR             reduce using rule 23 (statement_list -> statement .)
    WHILE           reduce using rule 23 (statement_list -> statement .)
    CONTINUE        reduce using rule 23 (statement_list -> statement .)
    BREAK           reduce using rule 23 (statement_list -> statement .)
    RETURN          reduce using rule 23 (statement_list -> statement .)
    SEMICOLON       reduce using rule 23 (statement_list -> statement .)
    CHAR            reduce using rule 23 (statement_list -> statement .)
    SHORT           reduce using rule 23 (statement_list -> statement .)
    INT             reduce using rule 23 (statement_list -> statement .)
    LONG            reduce using rule 23 (statement_list -> statement .)
    FLOAT           reduce using rule 23 (statement_list -> statement .)
    DOUBLE          reduce using rule 23 (statement_list -> statement .)
    SIGNED          reduce using rule 23 (statement_list -> statement .)
    UNSIGNED        reduce using rule 23 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 23 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 23 (statement_list -> statement .)
    HEX_NUM         reduce using rule 23 (statement_list -> statement .)
    REAL_NUM        reduce using rule 23 (statement_list -> statement .)
    INT_NUM         reduce using rule 23 (statement_list -> statement .)
    CHARACTER       reduce using rule 23 (statement_list -> statement .)
    STRING          reduce using rule 23 (statement_list -> statement .)
    EXP_NUM         reduce using rule 23 (statement_list -> statement .)
    PLUS            reduce using rule 23 (statement_list -> statement .)
    MINUS           reduce using rule 23 (statement_list -> statement .)
    INC_OP          reduce using rule 23 (statement_list -> statement .)
    DEC_OP          reduce using rule 23 (statement_list -> statement .)


state 51

    (46) constant -> REAL_NUM .

    SEMICOLON       reduce using rule 46 (constant -> REAL_NUM .)
    PLUS            reduce using rule 46 (constant -> REAL_NUM .)
    MINUS           reduce using rule 46 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 46 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 46 (constant -> REAL_NUM .)
    L_OP            reduce using rule 46 (constant -> REAL_NUM .)
    G_OP            reduce using rule 46 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 46 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 46 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 46 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 46 (constant -> REAL_NUM .)
    COMMA           reduce using rule 46 (constant -> REAL_NUM .)


state 52

    (77) expression -> IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (86) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (87) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (88) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (89) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (90) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (95) unary_expression -> IDENTIFIER . INC_OP
    (96) unary_expression -> IDENTIFIER . DEC_OP
    (103) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> IDENTIFIER . EQUAL expression
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 77 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 77 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 77 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 77 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 77 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 77 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 77 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 77 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 77 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 77 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 77 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 77 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 77 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 77 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 77 (expression -> IDENTIFIER .)
    ADD_ASSIGN      shift and go to state 101
    SUB_ASSIGN      shift and go to state 93
    DIV_ASSIGN      shift and go to state 100
    MUL_ASSIGN      shift and go to state 99
    MOD_ASSIGN      shift and go to state 94
    INC_OP          shift and go to state 97
    DEC_OP          shift and go to state 96
    LEFT_ROUND      shift and go to state 95
    EQUAL           shift and go to state 98
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 53

    (30) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 102


state 54

    (80) expression -> assignment .

    SEMICOLON       reduce using rule 80 (expression -> assignment .)
    PLUS            reduce using rule 80 (expression -> assignment .)
    MINUS           reduce using rule 80 (expression -> assignment .)
    MULTIPLY        reduce using rule 80 (expression -> assignment .)
    DIVIDE          reduce using rule 80 (expression -> assignment .)
    L_OP            reduce using rule 80 (expression -> assignment .)
    G_OP            reduce using rule 80 (expression -> assignment .)
    NE_OP           reduce using rule 80 (expression -> assignment .)
    EQ_OP           reduce using rule 80 (expression -> assignment .)
    GE_OP           reduce using rule 80 (expression -> assignment .)
    LE_OP           reduce using rule 80 (expression -> assignment .)
    AND_OP          reduce using rule 80 (expression -> assignment .)
    OR_OP           reduce using rule 80 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 80 (expression -> assignment .)
    COMMA           reduce using rule 80 (expression -> assignment .)


state 55

    (83) assignment -> equal_or_initialise .

    RIGHT_ROUND     reduce using rule 83 (assignment -> equal_or_initialise .)
    PLUS            reduce using rule 83 (assignment -> equal_or_initialise .)
    MINUS           reduce using rule 83 (assignment -> equal_or_initialise .)
    MULTIPLY        reduce using rule 83 (assignment -> equal_or_initialise .)
    DIVIDE          reduce using rule 83 (assignment -> equal_or_initialise .)
    L_OP            reduce using rule 83 (assignment -> equal_or_initialise .)
    G_OP            reduce using rule 83 (assignment -> equal_or_initialise .)
    NE_OP           reduce using rule 83 (assignment -> equal_or_initialise .)
    EQ_OP           reduce using rule 83 (assignment -> equal_or_initialise .)
    GE_OP           reduce using rule 83 (assignment -> equal_or_initialise .)
    LE_OP           reduce using rule 83 (assignment -> equal_or_initialise .)
    AND_OP          reduce using rule 83 (assignment -> equal_or_initialise .)
    OR_OP           reduce using rule 83 (assignment -> equal_or_initialise .)
    SEMICOLON       reduce using rule 83 (assignment -> equal_or_initialise .)
    COMMA           reduce using rule 83 (assignment -> equal_or_initialise .)


state 56

    (45) constant -> HEX_NUM .

    SEMICOLON       reduce using rule 45 (constant -> HEX_NUM .)
    PLUS            reduce using rule 45 (constant -> HEX_NUM .)
    MINUS           reduce using rule 45 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 45 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 45 (constant -> HEX_NUM .)
    L_OP            reduce using rule 45 (constant -> HEX_NUM .)
    G_OP            reduce using rule 45 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 45 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 45 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 45 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 45 (constant -> HEX_NUM .)
    COMMA           reduce using rule 45 (constant -> HEX_NUM .)


state 57

    (24) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 103


state 58

    (76) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 104
    equal_or_initialise            shift and go to state 55

state 59

    (36) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 105


state 60

    (47) constant -> INT_NUM .

    SEMICOLON       reduce using rule 47 (constant -> INT_NUM .)
    PLUS            reduce using rule 47 (constant -> INT_NUM .)
    MINUS           reduce using rule 47 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 47 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 47 (constant -> INT_NUM .)
    L_OP            reduce using rule 47 (constant -> INT_NUM .)
    G_OP            reduce using rule 47 (constant -> INT_NUM .)
    NE_OP           reduce using rule 47 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 47 (constant -> INT_NUM .)
    GE_OP           reduce using rule 47 (constant -> INT_NUM .)
    LE_OP           reduce using rule 47 (constant -> INT_NUM .)
    AND_OP          reduce using rule 47 (constant -> INT_NUM .)
    OR_OP           reduce using rule 47 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 47 (constant -> INT_NUM .)
    COMMA           reduce using rule 47 (constant -> INT_NUM .)


state 61

    (35) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 106


state 62

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    equal_or_initialise            shift and go to state 55
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63

state 63

    (63) expression_statement -> expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 111
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 64

    (61) array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQUAL           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    INC_OP          reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DEC_OP          reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    PLUS            reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MINUS           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIVIDE          reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    L_OP            reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    G_OP            reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    NE_OP           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQ_OP           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    GE_OP           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    LE_OP           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    AND_OP          reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    OR_OP           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    COMMA           reduce using rule 61 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)


state 65

    (60) array_index -> array_index LEFT_SQUARE INT_NUM . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 122


state 66

    (37) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> RETURN SEMICOLON .)


state 67

    (38) statement -> RETURN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 123
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 68

    (102) unary_expression -> DEC_OP array .

    PLUS            reduce using rule 102 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 102 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 102 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 102 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 102 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 102 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 102 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 102 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 102 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 102 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 102 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 102 (unary_expression -> DEC_OP array .)
    SEMICOLON       reduce using rule 102 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 102 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 102 (unary_expression -> DEC_OP array .)


state 69

    (101) unary_expression -> DEC_OP IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    PLUS            reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 101 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 70

    (100) unary_expression -> INC_OP array .

    PLUS            reduce using rule 100 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 100 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 100 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 100 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 100 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 100 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 100 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 100 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 100 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 100 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 100 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 100 (unary_expression -> INC_OP array .)
    SEMICOLON       reduce using rule 100 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 100 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 100 (unary_expression -> INC_OP array .)


state 71

    (99) unary_expression -> INC_OP IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    PLUS            reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 99 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 72

    (33) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 124
    equal_or_initialise            shift and go to state 55

state 73

    (92) assignment -> array SUB_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 125
    equal_or_initialise            shift and go to state 55

state 74

    (94) assignment -> array MOD_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 126
    equal_or_initialise            shift and go to state 55

state 75

    (98) unary_expression -> array DEC_OP .

    PLUS            reduce using rule 98 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 98 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 98 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 98 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 98 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 98 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 98 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 98 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 98 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 98 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 98 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 98 (unary_expression -> array DEC_OP .)
    SEMICOLON       reduce using rule 98 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 98 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 98 (unary_expression -> array DEC_OP .)


state 76

    (97) unary_expression -> array INC_OP .

    PLUS            reduce using rule 97 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 97 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 97 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 97 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 97 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 97 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 97 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 97 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 97 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 97 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 97 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 97 (unary_expression -> array INC_OP .)
    SEMICOLON       reduce using rule 97 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 97 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 97 (unary_expression -> array INC_OP .)


state 77

    (85) assignment -> array EQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 127
    equal_or_initialise            shift and go to state 55

state 78

    (93) assignment -> array DIV_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 128
    equal_or_initialise            shift and go to state 55

state 79

    (91) assignment -> array ADD_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 129
    equal_or_initialise            shift and go to state 55

state 80

    (56) constant -> MINUS REAL_NUM .

    SEMICOLON       reduce using rule 56 (constant -> MINUS REAL_NUM .)
    PLUS            reduce using rule 56 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 56 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 56 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 56 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 56 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 56 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 56 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 56 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 56 (constant -> MINUS REAL_NUM .)


state 81

    (57) constant -> MINUS INT_NUM .

    SEMICOLON       reduce using rule 57 (constant -> MINUS INT_NUM .)
    PLUS            reduce using rule 57 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 57 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 57 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 57 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 57 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 57 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 57 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 57 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 57 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 57 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 57 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 57 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 57 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 57 (constant -> MINUS INT_NUM .)


state 82

    (58) constant -> MINUS EXP_NUM .

    SEMICOLON       reduce using rule 58 (constant -> MINUS EXP_NUM .)
    PLUS            reduce using rule 58 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 58 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 58 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 58 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 58 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 58 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 58 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 58 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 58 (constant -> MINUS EXP_NUM .)


state 83

    (55) constant -> MINUS HEX_NUM .

    SEMICOLON       reduce using rule 55 (constant -> MINUS HEX_NUM .)
    PLUS            reduce using rule 55 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 55 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 55 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 55 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 55 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 55 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 55 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 55 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 55 (constant -> MINUS HEX_NUM .)


state 84

    (39) statement -> type_specifier declaration_list . SEMICOLON
    (41) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 131
    COMMA           shift and go to state 130


state 85

    (44) declaration -> equal_or_initialise .

    SEMICOLON       reduce using rule 44 (declaration -> equal_or_initialise .)
    COMMA           reduce using rule 44 (declaration -> equal_or_initialise .)


state 86

    (40) declaration_list -> declaration .

    SEMICOLON       reduce using rule 40 (declaration_list -> declaration .)
    COMMA           reduce using rule 40 (declaration_list -> declaration .)


state 87

    (43) declaration -> array .

    SEMICOLON       reduce using rule 43 (declaration -> array .)
    COMMA           reduce using rule 43 (declaration -> array .)


state 88

    (42) declaration -> IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (84) equal_or_initialise -> IDENTIFIER . EQUAL expression
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 42 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 42 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 98
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 89

    (53) constant -> PLUS INT_NUM .

    SEMICOLON       reduce using rule 53 (constant -> PLUS INT_NUM .)
    PLUS            reduce using rule 53 (constant -> PLUS INT_NUM .)
    MINUS           reduce using rule 53 (constant -> PLUS INT_NUM .)
    MULTIPLY        reduce using rule 53 (constant -> PLUS INT_NUM .)
    DIVIDE          reduce using rule 53 (constant -> PLUS INT_NUM .)
    L_OP            reduce using rule 53 (constant -> PLUS INT_NUM .)
    G_OP            reduce using rule 53 (constant -> PLUS INT_NUM .)
    NE_OP           reduce using rule 53 (constant -> PLUS INT_NUM .)
    EQ_OP           reduce using rule 53 (constant -> PLUS INT_NUM .)
    GE_OP           reduce using rule 53 (constant -> PLUS INT_NUM .)
    LE_OP           reduce using rule 53 (constant -> PLUS INT_NUM .)
    AND_OP          reduce using rule 53 (constant -> PLUS INT_NUM .)
    OR_OP           reduce using rule 53 (constant -> PLUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 53 (constant -> PLUS INT_NUM .)
    COMMA           reduce using rule 53 (constant -> PLUS INT_NUM .)


state 90

    (54) constant -> PLUS EXP_NUM .

    SEMICOLON       reduce using rule 54 (constant -> PLUS EXP_NUM .)
    PLUS            reduce using rule 54 (constant -> PLUS EXP_NUM .)
    MINUS           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    MULTIPLY        reduce using rule 54 (constant -> PLUS EXP_NUM .)
    DIVIDE          reduce using rule 54 (constant -> PLUS EXP_NUM .)
    L_OP            reduce using rule 54 (constant -> PLUS EXP_NUM .)
    G_OP            reduce using rule 54 (constant -> PLUS EXP_NUM .)
    NE_OP           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    EQ_OP           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    GE_OP           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    LE_OP           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    AND_OP          reduce using rule 54 (constant -> PLUS EXP_NUM .)
    OR_OP           reduce using rule 54 (constant -> PLUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 54 (constant -> PLUS EXP_NUM .)
    COMMA           reduce using rule 54 (constant -> PLUS EXP_NUM .)


state 91

    (51) constant -> PLUS HEX_NUM .

    SEMICOLON       reduce using rule 51 (constant -> PLUS HEX_NUM .)
    PLUS            reduce using rule 51 (constant -> PLUS HEX_NUM .)
    MINUS           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    MULTIPLY        reduce using rule 51 (constant -> PLUS HEX_NUM .)
    DIVIDE          reduce using rule 51 (constant -> PLUS HEX_NUM .)
    L_OP            reduce using rule 51 (constant -> PLUS HEX_NUM .)
    G_OP            reduce using rule 51 (constant -> PLUS HEX_NUM .)
    NE_OP           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    EQ_OP           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    GE_OP           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    LE_OP           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    AND_OP          reduce using rule 51 (constant -> PLUS HEX_NUM .)
    OR_OP           reduce using rule 51 (constant -> PLUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 51 (constant -> PLUS HEX_NUM .)
    COMMA           reduce using rule 51 (constant -> PLUS HEX_NUM .)


state 92

    (52) constant -> PLUS REAL_NUM .

    SEMICOLON       reduce using rule 52 (constant -> PLUS REAL_NUM .)
    PLUS            reduce using rule 52 (constant -> PLUS REAL_NUM .)
    MINUS           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    MULTIPLY        reduce using rule 52 (constant -> PLUS REAL_NUM .)
    DIVIDE          reduce using rule 52 (constant -> PLUS REAL_NUM .)
    L_OP            reduce using rule 52 (constant -> PLUS REAL_NUM .)
    G_OP            reduce using rule 52 (constant -> PLUS REAL_NUM .)
    NE_OP           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    EQ_OP           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    GE_OP           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    LE_OP           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    AND_OP          reduce using rule 52 (constant -> PLUS REAL_NUM .)
    OR_OP           reduce using rule 52 (constant -> PLUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 52 (constant -> PLUS REAL_NUM .)
    COMMA           reduce using rule 52 (constant -> PLUS REAL_NUM .)


state 93

    (87) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 132
    equal_or_initialise            shift and go to state 55

state 94

    (90) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 133
    equal_or_initialise            shift and go to state 55

state 95

    (103) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (104) function_call_list -> . function_argument
    (105) function_call_list -> . function_call_list COMMA function_argument
    (106) function_argument -> . IDENTIFIER
    (107) function_argument -> . array
    (108) function_argument -> . constant
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM

    IDENTIFIER      shift and go to state 138
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44

    function_call_list             shift and go to state 134
    array                          shift and go to state 137
    function_argument              shift and go to state 135
    constant                       shift and go to state 136

state 96

    (96) unary_expression -> IDENTIFIER DEC_OP .

    PLUS            reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    SEMICOLON       reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 96 (unary_expression -> IDENTIFIER DEC_OP .)


state 97

    (95) unary_expression -> IDENTIFIER INC_OP .

    PLUS            reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    SEMICOLON       reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 95 (unary_expression -> IDENTIFIER INC_OP .)


state 98

    (84) equal_or_initialise -> IDENTIFIER EQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 139
    equal_or_initialise            shift and go to state 55

state 99

    (89) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 140
    equal_or_initialise            shift and go to state 55

state 100

    (88) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 141
    equal_or_initialise            shift and go to state 55

state 101

    (86) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 142
    equal_or_initialise            shift and go to state 55

state 102

    (30) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 47
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 143
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 103

    (24) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 144
    equal_or_initialise            shift and go to state 55

state 104

    (76) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 145
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 105

    (36) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 36 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 36 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 36 (statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 36 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 36 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 36 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 36 (statement -> BREAK SEMICOLON .)


state 106

    (35) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)


state 107

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    VOID            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    $end            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 108

    (22) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 22 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 22 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 22 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 22 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 22 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 22 (statement_list -> statement_list statement .)
    INT             reduce using rule 22 (statement_list -> statement_list statement .)
    LONG            reduce using rule 22 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 22 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 22 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 22 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 22 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 22 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 22 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 22 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 22 (statement_list -> statement_list statement .)
    STRING          reduce using rule 22 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 22 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 22 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 22 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 22 (statement_list -> statement_list statement .)


state 109

    (73) expression -> expression LE_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 146
    equal_or_initialise            shift and go to state 55

state 110

    (67) expression -> expression DIVIDE . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 147
    equal_or_initialise            shift and go to state 55

state 111

    (63) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 63 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 63 (expression_statement -> expression SEMICOLON .)


state 112

    (69) expression -> expression G_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 148
    equal_or_initialise            shift and go to state 55

state 113

    (68) expression -> expression L_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 149
    equal_or_initialise            shift and go to state 55

state 114

    (74) expression -> expression AND_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 150
    equal_or_initialise            shift and go to state 55

state 115

    (72) expression -> expression GE_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 151
    equal_or_initialise            shift and go to state 55

state 116

    (64) expression -> expression PLUS . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 152
    equal_or_initialise            shift and go to state 55

state 117

    (71) expression -> expression EQ_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 153
    equal_or_initialise            shift and go to state 55

state 118

    (66) expression -> expression MULTIPLY . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 154
    equal_or_initialise            shift and go to state 55

state 119

    (65) expression -> expression MINUS . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 155
    equal_or_initialise            shift and go to state 55

state 120

    (70) expression -> expression NE_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 156
    equal_or_initialise            shift and go to state 55

state 121

    (75) expression -> expression OR_OP . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 157
    equal_or_initialise            shift and go to state 55

state 122

    (60) array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQUAL           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    INC_OP          reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DEC_OP          reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    PLUS            reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MINUS           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIVIDE          reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    L_OP            reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    G_OP            reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    NE_OP           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQ_OP           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    GE_OP           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    LE_OP           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    AND_OP          reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    OR_OP           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    COMMA           reduce using rule 60 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)


state 123

    (38) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)


state 124

    (33) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 158
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 125

    (92) assignment -> array SUB_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 92 (assignment -> array SUB_ASSIGN expression .)
    SEMICOLON       reduce using rule 92 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 92 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> array SUB_ASSIGN expression .) ]


state 126

    (94) assignment -> array MOD_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 94 (assignment -> array MOD_ASSIGN expression .)
    SEMICOLON       reduce using rule 94 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 94 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 94 (assignment -> array MOD_ASSIGN expression .) ]


state 127

    (85) assignment -> array EQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 85 (assignment -> array EQUAL expression .)
    SEMICOLON       reduce using rule 85 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 85 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 85 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 85 (assignment -> array EQUAL expression .) ]


state 128

    (93) assignment -> array DIV_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 93 (assignment -> array DIV_ASSIGN expression .)
    SEMICOLON       reduce using rule 93 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 93 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 93 (assignment -> array DIV_ASSIGN expression .) ]


state 129

    (91) assignment -> array ADD_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 91 (assignment -> array ADD_ASSIGN expression .)
    SEMICOLON       reduce using rule 91 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 91 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 91 (assignment -> array ADD_ASSIGN expression .) ]


state 130

    (41) declaration_list -> declaration_list COMMA . declaration
    (42) declaration -> . IDENTIFIER
    (43) declaration -> . array
    (44) declaration -> . equal_or_initialise
    (59) array -> . IDENTIFIER array_index
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 88

    declaration                    shift and go to state 159
    array                          shift and go to state 87
    equal_or_initialise            shift and go to state 85

state 131

    (39) statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SHORT           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    LONG            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SIGNED          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    UNSIGNED        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    STRING          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    PLUS            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)


state 132

    (87) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    SEMICOLON       reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 87 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 133

    (90) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    SEMICOLON       reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 90 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 134

    (103) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (105) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 160
    COMMA           shift and go to state 161


state 135

    (104) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 104 (function_call_list -> function_argument .)
    COMMA           reduce using rule 104 (function_call_list -> function_argument .)


state 136

    (108) function_argument -> constant .

    RIGHT_ROUND     reduce using rule 108 (function_argument -> constant .)
    COMMA           reduce using rule 108 (function_argument -> constant .)


state 137

    (107) function_argument -> array .

    RIGHT_ROUND     reduce using rule 107 (function_argument -> array .)
    COMMA           reduce using rule 107 (function_argument -> array .)


state 138

    (106) function_argument -> IDENTIFIER .
    (59) array -> IDENTIFIER . array_index
    (60) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (61) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 106 (function_argument -> IDENTIFIER .)
    COMMA           reduce using rule 106 (function_argument -> IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 139

    (84) equal_or_initialise -> IDENTIFIER EQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 84 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]


state 140

    (89) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    SEMICOLON       reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 89 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 141

    (88) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    SEMICOLON       reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 88 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 142

    (86) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    SEMICOLON       reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121

  ! PLUS            [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 86 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 143

    (30) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 47
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 162
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 144

    (24) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 163
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 145

    (76) expression -> LEFT_ROUND expression RIGHT_ROUND .

    SEMICOLON       reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PLUS            reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 76 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 146

    (73) expression -> expression LE_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 73 (expression -> expression LE_OP expression .)
    L_OP            reduce using rule 73 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 73 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 73 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 73 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 73 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 73 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 73 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 73 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 73 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! PLUS            [ reduce using rule 73 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 147

    (67) expression -> expression DIVIDE expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 67 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 67 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 67 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 67 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 67 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 67 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 67 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 67 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 67 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 67 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 67 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 67 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 67 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 67 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 67 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 110 ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 148

    (69) expression -> expression G_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 69 (expression -> expression G_OP expression .)
    L_OP            reduce using rule 69 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 69 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 69 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 69 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 69 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 69 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 69 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 69 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 69 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! PLUS            [ reduce using rule 69 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 149

    (68) expression -> expression L_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 68 (expression -> expression L_OP expression .)
    L_OP            reduce using rule 68 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 68 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 68 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 68 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 68 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 68 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 68 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 68 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 68 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 68 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! PLUS            [ reduce using rule 68 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 150

    (74) expression -> expression AND_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 74 (expression -> expression AND_OP expression .)
    AND_OP          reduce using rule 74 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 74 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 74 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 74 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109

  ! PLUS            [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 74 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 151

    (72) expression -> expression GE_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 72 (expression -> expression GE_OP expression .)
    L_OP            reduce using rule 72 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 72 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 72 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 72 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 72 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 72 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 72 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 72 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 72 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 72 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! PLUS            [ reduce using rule 72 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 152

    (64) expression -> expression PLUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 64 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 64 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 64 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 64 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 64 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 64 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 64 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 64 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 64 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 64 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 64 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 64 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 64 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! MULTIPLY        [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 119 ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 153

    (71) expression -> expression EQ_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 71 (expression -> expression EQ_OP expression .)
    NE_OP           reduce using rule 71 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 71 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 71 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 71 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 71 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109

  ! PLUS            [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 71 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 154

    (66) expression -> expression MULTIPLY expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 66 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 66 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 66 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 66 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 66 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 66 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 66 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 118 ]
  ! DIVIDE          [ shift and go to state 110 ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 155

    (65) expression -> expression MINUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 65 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 65 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 65 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 65 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 65 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 65 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 65 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 65 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 65 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 65 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 65 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 65 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 65 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110

  ! MULTIPLY        [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 119 ]
  ! L_OP            [ shift and go to state 113 ]
  ! G_OP            [ shift and go to state 112 ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! GE_OP           [ shift and go to state 115 ]
  ! LE_OP           [ shift and go to state 109 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 156

    (70) expression -> expression NE_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 70 (expression -> expression NE_OP expression .)
    NE_OP           reduce using rule 70 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 70 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 70 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 70 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 70 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109

  ! PLUS            [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 70 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 120 ]
  ! EQ_OP           [ shift and go to state 117 ]
  ! AND_OP          [ shift and go to state 114 ]
  ! OR_OP           [ shift and go to state 121 ]


state 157

    (75) expression -> expression OR_OP expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 75 (expression -> expression OR_OP expression .)
    OR_OP           reduce using rule 75 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 75 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 75 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114

  ! PLUS            [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 75 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 121 ]


state 158

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 165
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 164
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 159

    (41) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 41 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 41 (declaration_list -> declaration_list COMMA declaration .)


state 160

    (103) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    PLUS            reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 103 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 161

    (105) function_call_list -> function_call_list COMMA . function_argument
    (106) function_argument -> . IDENTIFIER
    (107) function_argument -> . array
    (108) function_argument -> . constant
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM

    IDENTIFIER      shift and go to state 138
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44

    array                          shift and go to state 137
    function_argument              shift and go to state 166
    constant                       shift and go to state 136

state 162

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 167
    equal_or_initialise            shift and go to state 55

state 163

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 169
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 168
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 164

    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 165

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 50
    statement_list                 shift and go to state 170
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 166

    (105) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 105 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 105 (function_call_list -> function_call_list COMMA function_argument .)


state 167

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . L_OP expression
    (69) expression -> expression . G_OP expression
    (70) expression -> expression . NE_OP expression
    (71) expression -> expression . EQ_OP expression
    (72) expression -> expression . GE_OP expression
    (73) expression -> expression . LE_OP expression
    (74) expression -> expression . AND_OP expression
    (75) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 171
    PLUS            shift and go to state 116
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 110
    L_OP            shift and go to state 113
    G_OP            shift and go to state 112
    NE_OP           shift and go to state 120
    EQ_OP           shift and go to state 117
    GE_OP           shift and go to state 115
    LE_OP           shift and go to state 109
    AND_OP          shift and go to state 114
    OR_OP           shift and go to state 121


state 168

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 172

  ! ELSE            [ reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 169

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 50
    statement_list                 shift and go to state 173
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 170

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 174
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 171

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 176
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 175
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 172

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 178
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 177
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 173

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 179
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 174

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 175

    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LONG            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRING          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 176

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 50
    statement_list                 shift and go to state 180
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 177

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SHORT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LONG            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DOUBLE          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SIGNED          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    UNSIGNED        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRING          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PLUS            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 178

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 50
    statement_list                 shift and go to state 181
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 179

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            shift and go to state 182

  ! ELSE            [ reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .) ]


state 180

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 183
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 181

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 184
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 182

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 186
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 185
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 183

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 184

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)


state 185

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SHORT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LONG            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DOUBLE          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SIGNED          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    UNSIGNED        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    STRING          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    PLUS            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    MINUS           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    ELSE            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)


state 186

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 50
    statement_list                 shift and go to state 187
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 187

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (62) expression_statement -> . SEMICOLON
    (63) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression L_OP expression
    (69) expression -> . expression G_OP expression
    (70) expression -> . expression NE_OP expression
    (71) expression -> . expression EQ_OP expression
    (72) expression -> . expression GE_OP expression
    (73) expression -> . expression LE_OP expression
    (74) expression -> . expression AND_OP expression
    (75) expression -> . expression OR_OP expression
    (76) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (77) expression -> . IDENTIFIER
    (78) expression -> . array
    (79) expression -> . constant
    (80) expression -> . assignment
    (81) expression -> . unary_expression
    (82) expression -> . function_call
    (59) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (51) constant -> . PLUS HEX_NUM
    (52) constant -> . PLUS REAL_NUM
    (53) constant -> . PLUS INT_NUM
    (54) constant -> . PLUS EXP_NUM
    (55) constant -> . MINUS HEX_NUM
    (56) constant -> . MINUS REAL_NUM
    (57) constant -> . MINUS INT_NUM
    (58) constant -> . MINUS EXP_NUM
    (83) assignment -> . equal_or_initialise
    (85) assignment -> . array EQUAL expression
    (86) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (87) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (88) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (89) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (90) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (91) assignment -> . array ADD_ASSIGN expression
    (92) assignment -> . array SUB_ASSIGN expression
    (93) assignment -> . array DIV_ASSIGN expression
    (94) assignment -> . array MOD_ASSIGN expression
    (95) unary_expression -> . IDENTIFIER INC_OP
    (96) unary_expression -> . IDENTIFIER DEC_OP
    (97) unary_expression -> . array INC_OP
    (98) unary_expression -> . array DEC_OP
    (99) unary_expression -> . INC_OP IDENTIFIER
    (100) unary_expression -> . INC_OP array
    (101) unary_expression -> . DEC_OP IDENTIFIER
    (102) unary_expression -> . DEC_OP array
    (103) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (84) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 188
    IF              shift and go to state 57
    FOR             shift and go to state 53
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 61
    BREAK           shift and go to state 59
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 47
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 58
    IDENTIFIER      shift and go to state 52
    HEX_NUM         shift and go to state 56
    REAL_NUM        shift and go to state 51
    INT_NUM         shift and go to state 60
    CHARACTER       shift and go to state 48
    STRING          shift and go to state 45
    EXP_NUM         shift and go to state 41
    PLUS            shift and go to state 49
    MINUS           shift and go to state 44
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 46
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 54
    function_call                  shift and go to state 38
    statement                      shift and go to state 108
    array                          shift and go to state 43
    expression                     shift and go to state 63
    equal_or_initialise            shift and go to state 55

state 188

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)

