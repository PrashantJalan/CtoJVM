Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    MODULO
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    TILDA
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_declaration
Rule 5     function -> function_definition
Rule 6     function -> declaration_statement
Rule 7     function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 8     function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> VOID
Rule 11    type_specifier -> SHORT
Rule 12    type_specifier -> INT
Rule 13    type_specifier -> LONG
Rule 14    type_specifier -> FLOAT
Rule 15    type_specifier -> DOUBLE
Rule 16    type_specifier -> SIGNED
Rule 17    type_specifier -> UNSIGNED
Rule 18    argument_list -> argument
Rule 19    argument_list -> argument_list COMMA argument
Rule 20    argument -> type_specifier IDENTIFIER
Rule 21    argument -> type_specifier array
Rule 22    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 23    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 24    statement_list -> statement_list statement
Rule 25    statement_list -> statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
Rule 30    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 31    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 32    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 33    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 34    statement -> expression_statement
Rule 35    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 36    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 37    statement -> CONTINUE SEMICOLON
Rule 38    statement -> BREAK SEMICOLON
Rule 39    statement -> RETURN SEMICOLON
Rule 40    statement -> RETURN expression SEMICOLON
Rule 41    statement -> declaration_statement
Rule 42    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 43    declaration_list -> declaration
Rule 44    declaration_list -> declaration_list COMMA declaration
Rule 45    declaration -> IDENTIFIER
Rule 46    declaration -> array
Rule 47    declaration -> declaration_assignment
Rule 48    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 49    constant -> HEX_NUM
Rule 50    constant -> REAL_NUM
Rule 51    constant -> INT_NUM
Rule 52    constant -> CHARACTER
Rule 53    constant -> STRING
Rule 54    constant -> EXP_NUM
Rule 55    constant -> PLUS HEX_NUM
Rule 56    constant -> PLUS REAL_NUM
Rule 57    constant -> PLUS INT_NUM
Rule 58    constant -> PLUS EXP_NUM
Rule 59    constant -> MINUS HEX_NUM
Rule 60    constant -> MINUS REAL_NUM
Rule 61    constant -> MINUS INT_NUM
Rule 62    constant -> MINUS EXP_NUM
Rule 63    array -> IDENTIFIER array_index
Rule 64    array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE
Rule 65    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 66    expression_statement -> SEMICOLON
Rule 67    expression_statement -> expression SEMICOLON
Rule 68    expression -> expression PLUS expression
Rule 69    expression -> expression MINUS expression
Rule 70    expression -> expression MULTIPLY expression
Rule 71    expression -> expression DIVIDE expression
Rule 72    expression -> expression L_OP expression
Rule 73    expression -> expression G_OP expression
Rule 74    expression -> expression NE_OP expression
Rule 75    expression -> expression EQ_OP expression
Rule 76    expression -> expression GE_OP expression
Rule 77    expression -> expression LE_OP expression
Rule 78    expression -> expression AND_OP expression
Rule 79    expression -> expression OR_OP expression
Rule 80    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 81    expression -> IDENTIFIER
Rule 82    expression -> array
Rule 83    expression -> assignment
Rule 84    expression -> unary_expression
Rule 85    expression -> function_call
Rule 86    expression -> constant
Rule 87    assignment -> array EQUAL expression
Rule 88    assignment -> IDENTIFIER EQUAL expression
Rule 89    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 90    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 91    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 92    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 93    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 94    assignment -> array ADD_ASSIGN expression
Rule 95    assignment -> array SUB_ASSIGN expression
Rule 96    assignment -> array DIV_ASSIGN expression
Rule 97    assignment -> array MUL_ASSIGN expression
Rule 98    assignment -> array MOD_ASSIGN expression
Rule 99    unary_expression -> IDENTIFIER INC_OP
Rule 100   unary_expression -> IDENTIFIER DEC_OP
Rule 101   unary_expression -> array INC_OP
Rule 102   unary_expression -> array DEC_OP
Rule 103   unary_expression -> INC_OP IDENTIFIER
Rule 104   unary_expression -> INC_OP array
Rule 105   unary_expression -> DEC_OP IDENTIFIER
Rule 106   unary_expression -> DEC_OP array
Rule 107   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 108   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 109   function_call_list -> function_argument
Rule 110   function_call_list -> function_call_list COMMA function_argument
Rule 111   function_argument -> IDENTIFIER
Rule 112   function_argument -> array
Rule 113   function_argument -> constant

Terminals, with rules where they appear

ADD_ASSIGN           : 89 94
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 78
AUTO                 : 
BREAK                : 38
CASE                 : 
CHAR                 : 9
CHARACTER            : 52
COLON                : 
COMMA                : 19 44 110
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 37
DEC_OP               : 100 102 105 106
DEFAULT              : 
DIVIDE               : 71
DIV_ASSIGN           : 91 96
DO                   : 
DOT                  : 
DOUBLE               : 15
ELLIPSIS             : 
ELSE                 : 28 29 30 31
ENUM                 : 
EQUAL                : 48 87 88
EQ_OP                : 75
EXCLAMATION          : 
EXP_NUM              : 54 58 62
EXTERN               : 
FLOAT                : 14
FOR                  : 32 33
GE_OP                : 76
GOTO                 : 
G_OP                 : 73
HASH                 : 
HEADER               : 
HEX_NUM              : 49 55 59
IDENTIFIER           : 7 8 20 22 23 45 48 63 81 88 89 90 91 92 93 99 100 103 105 107 108 111
IF                   : 26 27 28 29 30 31
INC_OP               : 99 101 103 104
INT                  : 12
INT_NUM              : 51 57 61
LEFT_ASSIGN          : 
LEFT_CURL            : 22 23 26 29 30 31 31 32 35
LEFT_OP              : 
LEFT_ROUND           : 7 8 22 23 26 27 28 29 30 31 32 33 35 36 80 107 108
LEFT_SQUARE          : 64 65
LE_OP                : 77
LONG                 : 13
L_OP                 : 72
MINUS                : 59 60 61 62 69
MODULO               : 
MOD_ASSIGN           : 93 98
MULTIPLY             : 70
MUL_ASSIGN           : 92 97
NE_OP                : 74
OR_ASSIGN            : 
OR_OP                : 79
PIPE                 : 
PLUS                 : 55 56 57 58 68
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 50 56 60
REGISTER             : 
RETURN               : 39 40
RIGHT_ASSIGN         : 
RIGHT_CURL           : 22 23 26 29 30 31 31 32 35
RIGHT_OP             : 
RIGHT_ROUND          : 7 8 22 23 26 27 28 29 30 31 32 33 35 36 80 107 108
RIGHT_SQUARE         : 64 65
SEMICOLON            : 7 8 37 38 39 40 42 66 67
SHORT                : 11
SIGNED               : 16
SIZEOF               : 
STATIC               : 
STRING               : 53
STRUCT               : 
SUB_ASSIGN           : 90 95
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 17
VOID                 : 10
VOLATILE             : 
WHILE                : 35 36
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 18 19
argument_list        : 7 19 22
array                : 21 46 82 87 94 95 96 97 98 101 102 104 106 112
array_index          : 63 64
assignment           : 83
constant             : 86 113
declaration          : 43 44
declaration_assignment : 47
declaration_list     : 42 44
declaration_statement : 6 41
expression           : 26 27 28 29 30 31 32 33 35 36 40 48 64 65 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 87 88 89 90 91 92 93 94 95 96 97 98
expression_statement : 32 32 33 33 34
function             : 2 3
function_argument    : 109 110
function_call        : 85
function_call_list   : 107 110
function_declaration : 4
function_definition  : 5
function_list        : 1 2
program              : 0
statement            : 24 25 27 28 28 29 30 33 36
statement_list       : 22 23 24 26 29 30 31 31 32 35
type_specifier       : 7 8 20 21 22 23 42
unary_expression     : 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function -> . declaration_statement
    (7) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (8) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (22) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (23) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5

    function                       shift and go to state 8
    function_definition            shift and go to state 9
    function_declaration           shift and go to state 10
    function_list                  shift and go to state 11
    program                        shift and go to state 7
    type_specifier                 shift and go to state 4
    declaration_statement          shift and go to state 16

state 1

    (11) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 11 (type_specifier -> SHORT .)


state 2

    (10) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 10 (type_specifier -> VOID .)


state 3

    (9) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 9 (type_specifier -> CHAR .)


state 4

    (7) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (8) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (22) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (23) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (42) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (43) declaration_list -> . declaration
    (44) declaration_list -> . declaration_list COMMA declaration
    (45) declaration -> . IDENTIFIER
    (46) declaration -> . array
    (47) declaration -> . declaration_assignment
    (63) array -> . IDENTIFIER array_index
    (48) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 21

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 5

    (17) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 17 (type_specifier -> UNSIGNED .)


state 6

    (13) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 13 (type_specifier -> LONG .)


state 7

    (0) S' -> program .



state 8

    (3) function_list -> function .

    CHAR            reduce using rule 3 (function_list -> function .)
    VOID            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 9

    (5) function -> function_definition .

    CHAR            reduce using rule 5 (function -> function_definition .)
    VOID            reduce using rule 5 (function -> function_definition .)
    SHORT           reduce using rule 5 (function -> function_definition .)
    INT             reduce using rule 5 (function -> function_definition .)
    LONG            reduce using rule 5 (function -> function_definition .)
    FLOAT           reduce using rule 5 (function -> function_definition .)
    DOUBLE          reduce using rule 5 (function -> function_definition .)
    SIGNED          reduce using rule 5 (function -> function_definition .)
    UNSIGNED        reduce using rule 5 (function -> function_definition .)
    $end            reduce using rule 5 (function -> function_definition .)


state 10

    (4) function -> function_declaration .

    CHAR            reduce using rule 4 (function -> function_declaration .)
    VOID            reduce using rule 4 (function -> function_declaration .)
    SHORT           reduce using rule 4 (function -> function_declaration .)
    INT             reduce using rule 4 (function -> function_declaration .)
    LONG            reduce using rule 4 (function -> function_declaration .)
    FLOAT           reduce using rule 4 (function -> function_declaration .)
    DOUBLE          reduce using rule 4 (function -> function_declaration .)
    SIGNED          reduce using rule 4 (function -> function_declaration .)
    UNSIGNED        reduce using rule 4 (function -> function_declaration .)
    $end            reduce using rule 4 (function -> function_declaration .)


state 11

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function -> . declaration_statement
    (7) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (8) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (22) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (23) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5

    function                       shift and go to state 22
    type_specifier                 shift and go to state 4
    function_declaration           shift and go to state 10
    function_definition            shift and go to state 9
    declaration_statement          shift and go to state 16

state 12

    (12) type_specifier -> INT .

    IDENTIFIER      reduce using rule 12 (type_specifier -> INT .)


state 13

    (15) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 15 (type_specifier -> DOUBLE .)


state 14

    (14) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 14 (type_specifier -> FLOAT .)


state 15

    (16) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 16 (type_specifier -> SIGNED .)


state 16

    (6) function -> declaration_statement .

    CHAR            reduce using rule 6 (function -> declaration_statement .)
    VOID            reduce using rule 6 (function -> declaration_statement .)
    SHORT           reduce using rule 6 (function -> declaration_statement .)
    INT             reduce using rule 6 (function -> declaration_statement .)
    LONG            reduce using rule 6 (function -> declaration_statement .)
    FLOAT           reduce using rule 6 (function -> declaration_statement .)
    DOUBLE          reduce using rule 6 (function -> declaration_statement .)
    SIGNED          reduce using rule 6 (function -> declaration_statement .)
    UNSIGNED        reduce using rule 6 (function -> declaration_statement .)
    $end            reduce using rule 6 (function -> declaration_statement .)


state 17

    (47) declaration -> declaration_assignment .

    SEMICOLON       reduce using rule 47 (declaration -> declaration_assignment .)
    COMMA           reduce using rule 47 (declaration -> declaration_assignment .)


state 18

    (42) declaration_statement -> type_specifier declaration_list . SEMICOLON
    (44) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 23


state 19

    (43) declaration_list -> declaration .

    SEMICOLON       reduce using rule 43 (declaration_list -> declaration .)
    COMMA           reduce using rule 43 (declaration_list -> declaration .)


state 20

    (46) declaration -> array .

    SEMICOLON       reduce using rule 46 (declaration -> array .)
    COMMA           reduce using rule 46 (declaration -> array .)


state 21

    (7) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (8) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND SEMICOLON
    (22) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (23) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (45) declaration -> IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (48) declaration_assignment -> IDENTIFIER . EQUAL expression
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    LEFT_ROUND      shift and go to state 25
    SEMICOLON       reduce using rule 45 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 45 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 22

    (2) function_list -> function_list function .

    CHAR            reduce using rule 2 (function_list -> function_list function .)
    VOID            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 23

    (44) declaration_list -> declaration_list COMMA . declaration
    (45) declaration -> . IDENTIFIER
    (46) declaration -> . array
    (47) declaration -> . declaration_assignment
    (63) array -> . IDENTIFIER array_index
    (48) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration                    shift and go to state 29
    array                          shift and go to state 20

state 24

    (42) declaration_statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SHORT           reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LONG            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SIGNED          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    UNSIGNED        reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    STRING          reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PLUS            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 42 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 25

    (7) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (8) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND SEMICOLON
    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (18) argument_list -> . argument
    (19) argument_list -> . argument_list COMMA argument
    (20) argument -> . type_specifier IDENTIFIER
    (21) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED

    RIGHT_ROUND     shift and go to state 33
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5

    type_specifier                 shift and go to state 31
    argument_list                  shift and go to state 34
    argument                       shift and go to state 32

state 26

    (48) declaration_assignment -> IDENTIFIER EQUAL . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 52

state 27

    (65) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 53

state 28

    (63) array -> IDENTIFIER array_index .
    (64) array_index -> array_index . LEFT_SQUARE expression RIGHT_SQUARE

    EQUAL           reduce using rule 63 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 63 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 63 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 63 (array -> IDENTIFIER array_index .)
    MUL_ASSIGN      reduce using rule 63 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 63 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 63 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 63 (array -> IDENTIFIER array_index .)
    RIGHT_SQUARE    reduce using rule 63 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 63 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 63 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 63 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 63 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 63 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 63 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 63 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 63 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 63 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 63 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 63 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 63 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 63 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 63 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 63 (array -> IDENTIFIER array_index .)
    LEFT_SQUARE     shift and go to state 54


state 29

    (44) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 44 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 44 (declaration_list -> declaration_list COMMA declaration .)


state 30

    (45) declaration -> IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (48) declaration_assignment -> IDENTIFIER . EQUAL expression
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 45 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 45 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 31

    (20) argument -> type_specifier . IDENTIFIER
    (21) argument -> type_specifier . array
    (63) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 55

    array                          shift and go to state 56

state 32

    (18) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 18 (argument_list -> argument .)
    COMMA           reduce using rule 18 (argument_list -> argument .)


state 33

    (8) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . SEMICOLON
    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL

    SEMICOLON       shift and go to state 57
    LEFT_CURL       shift and go to state 58


state 34

    (7) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (19) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 59
    COMMA           shift and go to state 60


state 35

    (86) expression -> constant .

    PLUS            reduce using rule 86 (expression -> constant .)
    MINUS           reduce using rule 86 (expression -> constant .)
    MULTIPLY        reduce using rule 86 (expression -> constant .)
    DIVIDE          reduce using rule 86 (expression -> constant .)
    L_OP            reduce using rule 86 (expression -> constant .)
    G_OP            reduce using rule 86 (expression -> constant .)
    NE_OP           reduce using rule 86 (expression -> constant .)
    EQ_OP           reduce using rule 86 (expression -> constant .)
    GE_OP           reduce using rule 86 (expression -> constant .)
    LE_OP           reduce using rule 86 (expression -> constant .)
    AND_OP          reduce using rule 86 (expression -> constant .)
    OR_OP           reduce using rule 86 (expression -> constant .)
    SEMICOLON       reduce using rule 86 (expression -> constant .)
    COMMA           reduce using rule 86 (expression -> constant .)
    RIGHT_SQUARE    reduce using rule 86 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 86 (expression -> constant .)


state 36

    (84) expression -> unary_expression .

    PLUS            reduce using rule 84 (expression -> unary_expression .)
    MINUS           reduce using rule 84 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 84 (expression -> unary_expression .)
    DIVIDE          reduce using rule 84 (expression -> unary_expression .)
    L_OP            reduce using rule 84 (expression -> unary_expression .)
    G_OP            reduce using rule 84 (expression -> unary_expression .)
    NE_OP           reduce using rule 84 (expression -> unary_expression .)
    EQ_OP           reduce using rule 84 (expression -> unary_expression .)
    GE_OP           reduce using rule 84 (expression -> unary_expression .)
    LE_OP           reduce using rule 84 (expression -> unary_expression .)
    AND_OP          reduce using rule 84 (expression -> unary_expression .)
    OR_OP           reduce using rule 84 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 84 (expression -> unary_expression .)
    COMMA           reduce using rule 84 (expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 84 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 84 (expression -> unary_expression .)


state 37

    (105) unary_expression -> DEC_OP . IDENTIFIER
    (106) unary_expression -> DEC_OP . array
    (63) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 62

    array                          shift and go to state 61

state 38

    (85) expression -> function_call .

    PLUS            reduce using rule 85 (expression -> function_call .)
    MINUS           reduce using rule 85 (expression -> function_call .)
    MULTIPLY        reduce using rule 85 (expression -> function_call .)
    DIVIDE          reduce using rule 85 (expression -> function_call .)
    L_OP            reduce using rule 85 (expression -> function_call .)
    G_OP            reduce using rule 85 (expression -> function_call .)
    NE_OP           reduce using rule 85 (expression -> function_call .)
    EQ_OP           reduce using rule 85 (expression -> function_call .)
    GE_OP           reduce using rule 85 (expression -> function_call .)
    LE_OP           reduce using rule 85 (expression -> function_call .)
    AND_OP          reduce using rule 85 (expression -> function_call .)
    OR_OP           reduce using rule 85 (expression -> function_call .)
    SEMICOLON       reduce using rule 85 (expression -> function_call .)
    COMMA           reduce using rule 85 (expression -> function_call .)
    RIGHT_SQUARE    reduce using rule 85 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 85 (expression -> function_call .)


state 39

    (54) constant -> EXP_NUM .

    SEMICOLON       reduce using rule 54 (constant -> EXP_NUM .)
    PLUS            reduce using rule 54 (constant -> EXP_NUM .)
    MINUS           reduce using rule 54 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 54 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 54 (constant -> EXP_NUM .)
    L_OP            reduce using rule 54 (constant -> EXP_NUM .)
    G_OP            reduce using rule 54 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 54 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 54 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 54 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 54 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 54 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 54 (constant -> EXP_NUM .)
    COMMA           reduce using rule 54 (constant -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 54 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 54 (constant -> EXP_NUM .)


state 40

    (82) expression -> array .
    (87) assignment -> array . EQUAL expression
    (94) assignment -> array . ADD_ASSIGN expression
    (95) assignment -> array . SUB_ASSIGN expression
    (96) assignment -> array . DIV_ASSIGN expression
    (97) assignment -> array . MUL_ASSIGN expression
    (98) assignment -> array . MOD_ASSIGN expression
    (101) unary_expression -> array . INC_OP
    (102) unary_expression -> array . DEC_OP

    PLUS            reduce using rule 82 (expression -> array .)
    MINUS           reduce using rule 82 (expression -> array .)
    MULTIPLY        reduce using rule 82 (expression -> array .)
    DIVIDE          reduce using rule 82 (expression -> array .)
    L_OP            reduce using rule 82 (expression -> array .)
    G_OP            reduce using rule 82 (expression -> array .)
    NE_OP           reduce using rule 82 (expression -> array .)
    EQ_OP           reduce using rule 82 (expression -> array .)
    GE_OP           reduce using rule 82 (expression -> array .)
    LE_OP           reduce using rule 82 (expression -> array .)
    AND_OP          reduce using rule 82 (expression -> array .)
    OR_OP           reduce using rule 82 (expression -> array .)
    SEMICOLON       reduce using rule 82 (expression -> array .)
    COMMA           reduce using rule 82 (expression -> array .)
    RIGHT_SQUARE    reduce using rule 82 (expression -> array .)
    RIGHT_ROUND     reduce using rule 82 (expression -> array .)
    EQUAL           shift and go to state 67
    ADD_ASSIGN      shift and go to state 70
    SUB_ASSIGN      shift and go to state 63
    DIV_ASSIGN      shift and go to state 69
    MUL_ASSIGN      shift and go to state 68
    MOD_ASSIGN      shift and go to state 64
    INC_OP          shift and go to state 66
    DEC_OP          shift and go to state 65


state 41

    (59) constant -> MINUS . HEX_NUM
    (60) constant -> MINUS . REAL_NUM
    (61) constant -> MINUS . INT_NUM
    (62) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 74
    REAL_NUM        shift and go to state 71
    INT_NUM         shift and go to state 72
    EXP_NUM         shift and go to state 73


state 42

    (53) constant -> STRING .

    SEMICOLON       reduce using rule 53 (constant -> STRING .)
    PLUS            reduce using rule 53 (constant -> STRING .)
    MINUS           reduce using rule 53 (constant -> STRING .)
    MULTIPLY        reduce using rule 53 (constant -> STRING .)
    DIVIDE          reduce using rule 53 (constant -> STRING .)
    L_OP            reduce using rule 53 (constant -> STRING .)
    G_OP            reduce using rule 53 (constant -> STRING .)
    NE_OP           reduce using rule 53 (constant -> STRING .)
    EQ_OP           reduce using rule 53 (constant -> STRING .)
    GE_OP           reduce using rule 53 (constant -> STRING .)
    LE_OP           reduce using rule 53 (constant -> STRING .)
    AND_OP          reduce using rule 53 (constant -> STRING .)
    OR_OP           reduce using rule 53 (constant -> STRING .)
    COMMA           reduce using rule 53 (constant -> STRING .)
    RIGHT_SQUARE    reduce using rule 53 (constant -> STRING .)
    RIGHT_ROUND     reduce using rule 53 (constant -> STRING .)


state 43

    (52) constant -> CHARACTER .

    SEMICOLON       reduce using rule 52 (constant -> CHARACTER .)
    PLUS            reduce using rule 52 (constant -> CHARACTER .)
    MINUS           reduce using rule 52 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 52 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 52 (constant -> CHARACTER .)
    L_OP            reduce using rule 52 (constant -> CHARACTER .)
    G_OP            reduce using rule 52 (constant -> CHARACTER .)
    NE_OP           reduce using rule 52 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 52 (constant -> CHARACTER .)
    GE_OP           reduce using rule 52 (constant -> CHARACTER .)
    LE_OP           reduce using rule 52 (constant -> CHARACTER .)
    AND_OP          reduce using rule 52 (constant -> CHARACTER .)
    OR_OP           reduce using rule 52 (constant -> CHARACTER .)
    COMMA           reduce using rule 52 (constant -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 52 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 52 (constant -> CHARACTER .)


state 44

    (55) constant -> PLUS . HEX_NUM
    (56) constant -> PLUS . REAL_NUM
    (57) constant -> PLUS . INT_NUM
    (58) constant -> PLUS . EXP_NUM

    HEX_NUM         shift and go to state 77
    REAL_NUM        shift and go to state 78
    INT_NUM         shift and go to state 75
    EXP_NUM         shift and go to state 76


state 45

    (50) constant -> REAL_NUM .

    SEMICOLON       reduce using rule 50 (constant -> REAL_NUM .)
    PLUS            reduce using rule 50 (constant -> REAL_NUM .)
    MINUS           reduce using rule 50 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 50 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 50 (constant -> REAL_NUM .)
    L_OP            reduce using rule 50 (constant -> REAL_NUM .)
    G_OP            reduce using rule 50 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 50 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 50 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 50 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 50 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 50 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 50 (constant -> REAL_NUM .)
    COMMA           reduce using rule 50 (constant -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 50 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 50 (constant -> REAL_NUM .)


state 46

    (81) expression -> IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (88) assignment -> IDENTIFIER . EQUAL expression
    (89) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (90) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (91) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (92) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (93) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (99) unary_expression -> IDENTIFIER . INC_OP
    (100) unary_expression -> IDENTIFIER . DEC_OP
    (107) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> IDENTIFIER . LEFT_ROUND RIGHT_ROUND
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 81 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 81 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 81 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 81 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 81 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 81 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 81 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 81 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 81 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 81 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 81 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 81 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 81 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 81 (expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 81 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 81 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 84
    ADD_ASSIGN      shift and go to state 86
    SUB_ASSIGN      shift and go to state 79
    DIV_ASSIGN      shift and go to state 87
    MUL_ASSIGN      shift and go to state 85
    MOD_ASSIGN      shift and go to state 80
    INC_OP          shift and go to state 83
    DEC_OP          shift and go to state 82
    LEFT_ROUND      shift and go to state 81
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 47

    (83) expression -> assignment .

    PLUS            reduce using rule 83 (expression -> assignment .)
    MINUS           reduce using rule 83 (expression -> assignment .)
    MULTIPLY        reduce using rule 83 (expression -> assignment .)
    DIVIDE          reduce using rule 83 (expression -> assignment .)
    L_OP            reduce using rule 83 (expression -> assignment .)
    G_OP            reduce using rule 83 (expression -> assignment .)
    NE_OP           reduce using rule 83 (expression -> assignment .)
    EQ_OP           reduce using rule 83 (expression -> assignment .)
    GE_OP           reduce using rule 83 (expression -> assignment .)
    LE_OP           reduce using rule 83 (expression -> assignment .)
    AND_OP          reduce using rule 83 (expression -> assignment .)
    OR_OP           reduce using rule 83 (expression -> assignment .)
    SEMICOLON       reduce using rule 83 (expression -> assignment .)
    COMMA           reduce using rule 83 (expression -> assignment .)
    RIGHT_SQUARE    reduce using rule 83 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 83 (expression -> assignment .)


state 48

    (49) constant -> HEX_NUM .

    SEMICOLON       reduce using rule 49 (constant -> HEX_NUM .)
    PLUS            reduce using rule 49 (constant -> HEX_NUM .)
    MINUS           reduce using rule 49 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 49 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 49 (constant -> HEX_NUM .)
    L_OP            reduce using rule 49 (constant -> HEX_NUM .)
    G_OP            reduce using rule 49 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 49 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 49 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 49 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 49 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 49 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 49 (constant -> HEX_NUM .)
    COMMA           reduce using rule 49 (constant -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 49 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 49 (constant -> HEX_NUM .)


state 49

    (80) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 88

state 50

    (103) unary_expression -> INC_OP . IDENTIFIER
    (104) unary_expression -> INC_OP . array
    (63) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 90

    array                          shift and go to state 89

state 51

    (51) constant -> INT_NUM .

    SEMICOLON       reduce using rule 51 (constant -> INT_NUM .)
    PLUS            reduce using rule 51 (constant -> INT_NUM .)
    MINUS           reduce using rule 51 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 51 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 51 (constant -> INT_NUM .)
    L_OP            reduce using rule 51 (constant -> INT_NUM .)
    G_OP            reduce using rule 51 (constant -> INT_NUM .)
    NE_OP           reduce using rule 51 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 51 (constant -> INT_NUM .)
    GE_OP           reduce using rule 51 (constant -> INT_NUM .)
    LE_OP           reduce using rule 51 (constant -> INT_NUM .)
    AND_OP          reduce using rule 51 (constant -> INT_NUM .)
    OR_OP           reduce using rule 51 (constant -> INT_NUM .)
    COMMA           reduce using rule 51 (constant -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 51 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 51 (constant -> INT_NUM .)


state 52

    (48) declaration_assignment -> IDENTIFIER EQUAL expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 48 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 48 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 53

    (65) array_index -> LEFT_SQUARE expression . RIGHT_SQUARE
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_SQUARE    shift and go to state 103
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 54

    (64) array_index -> array_index LEFT_SQUARE . expression RIGHT_SQUARE
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 104

state 55

    (20) argument -> type_specifier IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 20 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 20 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 56

    (21) argument -> type_specifier array .

    RIGHT_ROUND     reduce using rule 21 (argument -> type_specifier array .)
    COMMA           reduce using rule 21 (argument -> type_specifier array .)


state 57

    (8) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 8 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)


state 58

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 116
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 59

    (7) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL

    SEMICOLON       shift and go to state 118
    LEFT_CURL       shift and go to state 119


state 60

    (19) argument_list -> argument_list COMMA . argument
    (20) argument -> . type_specifier IDENTIFIER
    (21) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 120

state 61

    (106) unary_expression -> DEC_OP array .

    RIGHT_SQUARE    reduce using rule 106 (unary_expression -> DEC_OP array .)
    PLUS            reduce using rule 106 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 106 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 106 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 106 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 106 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 106 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 106 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 106 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 106 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 106 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 106 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 106 (unary_expression -> DEC_OP array .)
    SEMICOLON       reduce using rule 106 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 106 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 106 (unary_expression -> DEC_OP array .)


state 62

    (105) unary_expression -> DEC_OP IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_SQUARE    reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    PLUS            reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 105 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 63

    (95) assignment -> array SUB_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 121

state 64

    (98) assignment -> array MOD_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 122

state 65

    (102) unary_expression -> array DEC_OP .

    RIGHT_SQUARE    reduce using rule 102 (unary_expression -> array DEC_OP .)
    PLUS            reduce using rule 102 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 102 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 102 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 102 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 102 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 102 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 102 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 102 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 102 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 102 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 102 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 102 (unary_expression -> array DEC_OP .)
    SEMICOLON       reduce using rule 102 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 102 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 102 (unary_expression -> array DEC_OP .)


state 66

    (101) unary_expression -> array INC_OP .

    RIGHT_SQUARE    reduce using rule 101 (unary_expression -> array INC_OP .)
    PLUS            reduce using rule 101 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 101 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 101 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 101 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 101 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 101 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 101 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 101 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 101 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 101 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 101 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 101 (unary_expression -> array INC_OP .)
    SEMICOLON       reduce using rule 101 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 101 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 101 (unary_expression -> array INC_OP .)


state 67

    (87) assignment -> array EQUAL . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 123

state 68

    (97) assignment -> array MUL_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 124

state 69

    (96) assignment -> array DIV_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 125

state 70

    (94) assignment -> array ADD_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 71

    (60) constant -> MINUS REAL_NUM .

    SEMICOLON       reduce using rule 60 (constant -> MINUS REAL_NUM .)
    PLUS            reduce using rule 60 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 60 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 60 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 60 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 60 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 60 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 60 (constant -> MINUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 60 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 60 (constant -> MINUS REAL_NUM .)


state 72

    (61) constant -> MINUS INT_NUM .

    SEMICOLON       reduce using rule 61 (constant -> MINUS INT_NUM .)
    PLUS            reduce using rule 61 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 61 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 61 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 61 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 61 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 61 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 61 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 61 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 61 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 61 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 61 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 61 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 61 (constant -> MINUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 61 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 61 (constant -> MINUS INT_NUM .)


state 73

    (62) constant -> MINUS EXP_NUM .

    SEMICOLON       reduce using rule 62 (constant -> MINUS EXP_NUM .)
    PLUS            reduce using rule 62 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 62 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 62 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 62 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 62 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 62 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 62 (constant -> MINUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 62 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 62 (constant -> MINUS EXP_NUM .)


state 74

    (59) constant -> MINUS HEX_NUM .

    SEMICOLON       reduce using rule 59 (constant -> MINUS HEX_NUM .)
    PLUS            reduce using rule 59 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 59 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 59 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 59 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 59 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 59 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 59 (constant -> MINUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 59 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 59 (constant -> MINUS HEX_NUM .)


state 75

    (57) constant -> PLUS INT_NUM .

    SEMICOLON       reduce using rule 57 (constant -> PLUS INT_NUM .)
    PLUS            reduce using rule 57 (constant -> PLUS INT_NUM .)
    MINUS           reduce using rule 57 (constant -> PLUS INT_NUM .)
    MULTIPLY        reduce using rule 57 (constant -> PLUS INT_NUM .)
    DIVIDE          reduce using rule 57 (constant -> PLUS INT_NUM .)
    L_OP            reduce using rule 57 (constant -> PLUS INT_NUM .)
    G_OP            reduce using rule 57 (constant -> PLUS INT_NUM .)
    NE_OP           reduce using rule 57 (constant -> PLUS INT_NUM .)
    EQ_OP           reduce using rule 57 (constant -> PLUS INT_NUM .)
    GE_OP           reduce using rule 57 (constant -> PLUS INT_NUM .)
    LE_OP           reduce using rule 57 (constant -> PLUS INT_NUM .)
    AND_OP          reduce using rule 57 (constant -> PLUS INT_NUM .)
    OR_OP           reduce using rule 57 (constant -> PLUS INT_NUM .)
    COMMA           reduce using rule 57 (constant -> PLUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 57 (constant -> PLUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 57 (constant -> PLUS INT_NUM .)


state 76

    (58) constant -> PLUS EXP_NUM .

    SEMICOLON       reduce using rule 58 (constant -> PLUS EXP_NUM .)
    PLUS            reduce using rule 58 (constant -> PLUS EXP_NUM .)
    MINUS           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    MULTIPLY        reduce using rule 58 (constant -> PLUS EXP_NUM .)
    DIVIDE          reduce using rule 58 (constant -> PLUS EXP_NUM .)
    L_OP            reduce using rule 58 (constant -> PLUS EXP_NUM .)
    G_OP            reduce using rule 58 (constant -> PLUS EXP_NUM .)
    NE_OP           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    EQ_OP           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    GE_OP           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    LE_OP           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    AND_OP          reduce using rule 58 (constant -> PLUS EXP_NUM .)
    OR_OP           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    COMMA           reduce using rule 58 (constant -> PLUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 58 (constant -> PLUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 58 (constant -> PLUS EXP_NUM .)


state 77

    (55) constant -> PLUS HEX_NUM .

    SEMICOLON       reduce using rule 55 (constant -> PLUS HEX_NUM .)
    PLUS            reduce using rule 55 (constant -> PLUS HEX_NUM .)
    MINUS           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    MULTIPLY        reduce using rule 55 (constant -> PLUS HEX_NUM .)
    DIVIDE          reduce using rule 55 (constant -> PLUS HEX_NUM .)
    L_OP            reduce using rule 55 (constant -> PLUS HEX_NUM .)
    G_OP            reduce using rule 55 (constant -> PLUS HEX_NUM .)
    NE_OP           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    EQ_OP           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    GE_OP           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    LE_OP           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    AND_OP          reduce using rule 55 (constant -> PLUS HEX_NUM .)
    OR_OP           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    COMMA           reduce using rule 55 (constant -> PLUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 55 (constant -> PLUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 55 (constant -> PLUS HEX_NUM .)


state 78

    (56) constant -> PLUS REAL_NUM .

    SEMICOLON       reduce using rule 56 (constant -> PLUS REAL_NUM .)
    PLUS            reduce using rule 56 (constant -> PLUS REAL_NUM .)
    MINUS           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    MULTIPLY        reduce using rule 56 (constant -> PLUS REAL_NUM .)
    DIVIDE          reduce using rule 56 (constant -> PLUS REAL_NUM .)
    L_OP            reduce using rule 56 (constant -> PLUS REAL_NUM .)
    G_OP            reduce using rule 56 (constant -> PLUS REAL_NUM .)
    NE_OP           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    EQ_OP           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    GE_OP           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    LE_OP           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    AND_OP          reduce using rule 56 (constant -> PLUS REAL_NUM .)
    OR_OP           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    COMMA           reduce using rule 56 (constant -> PLUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 56 (constant -> PLUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 56 (constant -> PLUS REAL_NUM .)


state 79

    (90) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 127

state 80

    (93) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 128

state 81

    (107) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (108) function_call -> IDENTIFIER LEFT_ROUND . RIGHT_ROUND
    (109) function_call_list -> . function_argument
    (110) function_call_list -> . function_call_list COMMA function_argument
    (111) function_argument -> . IDENTIFIER
    (112) function_argument -> . array
    (113) function_argument -> . constant
    (63) array -> . IDENTIFIER array_index
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_ROUND     shift and go to state 130
    IDENTIFIER      shift and go to state 134
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    function_call_list             shift and go to state 129
    array                          shift and go to state 133
    function_argument              shift and go to state 131
    constant                       shift and go to state 132

state 82

    (100) unary_expression -> IDENTIFIER DEC_OP .

    RIGHT_SQUARE    reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    PLUS            reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    SEMICOLON       reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 100 (unary_expression -> IDENTIFIER DEC_OP .)


state 83

    (99) unary_expression -> IDENTIFIER INC_OP .

    RIGHT_SQUARE    reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    PLUS            reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    SEMICOLON       reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 99 (unary_expression -> IDENTIFIER INC_OP .)


state 84

    (88) assignment -> IDENTIFIER EQUAL . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 135

state 85

    (92) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 136

state 86

    (89) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 137

state 87

    (91) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 138

state 88

    (80) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 139
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 89

    (104) unary_expression -> INC_OP array .

    RIGHT_SQUARE    reduce using rule 104 (unary_expression -> INC_OP array .)
    PLUS            reduce using rule 104 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 104 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 104 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 104 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 104 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 104 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 104 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 104 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 104 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 104 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 104 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 104 (unary_expression -> INC_OP array .)
    SEMICOLON       reduce using rule 104 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 104 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 104 (unary_expression -> INC_OP array .)


state 90

    (103) unary_expression -> INC_OP IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_SQUARE    reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    PLUS            reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 103 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 91

    (77) expression -> expression LE_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 140

state 92

    (71) expression -> expression DIVIDE . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 141

state 93

    (73) expression -> expression G_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 142

state 94

    (72) expression -> expression L_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 143

state 95

    (78) expression -> expression AND_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 144

state 96

    (76) expression -> expression GE_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 145

state 97

    (68) expression -> expression PLUS . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 146

state 98

    (75) expression -> expression EQ_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 147

state 99

    (70) expression -> expression MULTIPLY . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 148

state 100

    (69) expression -> expression MINUS . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 149

state 101

    (74) expression -> expression NE_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 150

state 102

    (79) expression -> expression OR_OP . expression
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 151

state 103

    (65) array_index -> LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 65 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)


state 104

    (64) array_index -> array_index LEFT_SQUARE expression . RIGHT_SQUARE
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_SQUARE    shift and go to state 152
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 105

    (34) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 34 (statement -> expression_statement .)
    IF              reduce using rule 34 (statement -> expression_statement .)
    FOR             reduce using rule 34 (statement -> expression_statement .)
    WHILE           reduce using rule 34 (statement -> expression_statement .)
    CONTINUE        reduce using rule 34 (statement -> expression_statement .)
    BREAK           reduce using rule 34 (statement -> expression_statement .)
    RETURN          reduce using rule 34 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 34 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 34 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 34 (statement -> expression_statement .)
    CHAR            reduce using rule 34 (statement -> expression_statement .)
    VOID            reduce using rule 34 (statement -> expression_statement .)
    SHORT           reduce using rule 34 (statement -> expression_statement .)
    INT             reduce using rule 34 (statement -> expression_statement .)
    LONG            reduce using rule 34 (statement -> expression_statement .)
    FLOAT           reduce using rule 34 (statement -> expression_statement .)
    DOUBLE          reduce using rule 34 (statement -> expression_statement .)
    SIGNED          reduce using rule 34 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 34 (statement -> expression_statement .)
    INC_OP          reduce using rule 34 (statement -> expression_statement .)
    DEC_OP          reduce using rule 34 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 34 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 34 (statement -> expression_statement .)
    INT_NUM         reduce using rule 34 (statement -> expression_statement .)
    CHARACTER       reduce using rule 34 (statement -> expression_statement .)
    STRING          reduce using rule 34 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 34 (statement -> expression_statement .)
    PLUS            reduce using rule 34 (statement -> expression_statement .)
    MINUS           reduce using rule 34 (statement -> expression_statement .)
    ELSE            reduce using rule 34 (statement -> expression_statement .)


state 106

    (39) statement -> RETURN . SEMICOLON
    (40) statement -> RETURN . expression SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    SEMICOLON       shift and go to state 153
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 154

state 107

    (35) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 155


state 108

    (42) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (43) declaration_list -> . declaration
    (44) declaration_list -> . declaration_list COMMA declaration
    (45) declaration -> . IDENTIFIER
    (46) declaration -> . array
    (47) declaration -> . declaration_assignment
    (63) array -> . IDENTIFIER array_index
    (48) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 109

    (66) expression_statement -> SEMICOLON .

    SEMICOLON       reduce using rule 66 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 66 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 66 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 66 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 66 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 66 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 66 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 66 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 66 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 66 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 66 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 66 (expression_statement -> SEMICOLON .)
    RIGHT_CURL      reduce using rule 66 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 66 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 66 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 66 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 66 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 66 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 66 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 66 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 66 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 66 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 66 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 66 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 66 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 66 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 66 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 66 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 66 (expression_statement -> SEMICOLON .)


state 110

    (41) statement -> declaration_statement .

    RIGHT_CURL      reduce using rule 41 (statement -> declaration_statement .)
    IF              reduce using rule 41 (statement -> declaration_statement .)
    FOR             reduce using rule 41 (statement -> declaration_statement .)
    WHILE           reduce using rule 41 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 41 (statement -> declaration_statement .)
    BREAK           reduce using rule 41 (statement -> declaration_statement .)
    RETURN          reduce using rule 41 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 41 (statement -> declaration_statement .)
    LEFT_ROUND      reduce using rule 41 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 41 (statement -> declaration_statement .)
    CHAR            reduce using rule 41 (statement -> declaration_statement .)
    VOID            reduce using rule 41 (statement -> declaration_statement .)
    SHORT           reduce using rule 41 (statement -> declaration_statement .)
    INT             reduce using rule 41 (statement -> declaration_statement .)
    LONG            reduce using rule 41 (statement -> declaration_statement .)
    FLOAT           reduce using rule 41 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 41 (statement -> declaration_statement .)
    SIGNED          reduce using rule 41 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 41 (statement -> declaration_statement .)
    INC_OP          reduce using rule 41 (statement -> declaration_statement .)
    DEC_OP          reduce using rule 41 (statement -> declaration_statement .)
    HEX_NUM         reduce using rule 41 (statement -> declaration_statement .)
    REAL_NUM        reduce using rule 41 (statement -> declaration_statement .)
    INT_NUM         reduce using rule 41 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 41 (statement -> declaration_statement .)
    STRING          reduce using rule 41 (statement -> declaration_statement .)
    EXP_NUM         reduce using rule 41 (statement -> declaration_statement .)
    PLUS            reduce using rule 41 (statement -> declaration_statement .)
    MINUS           reduce using rule 41 (statement -> declaration_statement .)
    ELSE            reduce using rule 41 (statement -> declaration_statement .)


state 111

    (25) statement_list -> statement .

    RIGHT_CURL      reduce using rule 25 (statement_list -> statement .)
    IF              reduce using rule 25 (statement_list -> statement .)
    FOR             reduce using rule 25 (statement_list -> statement .)
    WHILE           reduce using rule 25 (statement_list -> statement .)
    CONTINUE        reduce using rule 25 (statement_list -> statement .)
    BREAK           reduce using rule 25 (statement_list -> statement .)
    RETURN          reduce using rule 25 (statement_list -> statement .)
    SEMICOLON       reduce using rule 25 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 25 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 25 (statement_list -> statement .)
    CHAR            reduce using rule 25 (statement_list -> statement .)
    VOID            reduce using rule 25 (statement_list -> statement .)
    SHORT           reduce using rule 25 (statement_list -> statement .)
    INT             reduce using rule 25 (statement_list -> statement .)
    LONG            reduce using rule 25 (statement_list -> statement .)
    FLOAT           reduce using rule 25 (statement_list -> statement .)
    DOUBLE          reduce using rule 25 (statement_list -> statement .)
    SIGNED          reduce using rule 25 (statement_list -> statement .)
    UNSIGNED        reduce using rule 25 (statement_list -> statement .)
    INC_OP          reduce using rule 25 (statement_list -> statement .)
    DEC_OP          reduce using rule 25 (statement_list -> statement .)
    HEX_NUM         reduce using rule 25 (statement_list -> statement .)
    REAL_NUM        reduce using rule 25 (statement_list -> statement .)
    INT_NUM         reduce using rule 25 (statement_list -> statement .)
    CHARACTER       reduce using rule 25 (statement_list -> statement .)
    STRING          reduce using rule 25 (statement_list -> statement .)
    EXP_NUM         reduce using rule 25 (statement_list -> statement .)
    PLUS            reduce using rule 25 (statement_list -> statement .)
    MINUS           reduce using rule 25 (statement_list -> statement .)


state 112

    (32) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 156


state 113

    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 157


state 114

    (38) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 158


state 115

    (37) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 159


state 116

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 160
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 117

    (67) expression_statement -> expression . SEMICOLON
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 118

    (7) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 7 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 119

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 163
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 120

    (19) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 19 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 19 (argument_list -> argument_list COMMA argument .)


state 121

    (95) assignment -> array SUB_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 95 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 95 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 95 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 95 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 95 (assignment -> array SUB_ASSIGN expression .) ]


state 122

    (98) assignment -> array MOD_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 98 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 98 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 98 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 98 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 98 (assignment -> array MOD_ASSIGN expression .) ]


state 123

    (87) assignment -> array EQUAL expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 87 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 87 (assignment -> array EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 87 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 87 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 87 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 87 (assignment -> array EQUAL expression .) ]


state 124

    (97) assignment -> array MUL_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 97 (assignment -> array MUL_ASSIGN expression .)
    COMMA           reduce using rule 97 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 97 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 97 (assignment -> array MUL_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 97 (assignment -> array MUL_ASSIGN expression .) ]


state 125

    (96) assignment -> array DIV_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 96 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 96 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 96 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 96 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 96 (assignment -> array DIV_ASSIGN expression .) ]


state 126

    (94) assignment -> array ADD_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 94 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 94 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 94 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 94 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 94 (assignment -> array ADD_ASSIGN expression .) ]


state 127

    (90) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 90 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 128

    (93) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 93 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 129

    (107) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (110) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 164
    COMMA           shift and go to state 165


state 130

    (108) function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .

    RIGHT_ROUND     reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    PLUS            reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 108 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)


state 131

    (109) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 109 (function_call_list -> function_argument .)
    COMMA           reduce using rule 109 (function_call_list -> function_argument .)


state 132

    (113) function_argument -> constant .

    RIGHT_ROUND     reduce using rule 113 (function_argument -> constant .)
    COMMA           reduce using rule 113 (function_argument -> constant .)


state 133

    (112) function_argument -> array .

    RIGHT_ROUND     reduce using rule 112 (function_argument -> array .)
    COMMA           reduce using rule 112 (function_argument -> array .)


state 134

    (111) function_argument -> IDENTIFIER .
    (63) array -> IDENTIFIER . array_index
    (64) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (65) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 111 (function_argument -> IDENTIFIER .)
    COMMA           reduce using rule 111 (function_argument -> IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 135

    (88) assignment -> IDENTIFIER EQUAL expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 88 (assignment -> IDENTIFIER EQUAL expression .) ]


state 136

    (92) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 137

    (89) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 89 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 138

    (91) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102

  ! PLUS            [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 91 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 139

    (80) expression -> LEFT_ROUND expression RIGHT_ROUND .

    PLUS            reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 80 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 140

    (77) expression -> expression LE_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    L_OP            reduce using rule 77 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 77 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 77 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 77 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 77 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 77 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 77 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 77 (expression -> expression LE_OP expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 77 (expression -> expression LE_OP expression .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 77 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! PLUS            [ reduce using rule 77 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 141

    (71) expression -> expression DIVIDE expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    PLUS            reduce using rule 71 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 71 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 71 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 71 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 71 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 71 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 71 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 71 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 71 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 71 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 71 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 71 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 71 (expression -> expression DIVIDE expression .)
    RIGHT_SQUARE    reduce using rule 71 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 100 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 142

    (73) expression -> expression G_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    L_OP            reduce using rule 73 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 73 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 73 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 73 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 73 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 73 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 73 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 73 (expression -> expression G_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 73 (expression -> expression G_OP expression .)
    RIGHT_SQUARE    reduce using rule 73 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! PLUS            [ reduce using rule 73 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 143

    (72) expression -> expression L_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    L_OP            reduce using rule 72 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 72 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 72 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 72 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 72 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 72 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 72 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 72 (expression -> expression L_OP expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 72 (expression -> expression L_OP expression .)
    RIGHT_SQUARE    reduce using rule 72 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 72 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! PLUS            [ reduce using rule 72 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 144

    (78) expression -> expression AND_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    AND_OP          reduce using rule 78 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 78 (expression -> expression AND_OP expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 78 (expression -> expression AND_OP expression .)
    RIGHT_SQUARE    reduce using rule 78 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 78 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91

  ! PLUS            [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 78 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 145

    (76) expression -> expression GE_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    L_OP            reduce using rule 76 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 76 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 76 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 76 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 76 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 76 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 76 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 76 (expression -> expression GE_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression GE_OP expression .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 76 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! PLUS            [ reduce using rule 76 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 146

    (68) expression -> expression PLUS expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    PLUS            reduce using rule 68 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 68 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 68 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 68 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 68 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 68 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 68 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 68 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 68 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 68 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 68 (expression -> expression PLUS expression .)
    RIGHT_SQUARE    reduce using rule 68 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 68 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! MULTIPLY        [ reduce using rule 68 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 100 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 147

    (75) expression -> expression EQ_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    NE_OP           reduce using rule 75 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 75 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 75 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 75 (expression -> expression EQ_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 75 (expression -> expression EQ_OP expression .)
    RIGHT_SQUARE    reduce using rule 75 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 75 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91

  ! PLUS            [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 75 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 148

    (70) expression -> expression MULTIPLY expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    PLUS            reduce using rule 70 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 70 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 70 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 70 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 70 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 70 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 70 (expression -> expression MULTIPLY expression .)
    RIGHT_SQUARE    reduce using rule 70 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 100 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 149

    (69) expression -> expression MINUS expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    PLUS            reduce using rule 69 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 69 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 69 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 69 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 69 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 69 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 69 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 69 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 69 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 69 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 69 (expression -> expression MINUS expression .)
    RIGHT_SQUARE    reduce using rule 69 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92

  ! MULTIPLY        [ reduce using rule 69 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 100 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 150

    (74) expression -> expression NE_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    NE_OP           reduce using rule 74 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 74 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 74 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 74 (expression -> expression NE_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 74 (expression -> expression NE_OP expression .)
    RIGHT_SQUARE    reduce using rule 74 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 74 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91

  ! PLUS            [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 74 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 101 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 102 ]


state 151

    (79) expression -> expression OR_OP expression .
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    OR_OP           reduce using rule 79 (expression -> expression OR_OP expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 79 (expression -> expression OR_OP expression .)
    RIGHT_SQUARE    reduce using rule 79 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 79 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95

  ! PLUS            [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 79 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 102 ]


state 152

    (64) array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 64 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)


state 153

    (39) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 39 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 39 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 39 (statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> RETURN SEMICOLON .)


state 154

    (40) statement -> RETURN expression . SEMICOLON
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 166
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 155

    (35) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 167

state 156

    (32) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 168
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 157

    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 169

state 158

    (38) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 38 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 38 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 38 (statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 38 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 38 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 38 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 38 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 38 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 38 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> BREAK SEMICOLON .)


state 159

    (37) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 37 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> CONTINUE SEMICOLON .)


state 160

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    CHAR            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    $end            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 161

    (24) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 24 (statement_list -> statement_list statement .)
    IF              reduce using rule 24 (statement_list -> statement_list statement .)
    FOR             reduce using rule 24 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 24 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 24 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 24 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 24 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 24 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 24 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 24 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 24 (statement_list -> statement_list statement .)
    VOID            reduce using rule 24 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 24 (statement_list -> statement_list statement .)
    INT             reduce using rule 24 (statement_list -> statement_list statement .)
    LONG            reduce using rule 24 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 24 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 24 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 24 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 24 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 24 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 24 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 24 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 24 (statement_list -> statement_list statement .)
    STRING          reduce using rule 24 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 24 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 24 (statement_list -> statement_list statement .)


state 162

    (67) expression_statement -> expression SEMICOLON .

    SEMICOLON       reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    RIGHT_CURL      reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 67 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 67 (expression_statement -> expression SEMICOLON .)


state 163

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 170
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 164

    (107) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    RIGHT_ROUND     reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    PLUS            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 165

    (110) function_call_list -> function_call_list COMMA . function_argument
    (111) function_argument -> . IDENTIFIER
    (112) function_argument -> . array
    (113) function_argument -> . constant
    (63) array -> . IDENTIFIER array_index
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IDENTIFIER      shift and go to state 134
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    array                          shift and go to state 133
    function_argument              shift and go to state 171
    constant                       shift and go to state 132

state 166

    (40) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)


state 167

    (35) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 172
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 168

    (32) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 173
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 169

    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 174
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 170

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    CHAR            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    $end            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 171

    (110) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 110 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 110 (function_call_list -> function_call_list COMMA function_argument .)


state 172

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_CURL       shift and go to state 176
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 175
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 173

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 177

state 174

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_CURL       shift and go to state 179
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 178
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 175

    (36) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 176

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 180
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 177

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (68) expression -> expression . PLUS expression
    (69) expression -> expression . MINUS expression
    (70) expression -> expression . MULTIPLY expression
    (71) expression -> expression . DIVIDE expression
    (72) expression -> expression . L_OP expression
    (73) expression -> expression . G_OP expression
    (74) expression -> expression . NE_OP expression
    (75) expression -> expression . EQ_OP expression
    (76) expression -> expression . GE_OP expression
    (77) expression -> expression . LE_OP expression
    (78) expression -> expression . AND_OP expression
    (79) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 181
    PLUS            shift and go to state 97
    MINUS           shift and go to state 100
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 101
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 102


state 178

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 182

  ! ELSE            [ reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 179

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 183
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 180

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 184
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 181

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_CURL       shift and go to state 186
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 185
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 182

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . LEFT_CURL statement_list RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_CURL       shift and go to state 188
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 187
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 183

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 189
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 184

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 185

    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    VOID            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LONG            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRING          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 186

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 190
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 187

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    VOID            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SHORT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LONG            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DOUBLE          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SIGNED          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    UNSIGNED        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRING          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PLUS            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 188

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 191
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 189

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            shift and go to state 192

  ! ELSE            [ reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .) ]


state 190

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 193
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 191

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 194
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 192

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . LEFT_CURL statement_list RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    LEFT_CURL       shift and go to state 196
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 195
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 193

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 194

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)


state 195

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    VOID            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SHORT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LONG            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DOUBLE          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SIGNED          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    UNSIGNED        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    STRING          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    PLUS            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    MINUS           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)


state 196

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL . statement_list RIGHT_CURL
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 111
    statement_list                 shift and go to state 197
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 197

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list . RIGHT_CURL
    (24) statement_list -> statement_list . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . CONTINUE SEMICOLON
    (38) statement -> . BREAK SEMICOLON
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (66) expression_statement -> . SEMICOLON
    (67) expression_statement -> . expression SEMICOLON
    (42) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (68) expression -> . expression PLUS expression
    (69) expression -> . expression MINUS expression
    (70) expression -> . expression MULTIPLY expression
    (71) expression -> . expression DIVIDE expression
    (72) expression -> . expression L_OP expression
    (73) expression -> . expression G_OP expression
    (74) expression -> . expression NE_OP expression
    (75) expression -> . expression EQ_OP expression
    (76) expression -> . expression GE_OP expression
    (77) expression -> . expression LE_OP expression
    (78) expression -> . expression AND_OP expression
    (79) expression -> . expression OR_OP expression
    (80) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (81) expression -> . IDENTIFIER
    (82) expression -> . array
    (83) expression -> . assignment
    (84) expression -> . unary_expression
    (85) expression -> . function_call
    (86) expression -> . constant
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . VOID
    (11) type_specifier -> . SHORT
    (12) type_specifier -> . INT
    (13) type_specifier -> . LONG
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . DOUBLE
    (16) type_specifier -> . SIGNED
    (17) type_specifier -> . UNSIGNED
    (63) array -> . IDENTIFIER array_index
    (87) assignment -> . array EQUAL expression
    (88) assignment -> . IDENTIFIER EQUAL expression
    (89) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (90) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (91) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (92) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (93) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (94) assignment -> . array ADD_ASSIGN expression
    (95) assignment -> . array SUB_ASSIGN expression
    (96) assignment -> . array DIV_ASSIGN expression
    (97) assignment -> . array MUL_ASSIGN expression
    (98) assignment -> . array MOD_ASSIGN expression
    (99) unary_expression -> . IDENTIFIER INC_OP
    (100) unary_expression -> . IDENTIFIER DEC_OP
    (101) unary_expression -> . array INC_OP
    (102) unary_expression -> . array DEC_OP
    (103) unary_expression -> . INC_OP IDENTIFIER
    (104) unary_expression -> . INC_OP array
    (105) unary_expression -> . DEC_OP IDENTIFIER
    (106) unary_expression -> . DEC_OP array
    (107) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (108) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND
    (49) constant -> . HEX_NUM
    (50) constant -> . REAL_NUM
    (51) constant -> . INT_NUM
    (52) constant -> . CHARACTER
    (53) constant -> . STRING
    (54) constant -> . EXP_NUM
    (55) constant -> . PLUS HEX_NUM
    (56) constant -> . PLUS REAL_NUM
    (57) constant -> . PLUS INT_NUM
    (58) constant -> . PLUS EXP_NUM
    (59) constant -> . MINUS HEX_NUM
    (60) constant -> . MINUS REAL_NUM
    (61) constant -> . MINUS INT_NUM
    (62) constant -> . MINUS EXP_NUM

    RIGHT_CURL      shift and go to state 198
    IF              shift and go to state 113
    FOR             shift and go to state 112
    WHILE           shift and go to state 107
    CONTINUE        shift and go to state 115
    BREAK           shift and go to state 114
    RETURN          shift and go to state 106
    SEMICOLON       shift and go to state 109
    LEFT_ROUND      shift and go to state 49
    IDENTIFIER      shift and go to state 46
    CHAR            shift and go to state 3
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 5
    INC_OP          shift and go to state 50
    DEC_OP          shift and go to state 37
    HEX_NUM         shift and go to state 48
    REAL_NUM        shift and go to state 45
    INT_NUM         shift and go to state 51
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    expression_statement           shift and go to state 105
    type_specifier                 shift and go to state 108
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 47
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 110
    statement                      shift and go to state 161
    array                          shift and go to state 40
    expression                     shift and go to state 117

state 198

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    VOID            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    PLUS            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    MINUS           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)

