Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    TILDA
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_definition
Rule 5     function -> function_declaration
Rule 6     function -> declaration_statement
Rule 7     type_specifier -> CHAR
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> SHORT
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> LONG
Rule 12    type_specifier -> FLOAT
Rule 13    type_specifier -> DOUBLE
Rule 14    type_specifier -> SIGNED
Rule 15    type_specifier -> UNSIGNED
Rule 16    argument_list -> argument
Rule 17    argument_list -> argument_list COMMA argument
Rule 18    argument -> type_specifier IDENTIFIER
Rule 19    argument -> type_specifier array
Rule 20    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 21    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
Rule 22    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
Rule 23    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
Rule 24    statement_list -> statement_list statement
Rule 25    statement_list -> statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
Rule 30    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
Rule 31    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
Rule 32    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
Rule 33    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 34    statement -> expression_statement
Rule 35    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 36    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 37    statement -> RETURN SEMICOLON
Rule 38    statement -> RETURN expression SEMICOLON
Rule 39    statement -> declaration_statement
Rule 40    statement -> CONTINUE SEMICOLON
Rule 41    statement -> BREAK SEMICOLON
Rule 42    statement -> PRINT IDENTIFIER SEMICOLON
Rule 43    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 44    declaration_list -> declaration
Rule 45    declaration_list -> declaration_list COMMA declaration
Rule 46    declaration -> IDENTIFIER
Rule 47    declaration -> array
Rule 48    declaration -> declaration_assignment
Rule 49    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 50    constant -> HEX_NUM
Rule 51    constant -> REAL_NUM
Rule 52    constant -> INT_NUM
Rule 53    constant -> CHARACTER
Rule 54    constant -> STRING
Rule 55    constant -> EXP_NUM
Rule 56    constant -> PLUS HEX_NUM
Rule 57    constant -> PLUS REAL_NUM
Rule 58    constant -> PLUS INT_NUM
Rule 59    constant -> PLUS EXP_NUM
Rule 60    constant -> MINUS HEX_NUM
Rule 61    constant -> MINUS REAL_NUM
Rule 62    constant -> MINUS INT_NUM
Rule 63    constant -> MINUS EXP_NUM
Rule 64    array -> IDENTIFIER array_index
Rule 65    array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE
Rule 66    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 67    expression_statement -> SEMICOLON
Rule 68    expression_statement -> expression SEMICOLON
Rule 69    expression -> expression PLUS expression
Rule 70    expression -> expression MINUS expression
Rule 71    expression -> expression MULTIPLY expression
Rule 72    expression -> expression DIVIDE expression
Rule 73    expression -> expression L_OP expression
Rule 74    expression -> expression G_OP expression
Rule 75    expression -> expression NE_OP expression
Rule 76    expression -> expression EQ_OP expression
Rule 77    expression -> expression GE_OP expression
Rule 78    expression -> expression LE_OP expression
Rule 79    expression -> expression AND_OP expression
Rule 80    expression -> expression OR_OP expression
Rule 81    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 82    expression -> IDENTIFIER
Rule 83    expression -> array
Rule 84    expression -> constant
Rule 85    expression -> assignment
Rule 86    expression -> unary_expression
Rule 87    expression -> function_call
Rule 88    expression -> expression MODULO expression
Rule 89    assignment -> array EQUAL expression
Rule 90    assignment -> IDENTIFIER EQUAL expression
Rule 91    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 92    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 93    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 94    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 95    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 96    assignment -> array ADD_ASSIGN expression
Rule 97    assignment -> array SUB_ASSIGN expression
Rule 98    assignment -> array DIV_ASSIGN expression
Rule 99    assignment -> array MUL_ASSIGN expression
Rule 100   assignment -> array MOD_ASSIGN expression
Rule 101   unary_expression -> IDENTIFIER INC_OP
Rule 102   unary_expression -> IDENTIFIER DEC_OP
Rule 103   unary_expression -> array INC_OP
Rule 104   unary_expression -> array DEC_OP
Rule 105   unary_expression -> INC_OP IDENTIFIER
Rule 106   unary_expression -> INC_OP array
Rule 107   unary_expression -> DEC_OP IDENTIFIER
Rule 108   unary_expression -> DEC_OP array
Rule 109   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 110   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 111   function_call_list -> function_argument
Rule 112   function_call_list -> function_call_list COMMA function_argument
Rule 113   function_argument -> IDENTIFIER
Rule 114   function_argument -> array
Rule 115   function_argument -> constant
Rule 116   left_curl -> LEFT_CURL
Rule 117   right_curl -> RIGHT_CURL

Terminals, with rules where they appear

ADD_ASSIGN           : 91 96
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 79
AUTO                 : 
BREAK                : 41
CASE                 : 
CHAR                 : 7
CHARACTER            : 53
COLON                : 
COMMA                : 17 45 112
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 40
DEC_OP               : 102 104 107 108
DEFAULT              : 
DIVIDE               : 72
DIV_ASSIGN           : 93 98
DO                   : 
DOT                  : 
DOUBLE               : 13
ELLIPSIS             : 
ELSE                 : 28 29 30 31
ENUM                 : 
EQUAL                : 49 89 90
EQ_OP                : 76
EXCLAMATION          : 
EXP_NUM              : 55 59 63
EXTERN               : 
FLOAT                : 12
FOR                  : 32 33
GE_OP                : 77
GOTO                 : 
G_OP                 : 74
HASH                 : 
HEADER               : 
HEX_NUM              : 50 56 60
IDENTIFIER           : 18 20 21 22 23 42 46 49 64 82 90 91 92 93 94 95 101 102 105 107 109 110 113
IF                   : 26 27 28 29 30 31
INC_OP               : 101 103 105 106
INT                  : 10
INT_NUM              : 52 58 62
LEFT_ASSIGN          : 
LEFT_CURL            : 116
LEFT_OP              : 
LEFT_ROUND           : 20 21 22 23 26 27 28 29 30 31 32 33 35 36 81 109 110
LEFT_SQUARE          : 65 66
LE_OP                : 78
LONG                 : 11
L_OP                 : 73
MINUS                : 60 61 62 63 70
MODULO               : 88
MOD_ASSIGN           : 95 100
MULTIPLY             : 71
MUL_ASSIGN           : 94 99
NE_OP                : 75
OR_ASSIGN            : 
OR_OP                : 80
PIPE                 : 
PLUS                 : 56 57 58 59 69
POWER                : 
PRINT                : 42
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 51 57 61
REGISTER             : 
RETURN               : 37 38
RIGHT_ASSIGN         : 
RIGHT_CURL           : 117
RIGHT_OP             : 
RIGHT_ROUND          : 20 21 22 23 26 27 28 29 30 31 32 33 35 36 81 109 110
RIGHT_SQUARE         : 65 66
SEMICOLON            : 20 21 37 38 40 41 42 43 67 68
SHORT                : 9
SIGNED               : 14
SIZEOF               : 
STATIC               : 
STRING               : 54
STRUCT               : 
SUB_ASSIGN           : 92 97
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 15
VOID                 : 8
VOLATILE             : 
WHILE                : 35 36
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 16 17
argument_list        : 17 20 22
array                : 19 47 83 89 96 97 98 99 100 103 104 106 108 114
array_index          : 64 65
assignment           : 85
constant             : 84 115
declaration          : 44 45
declaration_assignment : 48
declaration_list     : 43 45
declaration_statement : 6 39
expression           : 26 27 28 29 30 31 32 33 35 36 38 49 65 66 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 88 88 89 90 91 92 93 94 95 96 97 98 99 100
expression_statement : 32 32 33 33 34
function             : 2 3
function_argument    : 111 112
function_call        : 87
function_call_list   : 109 112
function_declaration : 5
function_definition  : 4
function_list        : 1 2
left_curl            : 22 23 26 29 30 31 31 32 35
program              : 0
right_curl           : 22 23 26 29 30 31 31 32 35
statement            : 24 25 27 28 28 29 30 33 36
statement_list       : 22 23 24 26 29 30 31 31 32 35
type_specifier       : 18 19 20 21 22 23 43
unary_expression     : 86

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (22) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (23) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    function                       shift and go to state 8
    function_definition            shift and go to state 9
    function_declaration           shift and go to state 10
    function_list                  shift and go to state 11
    program                        shift and go to state 7
    type_specifier                 shift and go to state 5
    declaration_statement          shift and go to state 16

state 1

    (9) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 9 (type_specifier -> SHORT .)


state 2

    (8) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 8 (type_specifier -> VOID .)


state 3

    (15) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 15 (type_specifier -> UNSIGNED .)


state 4

    (7) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 7 (type_specifier -> CHAR .)


state 5

    (22) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (23) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (43) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (44) declaration_list -> . declaration
    (45) declaration_list -> . declaration_list COMMA declaration
    (46) declaration -> . IDENTIFIER
    (47) declaration -> . array
    (48) declaration -> . declaration_assignment
    (64) array -> . IDENTIFIER array_index
    (49) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 21

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 6

    (11) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 11 (type_specifier -> LONG .)


state 7

    (0) S' -> program .



state 8

    (3) function_list -> function .

    CHAR            reduce using rule 3 (function_list -> function .)
    VOID            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 9

    (4) function -> function_definition .

    CHAR            reduce using rule 4 (function -> function_definition .)
    VOID            reduce using rule 4 (function -> function_definition .)
    SHORT           reduce using rule 4 (function -> function_definition .)
    INT             reduce using rule 4 (function -> function_definition .)
    LONG            reduce using rule 4 (function -> function_definition .)
    FLOAT           reduce using rule 4 (function -> function_definition .)
    DOUBLE          reduce using rule 4 (function -> function_definition .)
    SIGNED          reduce using rule 4 (function -> function_definition .)
    UNSIGNED        reduce using rule 4 (function -> function_definition .)
    $end            reduce using rule 4 (function -> function_definition .)


state 10

    (5) function -> function_declaration .

    CHAR            reduce using rule 5 (function -> function_declaration .)
    VOID            reduce using rule 5 (function -> function_declaration .)
    SHORT           reduce using rule 5 (function -> function_declaration .)
    INT             reduce using rule 5 (function -> function_declaration .)
    LONG            reduce using rule 5 (function -> function_declaration .)
    FLOAT           reduce using rule 5 (function -> function_declaration .)
    DOUBLE          reduce using rule 5 (function -> function_declaration .)
    SIGNED          reduce using rule 5 (function -> function_declaration .)
    UNSIGNED        reduce using rule 5 (function -> function_declaration .)
    $end            reduce using rule 5 (function -> function_declaration .)


state 11

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (22) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (23) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    function                       shift and go to state 22
    type_specifier                 shift and go to state 5
    function_declaration           shift and go to state 10
    function_definition            shift and go to state 9
    declaration_statement          shift and go to state 16

state 12

    (10) type_specifier -> INT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> INT .)


state 13

    (13) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 13 (type_specifier -> DOUBLE .)


state 14

    (12) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 12 (type_specifier -> FLOAT .)


state 15

    (14) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 14 (type_specifier -> SIGNED .)


state 16

    (6) function -> declaration_statement .

    CHAR            reduce using rule 6 (function -> declaration_statement .)
    VOID            reduce using rule 6 (function -> declaration_statement .)
    SHORT           reduce using rule 6 (function -> declaration_statement .)
    INT             reduce using rule 6 (function -> declaration_statement .)
    LONG            reduce using rule 6 (function -> declaration_statement .)
    FLOAT           reduce using rule 6 (function -> declaration_statement .)
    DOUBLE          reduce using rule 6 (function -> declaration_statement .)
    SIGNED          reduce using rule 6 (function -> declaration_statement .)
    UNSIGNED        reduce using rule 6 (function -> declaration_statement .)
    $end            reduce using rule 6 (function -> declaration_statement .)


state 17

    (48) declaration -> declaration_assignment .

    SEMICOLON       reduce using rule 48 (declaration -> declaration_assignment .)
    COMMA           reduce using rule 48 (declaration -> declaration_assignment .)


state 18

    (43) declaration_statement -> type_specifier declaration_list . SEMICOLON
    (45) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 23


state 19

    (44) declaration_list -> declaration .

    SEMICOLON       reduce using rule 44 (declaration_list -> declaration .)
    COMMA           reduce using rule 44 (declaration_list -> declaration .)


state 20

    (47) declaration -> array .

    SEMICOLON       reduce using rule 47 (declaration -> array .)
    COMMA           reduce using rule 47 (declaration -> array .)


state 21

    (22) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (23) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND SEMICOLON
    (46) declaration -> IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (49) declaration_assignment -> IDENTIFIER . EQUAL expression
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    LEFT_ROUND      shift and go to state 25
    SEMICOLON       reduce using rule 46 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 46 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 22

    (2) function_list -> function_list function .

    CHAR            reduce using rule 2 (function_list -> function_list function .)
    VOID            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 23

    (45) declaration_list -> declaration_list COMMA . declaration
    (46) declaration -> . IDENTIFIER
    (47) declaration -> . array
    (48) declaration -> . declaration_assignment
    (64) array -> . IDENTIFIER array_index
    (49) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration                    shift and go to state 29
    array                          shift and go to state 20

state 24

    (43) declaration_statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PRINT           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SHORT           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LONG            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SIGNED          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    UNSIGNED        reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    STRING          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PLUS            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 43 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 25

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND left_curl statement_list right_curl
    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (21) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND SEMICOLON
    (16) argument_list -> . argument
    (17) argument_list -> . argument_list COMMA argument
    (18) argument -> . type_specifier IDENTIFIER
    (19) argument -> . type_specifier array
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    RIGHT_ROUND     shift and go to state 33
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 32
    argument_list                  shift and go to state 34

state 26

    (49) declaration_assignment -> IDENTIFIER EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 51

state 27

    (66) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 53

state 28

    (64) array -> IDENTIFIER array_index .
    (65) array_index -> array_index . LEFT_SQUARE expression RIGHT_SQUARE

    EQUAL           reduce using rule 64 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 64 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 64 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 64 (array -> IDENTIFIER array_index .)
    MUL_ASSIGN      reduce using rule 64 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 64 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 64 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 64 (array -> IDENTIFIER array_index .)
    RIGHT_SQUARE    reduce using rule 64 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 64 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 64 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 64 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 64 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 64 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 64 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 64 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 64 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 64 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 64 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 64 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 64 (array -> IDENTIFIER array_index .)
    MODULO          reduce using rule 64 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 64 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 64 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 64 (array -> IDENTIFIER array_index .)
    LEFT_SQUARE     shift and go to state 54


state 29

    (45) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 45 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 45 (declaration_list -> declaration_list COMMA declaration .)


state 30

    (46) declaration -> IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (49) declaration_assignment -> IDENTIFIER . EQUAL expression
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 46 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 46 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 31

    (18) argument -> type_specifier . IDENTIFIER
    (19) argument -> type_specifier . array
    (64) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 55

    array                          shift and go to state 56

state 32

    (16) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 16 (argument_list -> argument .)
    COMMA           reduce using rule 16 (argument_list -> argument .)


state 33

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . left_curl statement_list right_curl
    (21) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . SEMICOLON
    (116) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 57
    LEFT_CURL       shift and go to state 58

    left_curl                      shift and go to state 59

state 34

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND left_curl statement_list right_curl
    (20) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (17) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 60
    COMMA           shift and go to state 61


state 35

    (84) expression -> constant .

    PLUS            reduce using rule 84 (expression -> constant .)
    MINUS           reduce using rule 84 (expression -> constant .)
    MULTIPLY        reduce using rule 84 (expression -> constant .)
    DIVIDE          reduce using rule 84 (expression -> constant .)
    L_OP            reduce using rule 84 (expression -> constant .)
    G_OP            reduce using rule 84 (expression -> constant .)
    NE_OP           reduce using rule 84 (expression -> constant .)
    EQ_OP           reduce using rule 84 (expression -> constant .)
    GE_OP           reduce using rule 84 (expression -> constant .)
    LE_OP           reduce using rule 84 (expression -> constant .)
    AND_OP          reduce using rule 84 (expression -> constant .)
    OR_OP           reduce using rule 84 (expression -> constant .)
    MODULO          reduce using rule 84 (expression -> constant .)
    SEMICOLON       reduce using rule 84 (expression -> constant .)
    COMMA           reduce using rule 84 (expression -> constant .)
    RIGHT_SQUARE    reduce using rule 84 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 84 (expression -> constant .)


state 36

    (86) expression -> unary_expression .

    PLUS            reduce using rule 86 (expression -> unary_expression .)
    MINUS           reduce using rule 86 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 86 (expression -> unary_expression .)
    DIVIDE          reduce using rule 86 (expression -> unary_expression .)
    L_OP            reduce using rule 86 (expression -> unary_expression .)
    G_OP            reduce using rule 86 (expression -> unary_expression .)
    NE_OP           reduce using rule 86 (expression -> unary_expression .)
    EQ_OP           reduce using rule 86 (expression -> unary_expression .)
    GE_OP           reduce using rule 86 (expression -> unary_expression .)
    LE_OP           reduce using rule 86 (expression -> unary_expression .)
    AND_OP          reduce using rule 86 (expression -> unary_expression .)
    OR_OP           reduce using rule 86 (expression -> unary_expression .)
    MODULO          reduce using rule 86 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 86 (expression -> unary_expression .)
    COMMA           reduce using rule 86 (expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 86 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 86 (expression -> unary_expression .)


state 37

    (107) unary_expression -> DEC_OP . IDENTIFIER
    (108) unary_expression -> DEC_OP . array
    (64) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 63

    array                          shift and go to state 62

state 38

    (87) expression -> function_call .

    PLUS            reduce using rule 87 (expression -> function_call .)
    MINUS           reduce using rule 87 (expression -> function_call .)
    MULTIPLY        reduce using rule 87 (expression -> function_call .)
    DIVIDE          reduce using rule 87 (expression -> function_call .)
    L_OP            reduce using rule 87 (expression -> function_call .)
    G_OP            reduce using rule 87 (expression -> function_call .)
    NE_OP           reduce using rule 87 (expression -> function_call .)
    EQ_OP           reduce using rule 87 (expression -> function_call .)
    GE_OP           reduce using rule 87 (expression -> function_call .)
    LE_OP           reduce using rule 87 (expression -> function_call .)
    AND_OP          reduce using rule 87 (expression -> function_call .)
    OR_OP           reduce using rule 87 (expression -> function_call .)
    MODULO          reduce using rule 87 (expression -> function_call .)
    SEMICOLON       reduce using rule 87 (expression -> function_call .)
    COMMA           reduce using rule 87 (expression -> function_call .)
    RIGHT_SQUARE    reduce using rule 87 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 87 (expression -> function_call .)


state 39

    (55) constant -> EXP_NUM .

    SEMICOLON       reduce using rule 55 (constant -> EXP_NUM .)
    PLUS            reduce using rule 55 (constant -> EXP_NUM .)
    MINUS           reduce using rule 55 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 55 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 55 (constant -> EXP_NUM .)
    L_OP            reduce using rule 55 (constant -> EXP_NUM .)
    G_OP            reduce using rule 55 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 55 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 55 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 55 (constant -> EXP_NUM .)
    MODULO          reduce using rule 55 (constant -> EXP_NUM .)
    COMMA           reduce using rule 55 (constant -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 55 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 55 (constant -> EXP_NUM .)


state 40

    (83) expression -> array .
    (89) assignment -> array . EQUAL expression
    (96) assignment -> array . ADD_ASSIGN expression
    (97) assignment -> array . SUB_ASSIGN expression
    (98) assignment -> array . DIV_ASSIGN expression
    (99) assignment -> array . MUL_ASSIGN expression
    (100) assignment -> array . MOD_ASSIGN expression
    (103) unary_expression -> array . INC_OP
    (104) unary_expression -> array . DEC_OP

    PLUS            reduce using rule 83 (expression -> array .)
    MINUS           reduce using rule 83 (expression -> array .)
    MULTIPLY        reduce using rule 83 (expression -> array .)
    DIVIDE          reduce using rule 83 (expression -> array .)
    L_OP            reduce using rule 83 (expression -> array .)
    G_OP            reduce using rule 83 (expression -> array .)
    NE_OP           reduce using rule 83 (expression -> array .)
    EQ_OP           reduce using rule 83 (expression -> array .)
    GE_OP           reduce using rule 83 (expression -> array .)
    LE_OP           reduce using rule 83 (expression -> array .)
    AND_OP          reduce using rule 83 (expression -> array .)
    OR_OP           reduce using rule 83 (expression -> array .)
    MODULO          reduce using rule 83 (expression -> array .)
    SEMICOLON       reduce using rule 83 (expression -> array .)
    COMMA           reduce using rule 83 (expression -> array .)
    RIGHT_SQUARE    reduce using rule 83 (expression -> array .)
    RIGHT_ROUND     reduce using rule 83 (expression -> array .)
    EQUAL           shift and go to state 68
    ADD_ASSIGN      shift and go to state 71
    SUB_ASSIGN      shift and go to state 64
    DIV_ASSIGN      shift and go to state 70
    MUL_ASSIGN      shift and go to state 69
    MOD_ASSIGN      shift and go to state 65
    INC_OP          shift and go to state 67
    DEC_OP          shift and go to state 66


state 41

    (60) constant -> MINUS . HEX_NUM
    (61) constant -> MINUS . REAL_NUM
    (62) constant -> MINUS . INT_NUM
    (63) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 75
    REAL_NUM        shift and go to state 72
    INT_NUM         shift and go to state 73
    EXP_NUM         shift and go to state 74


state 42

    (54) constant -> STRING .

    SEMICOLON       reduce using rule 54 (constant -> STRING .)
    PLUS            reduce using rule 54 (constant -> STRING .)
    MINUS           reduce using rule 54 (constant -> STRING .)
    MULTIPLY        reduce using rule 54 (constant -> STRING .)
    DIVIDE          reduce using rule 54 (constant -> STRING .)
    L_OP            reduce using rule 54 (constant -> STRING .)
    G_OP            reduce using rule 54 (constant -> STRING .)
    NE_OP           reduce using rule 54 (constant -> STRING .)
    EQ_OP           reduce using rule 54 (constant -> STRING .)
    GE_OP           reduce using rule 54 (constant -> STRING .)
    LE_OP           reduce using rule 54 (constant -> STRING .)
    AND_OP          reduce using rule 54 (constant -> STRING .)
    OR_OP           reduce using rule 54 (constant -> STRING .)
    MODULO          reduce using rule 54 (constant -> STRING .)
    COMMA           reduce using rule 54 (constant -> STRING .)
    RIGHT_SQUARE    reduce using rule 54 (constant -> STRING .)
    RIGHT_ROUND     reduce using rule 54 (constant -> STRING .)


state 43

    (53) constant -> CHARACTER .

    SEMICOLON       reduce using rule 53 (constant -> CHARACTER .)
    PLUS            reduce using rule 53 (constant -> CHARACTER .)
    MINUS           reduce using rule 53 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 53 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 53 (constant -> CHARACTER .)
    L_OP            reduce using rule 53 (constant -> CHARACTER .)
    G_OP            reduce using rule 53 (constant -> CHARACTER .)
    NE_OP           reduce using rule 53 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 53 (constant -> CHARACTER .)
    GE_OP           reduce using rule 53 (constant -> CHARACTER .)
    LE_OP           reduce using rule 53 (constant -> CHARACTER .)
    AND_OP          reduce using rule 53 (constant -> CHARACTER .)
    OR_OP           reduce using rule 53 (constant -> CHARACTER .)
    MODULO          reduce using rule 53 (constant -> CHARACTER .)
    COMMA           reduce using rule 53 (constant -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 53 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 53 (constant -> CHARACTER .)


state 44

    (56) constant -> PLUS . HEX_NUM
    (57) constant -> PLUS . REAL_NUM
    (58) constant -> PLUS . INT_NUM
    (59) constant -> PLUS . EXP_NUM

    HEX_NUM         shift and go to state 78
    REAL_NUM        shift and go to state 79
    INT_NUM         shift and go to state 76
    EXP_NUM         shift and go to state 77


state 45

    (82) expression -> IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (90) assignment -> IDENTIFIER . EQUAL expression
    (91) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (92) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (93) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (94) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (95) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (101) unary_expression -> IDENTIFIER . INC_OP
    (102) unary_expression -> IDENTIFIER . DEC_OP
    (109) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> IDENTIFIER . LEFT_ROUND RIGHT_ROUND
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 82 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 82 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 82 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 82 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 82 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 82 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 82 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 82 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 82 (expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 82 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 82 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 85
    ADD_ASSIGN      shift and go to state 87
    SUB_ASSIGN      shift and go to state 80
    DIV_ASSIGN      shift and go to state 88
    MUL_ASSIGN      shift and go to state 86
    MOD_ASSIGN      shift and go to state 81
    INC_OP          shift and go to state 84
    DEC_OP          shift and go to state 83
    LEFT_ROUND      shift and go to state 82
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 46

    (85) expression -> assignment .

    PLUS            reduce using rule 85 (expression -> assignment .)
    MINUS           reduce using rule 85 (expression -> assignment .)
    MULTIPLY        reduce using rule 85 (expression -> assignment .)
    DIVIDE          reduce using rule 85 (expression -> assignment .)
    L_OP            reduce using rule 85 (expression -> assignment .)
    G_OP            reduce using rule 85 (expression -> assignment .)
    NE_OP           reduce using rule 85 (expression -> assignment .)
    EQ_OP           reduce using rule 85 (expression -> assignment .)
    GE_OP           reduce using rule 85 (expression -> assignment .)
    LE_OP           reduce using rule 85 (expression -> assignment .)
    AND_OP          reduce using rule 85 (expression -> assignment .)
    OR_OP           reduce using rule 85 (expression -> assignment .)
    MODULO          reduce using rule 85 (expression -> assignment .)
    SEMICOLON       reduce using rule 85 (expression -> assignment .)
    COMMA           reduce using rule 85 (expression -> assignment .)
    RIGHT_SQUARE    reduce using rule 85 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 85 (expression -> assignment .)


state 47

    (50) constant -> HEX_NUM .

    SEMICOLON       reduce using rule 50 (constant -> HEX_NUM .)
    PLUS            reduce using rule 50 (constant -> HEX_NUM .)
    MINUS           reduce using rule 50 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 50 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 50 (constant -> HEX_NUM .)
    L_OP            reduce using rule 50 (constant -> HEX_NUM .)
    G_OP            reduce using rule 50 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 50 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 50 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 50 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 50 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 50 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 50 (constant -> HEX_NUM .)
    MODULO          reduce using rule 50 (constant -> HEX_NUM .)
    COMMA           reduce using rule 50 (constant -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 50 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 50 (constant -> HEX_NUM .)


state 48

    (81) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 89

state 49

    (105) unary_expression -> INC_OP . IDENTIFIER
    (106) unary_expression -> INC_OP . array
    (64) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 91

    array                          shift and go to state 90

state 50

    (52) constant -> INT_NUM .

    SEMICOLON       reduce using rule 52 (constant -> INT_NUM .)
    PLUS            reduce using rule 52 (constant -> INT_NUM .)
    MINUS           reduce using rule 52 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 52 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 52 (constant -> INT_NUM .)
    L_OP            reduce using rule 52 (constant -> INT_NUM .)
    G_OP            reduce using rule 52 (constant -> INT_NUM .)
    NE_OP           reduce using rule 52 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 52 (constant -> INT_NUM .)
    GE_OP           reduce using rule 52 (constant -> INT_NUM .)
    LE_OP           reduce using rule 52 (constant -> INT_NUM .)
    AND_OP          reduce using rule 52 (constant -> INT_NUM .)
    OR_OP           reduce using rule 52 (constant -> INT_NUM .)
    MODULO          reduce using rule 52 (constant -> INT_NUM .)
    COMMA           reduce using rule 52 (constant -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 52 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 52 (constant -> INT_NUM .)


state 51

    (49) declaration_assignment -> IDENTIFIER EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 49 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 49 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 52

    (51) constant -> REAL_NUM .

    SEMICOLON       reduce using rule 51 (constant -> REAL_NUM .)
    PLUS            reduce using rule 51 (constant -> REAL_NUM .)
    MINUS           reduce using rule 51 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 51 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 51 (constant -> REAL_NUM .)
    L_OP            reduce using rule 51 (constant -> REAL_NUM .)
    G_OP            reduce using rule 51 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 51 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 51 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 51 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 51 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 51 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 51 (constant -> REAL_NUM .)
    MODULO          reduce using rule 51 (constant -> REAL_NUM .)
    COMMA           reduce using rule 51 (constant -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 51 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 51 (constant -> REAL_NUM .)


state 53

    (66) array_index -> LEFT_SQUARE expression . RIGHT_SQUARE
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_SQUARE    shift and go to state 105
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 54

    (65) array_index -> array_index LEFT_SQUARE . expression RIGHT_SQUARE
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 106

state 55

    (18) argument -> type_specifier IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 18 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 18 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 56

    (19) argument -> type_specifier array .

    RIGHT_ROUND     reduce using rule 19 (argument -> type_specifier array .)
    COMMA           reduce using rule 19 (argument -> type_specifier array .)


state 57

    (21) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 21 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)


state 58

    (116) left_curl -> LEFT_CURL .

    IF              reduce using rule 116 (left_curl -> LEFT_CURL .)
    FOR             reduce using rule 116 (left_curl -> LEFT_CURL .)
    WHILE           reduce using rule 116 (left_curl -> LEFT_CURL .)
    RETURN          reduce using rule 116 (left_curl -> LEFT_CURL .)
    CONTINUE        reduce using rule 116 (left_curl -> LEFT_CURL .)
    BREAK           reduce using rule 116 (left_curl -> LEFT_CURL .)
    PRINT           reduce using rule 116 (left_curl -> LEFT_CURL .)
    SEMICOLON       reduce using rule 116 (left_curl -> LEFT_CURL .)
    LEFT_ROUND      reduce using rule 116 (left_curl -> LEFT_CURL .)
    IDENTIFIER      reduce using rule 116 (left_curl -> LEFT_CURL .)
    CHAR            reduce using rule 116 (left_curl -> LEFT_CURL .)
    VOID            reduce using rule 116 (left_curl -> LEFT_CURL .)
    SHORT           reduce using rule 116 (left_curl -> LEFT_CURL .)
    INT             reduce using rule 116 (left_curl -> LEFT_CURL .)
    LONG            reduce using rule 116 (left_curl -> LEFT_CURL .)
    FLOAT           reduce using rule 116 (left_curl -> LEFT_CURL .)
    DOUBLE          reduce using rule 116 (left_curl -> LEFT_CURL .)
    SIGNED          reduce using rule 116 (left_curl -> LEFT_CURL .)
    UNSIGNED        reduce using rule 116 (left_curl -> LEFT_CURL .)
    HEX_NUM         reduce using rule 116 (left_curl -> LEFT_CURL .)
    REAL_NUM        reduce using rule 116 (left_curl -> LEFT_CURL .)
    INT_NUM         reduce using rule 116 (left_curl -> LEFT_CURL .)
    CHARACTER       reduce using rule 116 (left_curl -> LEFT_CURL .)
    STRING          reduce using rule 116 (left_curl -> LEFT_CURL .)
    EXP_NUM         reduce using rule 116 (left_curl -> LEFT_CURL .)
    PLUS            reduce using rule 116 (left_curl -> LEFT_CURL .)
    MINUS           reduce using rule 116 (left_curl -> LEFT_CURL .)
    INC_OP          reduce using rule 116 (left_curl -> LEFT_CURL .)
    DEC_OP          reduce using rule 116 (left_curl -> LEFT_CURL .)


state 59

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 119
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 60

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . left_curl statement_list right_curl
    (20) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (116) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 121
    LEFT_CURL       shift and go to state 58

    left_curl                      shift and go to state 122

state 61

    (17) argument_list -> argument_list COMMA . argument
    (18) argument -> . type_specifier IDENTIFIER
    (19) argument -> . type_specifier array
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 123

state 62

    (108) unary_expression -> DEC_OP array .

    RIGHT_ROUND     reduce using rule 108 (unary_expression -> DEC_OP array .)
    PLUS            reduce using rule 108 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 108 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 108 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 108 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 108 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 108 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 108 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 108 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 108 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 108 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 108 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 108 (unary_expression -> DEC_OP array .)
    MODULO          reduce using rule 108 (unary_expression -> DEC_OP array .)
    RIGHT_SQUARE    reduce using rule 108 (unary_expression -> DEC_OP array .)
    SEMICOLON       reduce using rule 108 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 108 (unary_expression -> DEC_OP array .)


state 63

    (107) unary_expression -> DEC_OP IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    PLUS            reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    MODULO          reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 107 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 64

    (97) assignment -> array SUB_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 124

state 65

    (100) assignment -> array MOD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 125

state 66

    (104) unary_expression -> array DEC_OP .

    RIGHT_ROUND     reduce using rule 104 (unary_expression -> array DEC_OP .)
    PLUS            reduce using rule 104 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 104 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 104 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 104 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 104 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 104 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 104 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 104 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 104 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 104 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 104 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 104 (unary_expression -> array DEC_OP .)
    MODULO          reduce using rule 104 (unary_expression -> array DEC_OP .)
    RIGHT_SQUARE    reduce using rule 104 (unary_expression -> array DEC_OP .)
    SEMICOLON       reduce using rule 104 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 104 (unary_expression -> array DEC_OP .)


state 67

    (103) unary_expression -> array INC_OP .

    RIGHT_ROUND     reduce using rule 103 (unary_expression -> array INC_OP .)
    PLUS            reduce using rule 103 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 103 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 103 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 103 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 103 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 103 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 103 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 103 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 103 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 103 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 103 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 103 (unary_expression -> array INC_OP .)
    MODULO          reduce using rule 103 (unary_expression -> array INC_OP .)
    RIGHT_SQUARE    reduce using rule 103 (unary_expression -> array INC_OP .)
    SEMICOLON       reduce using rule 103 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 103 (unary_expression -> array INC_OP .)


state 68

    (89) assignment -> array EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 69

    (99) assignment -> array MUL_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 127

state 70

    (98) assignment -> array DIV_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 128

state 71

    (96) assignment -> array ADD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 129

state 72

    (61) constant -> MINUS REAL_NUM .

    SEMICOLON       reduce using rule 61 (constant -> MINUS REAL_NUM .)
    PLUS            reduce using rule 61 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 61 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 61 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 61 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 61 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 61 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    MODULO          reduce using rule 61 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 61 (constant -> MINUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 61 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 61 (constant -> MINUS REAL_NUM .)


state 73

    (62) constant -> MINUS INT_NUM .

    SEMICOLON       reduce using rule 62 (constant -> MINUS INT_NUM .)
    PLUS            reduce using rule 62 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 62 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 62 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 62 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 62 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 62 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 62 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    MODULO          reduce using rule 62 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 62 (constant -> MINUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 62 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 62 (constant -> MINUS INT_NUM .)


state 74

    (63) constant -> MINUS EXP_NUM .

    SEMICOLON       reduce using rule 63 (constant -> MINUS EXP_NUM .)
    PLUS            reduce using rule 63 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 63 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 63 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 63 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 63 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 63 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    MODULO          reduce using rule 63 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 63 (constant -> MINUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 63 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 63 (constant -> MINUS EXP_NUM .)


state 75

    (60) constant -> MINUS HEX_NUM .

    SEMICOLON       reduce using rule 60 (constant -> MINUS HEX_NUM .)
    PLUS            reduce using rule 60 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 60 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 60 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 60 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 60 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 60 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    MODULO          reduce using rule 60 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 60 (constant -> MINUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 60 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 60 (constant -> MINUS HEX_NUM .)


state 76

    (58) constant -> PLUS INT_NUM .

    SEMICOLON       reduce using rule 58 (constant -> PLUS INT_NUM .)
    PLUS            reduce using rule 58 (constant -> PLUS INT_NUM .)
    MINUS           reduce using rule 58 (constant -> PLUS INT_NUM .)
    MULTIPLY        reduce using rule 58 (constant -> PLUS INT_NUM .)
    DIVIDE          reduce using rule 58 (constant -> PLUS INT_NUM .)
    L_OP            reduce using rule 58 (constant -> PLUS INT_NUM .)
    G_OP            reduce using rule 58 (constant -> PLUS INT_NUM .)
    NE_OP           reduce using rule 58 (constant -> PLUS INT_NUM .)
    EQ_OP           reduce using rule 58 (constant -> PLUS INT_NUM .)
    GE_OP           reduce using rule 58 (constant -> PLUS INT_NUM .)
    LE_OP           reduce using rule 58 (constant -> PLUS INT_NUM .)
    AND_OP          reduce using rule 58 (constant -> PLUS INT_NUM .)
    OR_OP           reduce using rule 58 (constant -> PLUS INT_NUM .)
    MODULO          reduce using rule 58 (constant -> PLUS INT_NUM .)
    COMMA           reduce using rule 58 (constant -> PLUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 58 (constant -> PLUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 58 (constant -> PLUS INT_NUM .)


state 77

    (59) constant -> PLUS EXP_NUM .

    SEMICOLON       reduce using rule 59 (constant -> PLUS EXP_NUM .)
    PLUS            reduce using rule 59 (constant -> PLUS EXP_NUM .)
    MINUS           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    MULTIPLY        reduce using rule 59 (constant -> PLUS EXP_NUM .)
    DIVIDE          reduce using rule 59 (constant -> PLUS EXP_NUM .)
    L_OP            reduce using rule 59 (constant -> PLUS EXP_NUM .)
    G_OP            reduce using rule 59 (constant -> PLUS EXP_NUM .)
    NE_OP           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    EQ_OP           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    GE_OP           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    LE_OP           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    AND_OP          reduce using rule 59 (constant -> PLUS EXP_NUM .)
    OR_OP           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    MODULO          reduce using rule 59 (constant -> PLUS EXP_NUM .)
    COMMA           reduce using rule 59 (constant -> PLUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 59 (constant -> PLUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 59 (constant -> PLUS EXP_NUM .)


state 78

    (56) constant -> PLUS HEX_NUM .

    SEMICOLON       reduce using rule 56 (constant -> PLUS HEX_NUM .)
    PLUS            reduce using rule 56 (constant -> PLUS HEX_NUM .)
    MINUS           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    MULTIPLY        reduce using rule 56 (constant -> PLUS HEX_NUM .)
    DIVIDE          reduce using rule 56 (constant -> PLUS HEX_NUM .)
    L_OP            reduce using rule 56 (constant -> PLUS HEX_NUM .)
    G_OP            reduce using rule 56 (constant -> PLUS HEX_NUM .)
    NE_OP           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    EQ_OP           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    GE_OP           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    LE_OP           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    AND_OP          reduce using rule 56 (constant -> PLUS HEX_NUM .)
    OR_OP           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    MODULO          reduce using rule 56 (constant -> PLUS HEX_NUM .)
    COMMA           reduce using rule 56 (constant -> PLUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 56 (constant -> PLUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 56 (constant -> PLUS HEX_NUM .)


state 79

    (57) constant -> PLUS REAL_NUM .

    SEMICOLON       reduce using rule 57 (constant -> PLUS REAL_NUM .)
    PLUS            reduce using rule 57 (constant -> PLUS REAL_NUM .)
    MINUS           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    MULTIPLY        reduce using rule 57 (constant -> PLUS REAL_NUM .)
    DIVIDE          reduce using rule 57 (constant -> PLUS REAL_NUM .)
    L_OP            reduce using rule 57 (constant -> PLUS REAL_NUM .)
    G_OP            reduce using rule 57 (constant -> PLUS REAL_NUM .)
    NE_OP           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    EQ_OP           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    GE_OP           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    LE_OP           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    AND_OP          reduce using rule 57 (constant -> PLUS REAL_NUM .)
    OR_OP           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    MODULO          reduce using rule 57 (constant -> PLUS REAL_NUM .)
    COMMA           reduce using rule 57 (constant -> PLUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 57 (constant -> PLUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 57 (constant -> PLUS REAL_NUM .)


state 80

    (92) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 130

state 81

    (95) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 131

state 82

    (109) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (110) function_call -> IDENTIFIER LEFT_ROUND . RIGHT_ROUND
    (111) function_call_list -> . function_argument
    (112) function_call_list -> . function_call_list COMMA function_argument
    (113) function_argument -> . IDENTIFIER
    (114) function_argument -> . array
    (115) function_argument -> . constant
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM

    RIGHT_ROUND     shift and go to state 133
    IDENTIFIER      shift and go to state 137
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    function_call_list             shift and go to state 132
    array                          shift and go to state 136
    function_argument              shift and go to state 134
    constant                       shift and go to state 135

state 83

    (102) unary_expression -> IDENTIFIER DEC_OP .

    RIGHT_ROUND     reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    PLUS            reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    MODULO          reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_SQUARE    reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    SEMICOLON       reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 102 (unary_expression -> IDENTIFIER DEC_OP .)


state 84

    (101) unary_expression -> IDENTIFIER INC_OP .

    RIGHT_ROUND     reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    PLUS            reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    MODULO          reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_SQUARE    reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    SEMICOLON       reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 101 (unary_expression -> IDENTIFIER INC_OP .)


state 85

    (90) assignment -> IDENTIFIER EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 138

state 86

    (94) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 139

state 87

    (91) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 140

state 88

    (93) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 141

state 89

    (81) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 142
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 90

    (106) unary_expression -> INC_OP array .

    RIGHT_ROUND     reduce using rule 106 (unary_expression -> INC_OP array .)
    PLUS            reduce using rule 106 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 106 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 106 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 106 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 106 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 106 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 106 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 106 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 106 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 106 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 106 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 106 (unary_expression -> INC_OP array .)
    MODULO          reduce using rule 106 (unary_expression -> INC_OP array .)
    RIGHT_SQUARE    reduce using rule 106 (unary_expression -> INC_OP array .)
    SEMICOLON       reduce using rule 106 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 106 (unary_expression -> INC_OP array .)


state 91

    (105) unary_expression -> INC_OP IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    PLUS            reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    MODULO          reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 105 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 92

    (78) expression -> expression LE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 143

state 93

    (72) expression -> expression DIVIDE . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 144

state 94

    (74) expression -> expression G_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 145

state 95

    (73) expression -> expression L_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 146

state 96

    (79) expression -> expression AND_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 147

state 97

    (77) expression -> expression GE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 148

state 98

    (69) expression -> expression PLUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 149

state 99

    (76) expression -> expression EQ_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 150

state 100

    (71) expression -> expression MULTIPLY . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 151

state 101

    (88) expression -> expression MODULO . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 152

state 102

    (70) expression -> expression MINUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 153

state 103

    (75) expression -> expression NE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 154

state 104

    (80) expression -> expression OR_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 155

state 105

    (66) array_index -> LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)


state 106

    (65) array_index -> array_index LEFT_SQUARE expression . RIGHT_SQUARE
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_SQUARE    shift and go to state 156
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 107

    (34) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 34 (statement -> expression_statement .)
    IF              reduce using rule 34 (statement -> expression_statement .)
    FOR             reduce using rule 34 (statement -> expression_statement .)
    WHILE           reduce using rule 34 (statement -> expression_statement .)
    RETURN          reduce using rule 34 (statement -> expression_statement .)
    CONTINUE        reduce using rule 34 (statement -> expression_statement .)
    BREAK           reduce using rule 34 (statement -> expression_statement .)
    PRINT           reduce using rule 34 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 34 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 34 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 34 (statement -> expression_statement .)
    CHAR            reduce using rule 34 (statement -> expression_statement .)
    VOID            reduce using rule 34 (statement -> expression_statement .)
    SHORT           reduce using rule 34 (statement -> expression_statement .)
    INT             reduce using rule 34 (statement -> expression_statement .)
    LONG            reduce using rule 34 (statement -> expression_statement .)
    FLOAT           reduce using rule 34 (statement -> expression_statement .)
    DOUBLE          reduce using rule 34 (statement -> expression_statement .)
    SIGNED          reduce using rule 34 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 34 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 34 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 34 (statement -> expression_statement .)
    INT_NUM         reduce using rule 34 (statement -> expression_statement .)
    CHARACTER       reduce using rule 34 (statement -> expression_statement .)
    STRING          reduce using rule 34 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 34 (statement -> expression_statement .)
    PLUS            reduce using rule 34 (statement -> expression_statement .)
    MINUS           reduce using rule 34 (statement -> expression_statement .)
    INC_OP          reduce using rule 34 (statement -> expression_statement .)
    DEC_OP          reduce using rule 34 (statement -> expression_statement .)
    ELSE            reduce using rule 34 (statement -> expression_statement .)


state 108

    (37) statement -> RETURN . SEMICOLON
    (38) statement -> RETURN . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 157
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 158

state 109

    (35) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 159


state 110

    (42) statement -> PRINT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 160


state 111

    (43) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (44) declaration_list -> . declaration
    (45) declaration_list -> . declaration_list COMMA declaration
    (46) declaration -> . IDENTIFIER
    (47) declaration -> . array
    (48) declaration -> . declaration_assignment
    (64) array -> . IDENTIFIER array_index
    (49) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 112

    (67) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 67 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 67 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 67 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 67 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 67 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 67 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 67 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 67 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 67 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 67 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 67 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 67 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 67 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 67 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 67 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 67 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 67 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 67 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 67 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 67 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 67 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 67 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 67 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 67 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 67 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 67 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 67 (expression_statement -> SEMICOLON .)


state 113

    (40) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 161


state 114

    (25) statement_list -> statement .

    RIGHT_CURL      reduce using rule 25 (statement_list -> statement .)
    IF              reduce using rule 25 (statement_list -> statement .)
    FOR             reduce using rule 25 (statement_list -> statement .)
    WHILE           reduce using rule 25 (statement_list -> statement .)
    RETURN          reduce using rule 25 (statement_list -> statement .)
    CONTINUE        reduce using rule 25 (statement_list -> statement .)
    BREAK           reduce using rule 25 (statement_list -> statement .)
    PRINT           reduce using rule 25 (statement_list -> statement .)
    SEMICOLON       reduce using rule 25 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 25 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 25 (statement_list -> statement .)
    CHAR            reduce using rule 25 (statement_list -> statement .)
    VOID            reduce using rule 25 (statement_list -> statement .)
    SHORT           reduce using rule 25 (statement_list -> statement .)
    INT             reduce using rule 25 (statement_list -> statement .)
    LONG            reduce using rule 25 (statement_list -> statement .)
    FLOAT           reduce using rule 25 (statement_list -> statement .)
    DOUBLE          reduce using rule 25 (statement_list -> statement .)
    SIGNED          reduce using rule 25 (statement_list -> statement .)
    UNSIGNED        reduce using rule 25 (statement_list -> statement .)
    HEX_NUM         reduce using rule 25 (statement_list -> statement .)
    REAL_NUM        reduce using rule 25 (statement_list -> statement .)
    INT_NUM         reduce using rule 25 (statement_list -> statement .)
    CHARACTER       reduce using rule 25 (statement_list -> statement .)
    STRING          reduce using rule 25 (statement_list -> statement .)
    EXP_NUM         reduce using rule 25 (statement_list -> statement .)
    PLUS            reduce using rule 25 (statement_list -> statement .)
    MINUS           reduce using rule 25 (statement_list -> statement .)
    INC_OP          reduce using rule 25 (statement_list -> statement .)
    DEC_OP          reduce using rule 25 (statement_list -> statement .)


state 115

    (32) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 162


state 116

    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl

    LEFT_ROUND      shift and go to state 163


state 117

    (41) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 164


state 118

    (39) statement -> declaration_statement .

    RIGHT_CURL      reduce using rule 39 (statement -> declaration_statement .)
    IF              reduce using rule 39 (statement -> declaration_statement .)
    FOR             reduce using rule 39 (statement -> declaration_statement .)
    WHILE           reduce using rule 39 (statement -> declaration_statement .)
    RETURN          reduce using rule 39 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 39 (statement -> declaration_statement .)
    BREAK           reduce using rule 39 (statement -> declaration_statement .)
    PRINT           reduce using rule 39 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 39 (statement -> declaration_statement .)
    LEFT_ROUND      reduce using rule 39 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 39 (statement -> declaration_statement .)
    CHAR            reduce using rule 39 (statement -> declaration_statement .)
    VOID            reduce using rule 39 (statement -> declaration_statement .)
    SHORT           reduce using rule 39 (statement -> declaration_statement .)
    INT             reduce using rule 39 (statement -> declaration_statement .)
    LONG            reduce using rule 39 (statement -> declaration_statement .)
    FLOAT           reduce using rule 39 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 39 (statement -> declaration_statement .)
    SIGNED          reduce using rule 39 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 39 (statement -> declaration_statement .)
    HEX_NUM         reduce using rule 39 (statement -> declaration_statement .)
    REAL_NUM        reduce using rule 39 (statement -> declaration_statement .)
    INT_NUM         reduce using rule 39 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 39 (statement -> declaration_statement .)
    STRING          reduce using rule 39 (statement -> declaration_statement .)
    EXP_NUM         reduce using rule 39 (statement -> declaration_statement .)
    PLUS            reduce using rule 39 (statement -> declaration_statement .)
    MINUS           reduce using rule 39 (statement -> declaration_statement .)
    INC_OP          reduce using rule 39 (statement -> declaration_statement .)
    DEC_OP          reduce using rule 39 (statement -> declaration_statement .)
    ELSE            reduce using rule 39 (statement -> declaration_statement .)


state 119

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 167
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 120

    (68) expression_statement -> expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 168
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 121

    (20) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 20 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 122

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 169
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 123

    (17) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 17 (argument_list -> argument_list COMMA argument .)


state 124

    (97) assignment -> array SUB_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 97 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 97 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 97 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 97 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 97 (assignment -> array SUB_ASSIGN expression .) ]


state 125

    (100) assignment -> array MOD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 100 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 100 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 100 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 100 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 100 (assignment -> array MOD_ASSIGN expression .) ]


state 126

    (89) assignment -> array EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 89 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 89 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 89 (assignment -> array EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 89 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 89 (assignment -> array EQUAL expression .) ]
  ! MODULO          [ reduce using rule 89 (assignment -> array EQUAL expression .) ]


state 127

    (99) assignment -> array MUL_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 99 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 99 (assignment -> array MUL_ASSIGN expression .)
    COMMA           reduce using rule 99 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 99 (assignment -> array MUL_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 99 (assignment -> array MUL_ASSIGN expression .) ]


state 128

    (98) assignment -> array DIV_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 98 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 98 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 98 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 98 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 98 (assignment -> array DIV_ASSIGN expression .) ]


state 129

    (96) assignment -> array ADD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 96 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 96 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 96 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 96 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 96 (assignment -> array ADD_ASSIGN expression .) ]


state 130

    (92) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 92 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 131

    (95) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 95 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 132

    (109) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (112) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 170
    COMMA           shift and go to state 171


state 133

    (110) function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .

    PLUS            reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 110 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)


state 134

    (111) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 111 (function_call_list -> function_argument .)
    COMMA           reduce using rule 111 (function_call_list -> function_argument .)


state 135

    (115) function_argument -> constant .

    RIGHT_ROUND     reduce using rule 115 (function_argument -> constant .)
    COMMA           reduce using rule 115 (function_argument -> constant .)


state 136

    (114) function_argument -> array .

    RIGHT_ROUND     reduce using rule 114 (function_argument -> array .)
    COMMA           reduce using rule 114 (function_argument -> array .)


state 137

    (113) function_argument -> IDENTIFIER .
    (64) array -> IDENTIFIER . array_index
    (65) array_index -> . array_index LEFT_SQUARE expression RIGHT_SQUARE
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 113 (function_argument -> IDENTIFIER .)
    COMMA           reduce using rule 113 (function_argument -> IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 138

    (90) assignment -> IDENTIFIER EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MODULO          [ reduce using rule 90 (assignment -> IDENTIFIER EQUAL expression .) ]


state 139

    (94) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 94 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 140

    (91) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 91 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 141

    (93) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 93 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 142

    (81) expression -> LEFT_ROUND expression RIGHT_ROUND .

    PLUS            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 143

    (78) expression -> expression LE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 78 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 78 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 78 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 78 (expression -> expression LE_OP expression .)
    RIGHT_SQUARE    reduce using rule 78 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 78 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MODULO          [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 144

    (72) expression -> expression DIVIDE expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 72 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 72 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 72 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 72 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 72 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 72 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 72 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 72 (expression -> expression DIVIDE expression .)
    RIGHT_SQUARE    reduce using rule 72 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 72 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 93 ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]
  ! MODULO          [ shift and go to state 101 ]


state 145

    (74) expression -> expression G_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 74 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 74 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 74 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 74 (expression -> expression G_OP expression .)
    RIGHT_SQUARE    reduce using rule 74 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 74 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MODULO          [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 146

    (73) expression -> expression L_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 73 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 73 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 73 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 73 (expression -> expression L_OP expression .)
    RIGHT_SQUARE    reduce using rule 73 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MODULO          [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 147

    (79) expression -> expression AND_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    AND_OP          reduce using rule 79 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 79 (expression -> expression AND_OP expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 79 (expression -> expression AND_OP expression .)
    RIGHT_SQUARE    reduce using rule 79 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 79 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MODULO          [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 148

    (77) expression -> expression GE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 77 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 77 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 77 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 77 (expression -> expression GE_OP expression .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 77 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MODULO          [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 149

    (69) expression -> expression PLUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 69 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 69 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 69 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 69 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 69 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 69 (expression -> expression PLUS expression .)
    RIGHT_SQUARE    reduce using rule 69 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! MULTIPLY        [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 102 ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 150

    (76) expression -> expression EQ_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    NE_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 76 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression EQ_OP expression .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 76 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MODULO          [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 151

    (71) expression -> expression MULTIPLY expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 71 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    RIGHT_SQUARE    reduce using rule 71 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 93 ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]
  ! MODULO          [ shift and go to state 101 ]


state 152

    (88) expression -> expression MODULO expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 88 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 88 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 88 (expression -> expression MODULO expression .)
    L_OP            reduce using rule 88 (expression -> expression MODULO expression .)
    G_OP            reduce using rule 88 (expression -> expression MODULO expression .)
    NE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    EQ_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    GE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    LE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    AND_OP          reduce using rule 88 (expression -> expression MODULO expression .)
    OR_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 88 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 88 (expression -> expression MODULO expression .)
    RIGHT_SQUARE    reduce using rule 88 (expression -> expression MODULO expression .)
    RIGHT_ROUND     reduce using rule 88 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 102 ]
  ! MULTIPLY        [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 93 ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]
  ! MODULO          [ shift and go to state 101 ]


state 153

    (70) expression -> expression MINUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 70 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 70 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 70 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 70 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 70 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 70 (expression -> expression MINUS expression .)
    RIGHT_SQUARE    reduce using rule 70 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 101

  ! MULTIPLY        [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 102 ]
  ! L_OP            [ shift and go to state 95 ]
  ! G_OP            [ shift and go to state 94 ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! GE_OP           [ shift and go to state 97 ]
  ! LE_OP           [ shift and go to state 92 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 154

    (75) expression -> expression NE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    NE_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 75 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 75 (expression -> expression NE_OP expression .)
    RIGHT_SQUARE    reduce using rule 75 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 75 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MODULO          [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 103 ]
  ! EQ_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 96 ]
  ! OR_OP           [ shift and go to state 104 ]


state 155

    (80) expression -> expression OR_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    OR_OP           reduce using rule 80 (expression -> expression OR_OP expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 80 (expression -> expression OR_OP expression .)
    RIGHT_SQUARE    reduce using rule 80 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 80 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    MODULO          shift and go to state 101

  ! PLUS            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MODULO          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 104 ]


state 156

    (65) array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 65 (array_index -> array_index LEFT_SQUARE expression RIGHT_SQUARE .)


state 157

    (37) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> RETURN SEMICOLON .)


state 158

    (38) statement -> RETURN expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 172
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 159

    (35) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 173

state 160

    (42) statement -> PRINT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 174


state 161

    (40) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 40 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 40 (statement -> CONTINUE SEMICOLON .)


state 162

    (32) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 175
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 163

    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 176

state 164

    (41) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 41 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 41 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 41 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 41 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 41 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 41 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 41 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 41 (statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 41 (statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 41 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 41 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 41 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 41 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 41 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 41 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 41 (statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 41 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 41 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 41 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 41 (statement -> BREAK SEMICOLON .)


state 165

    (117) right_curl -> RIGHT_CURL .

    CHAR            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    VOID            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    SHORT           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    INT             reduce using rule 117 (right_curl -> RIGHT_CURL .)
    LONG            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    FLOAT           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    DOUBLE          reduce using rule 117 (right_curl -> RIGHT_CURL .)
    SIGNED          reduce using rule 117 (right_curl -> RIGHT_CURL .)
    UNSIGNED        reduce using rule 117 (right_curl -> RIGHT_CURL .)
    $end            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    ELSE            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    RIGHT_CURL      reduce using rule 117 (right_curl -> RIGHT_CURL .)
    IF              reduce using rule 117 (right_curl -> RIGHT_CURL .)
    FOR             reduce using rule 117 (right_curl -> RIGHT_CURL .)
    WHILE           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    RETURN          reduce using rule 117 (right_curl -> RIGHT_CURL .)
    CONTINUE        reduce using rule 117 (right_curl -> RIGHT_CURL .)
    BREAK           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    PRINT           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    SEMICOLON       reduce using rule 117 (right_curl -> RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 117 (right_curl -> RIGHT_CURL .)
    IDENTIFIER      reduce using rule 117 (right_curl -> RIGHT_CURL .)
    HEX_NUM         reduce using rule 117 (right_curl -> RIGHT_CURL .)
    REAL_NUM        reduce using rule 117 (right_curl -> RIGHT_CURL .)
    INT_NUM         reduce using rule 117 (right_curl -> RIGHT_CURL .)
    CHARACTER       reduce using rule 117 (right_curl -> RIGHT_CURL .)
    STRING          reduce using rule 117 (right_curl -> RIGHT_CURL .)
    EXP_NUM         reduce using rule 117 (right_curl -> RIGHT_CURL .)
    PLUS            reduce using rule 117 (right_curl -> RIGHT_CURL .)
    MINUS           reduce using rule 117 (right_curl -> RIGHT_CURL .)
    INC_OP          reduce using rule 117 (right_curl -> RIGHT_CURL .)
    DEC_OP          reduce using rule 117 (right_curl -> RIGHT_CURL .)


state 166

    (24) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 24 (statement_list -> statement_list statement .)
    IF              reduce using rule 24 (statement_list -> statement_list statement .)
    FOR             reduce using rule 24 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 24 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 24 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 24 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 24 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 24 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 24 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 24 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 24 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 24 (statement_list -> statement_list statement .)
    VOID            reduce using rule 24 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 24 (statement_list -> statement_list statement .)
    INT             reduce using rule 24 (statement_list -> statement_list statement .)
    LONG            reduce using rule 24 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 24 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 24 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 24 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 24 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 24 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 24 (statement_list -> statement_list statement .)
    STRING          reduce using rule 24 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 24 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 24 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 24 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 24 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 24 (statement_list -> statement_list statement .)


state 167

    (23) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 23 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)


state 168

    (68) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 68 (expression_statement -> expression SEMICOLON .)


state 169

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    right_curl                     shift and go to state 177
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 170

    (109) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    PLUS            reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MODULO          reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 109 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 171

    (112) function_call_list -> function_call_list COMMA . function_argument
    (113) function_argument -> . IDENTIFIER
    (114) function_argument -> . array
    (115) function_argument -> . constant
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM

    IDENTIFIER      shift and go to state 137
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41

    array                          shift and go to state 136
    function_argument              shift and go to state 178
    constant                       shift and go to state 135

state 172

    (38) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)


state 173

    (35) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 179
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 174

    (42) statement -> PRINT IDENTIFIER SEMICOLON .

    RIGHT_CURL      reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LEFT_ROUND      reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT             reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    HEX_NUM         reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    REAL_NUM        reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT_NUM         reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    EXP_NUM         reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 42 (statement -> PRINT IDENTIFIER SEMICOLON .)


state 175

    (32) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 180
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 176

    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 181
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 177

    (22) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 22 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)


state 178

    (112) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 112 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 112 (function_call_list -> function_call_list COMMA function_argument .)


state 179

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (36) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (116) left_curl -> . LEFT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 58
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    left_curl                      shift and go to state 182
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 183
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 180

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 184

state 181

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE left_curl statement_list right_curl
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (116) left_curl -> . LEFT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 58
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    left_curl                      shift and go to state 185
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 186
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 182

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 187
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 183

    (36) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 36 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 184

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 188
    PLUS            shift and go to state 98
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 100
    DIVIDE          shift and go to state 93
    L_OP            shift and go to state 95
    G_OP            shift and go to state 94
    NE_OP           shift and go to state 103
    EQ_OP           shift and go to state 99
    GE_OP           shift and go to state 97
    LE_OP           shift and go to state 92
    AND_OP          shift and go to state 96
    OR_OP           shift and go to state 104
    MODULO          shift and go to state 101


state 185

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE left_curl statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 189
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 186

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 190

  ! ELSE            [ reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 187

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 191
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 188

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . left_curl statement_list right_curl
    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (116) left_curl -> . LEFT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 58
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    left_curl                      shift and go to state 192
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 193
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 189

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE left_curl statement_list right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 194
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 190

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . left_curl statement_list right_curl
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (116) left_curl -> . LEFT_CURL
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    LEFT_CURL       shift and go to state 58
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    left_curl                      shift and go to state 195
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 196
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 191

    (35) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRING          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PLUS            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 35 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)


state 192

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 197
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 193

    (33) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    VOID            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LONG            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRING          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 33 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 194

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRING          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PLUS            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            shift and go to state 198

  ! ELSE            [ reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .) ]


state 195

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 199
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 196

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PRINT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    VOID            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SHORT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LONG            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DOUBLE          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SIGNED          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    UNSIGNED        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRING          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PLUS            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 197

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 200
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 198

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . left_curl statement_list right_curl
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (116) left_curl -> . LEFT_CURL
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    LEFT_CURL       shift and go to state 58
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    left_curl                      shift and go to state 201
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 202
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 199

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 203
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 200

    (32) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRING          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    PLUS            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 32 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)


state 201

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl . statement_list right_curl
    (24) statement_list -> . statement_list statement
    (25) statement_list -> . statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 114
    statement_list                 shift and go to state 204
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 202

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    PRINT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    VOID            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SHORT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LONG            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DOUBLE          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SIGNED          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    UNSIGNED        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    STRING          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    PLUS            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    MINUS           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)


state 203

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SHORT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LONG            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SIGNED          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    STRING          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    PLUS            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)


state 204

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list . right_curl
    (24) statement_list -> statement_list . statement
    (117) right_curl -> . RIGHT_CURL
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (32) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (33) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (34) statement -> . expression_statement
    (35) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (36) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . declaration_statement
    (40) statement -> . CONTINUE SEMICOLON
    (41) statement -> . BREAK SEMICOLON
    (42) statement -> . PRINT IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (43) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (64) array -> . IDENTIFIER array_index
    (50) constant -> . HEX_NUM
    (51) constant -> . REAL_NUM
    (52) constant -> . INT_NUM
    (53) constant -> . CHARACTER
    (54) constant -> . STRING
    (55) constant -> . EXP_NUM
    (56) constant -> . PLUS HEX_NUM
    (57) constant -> . PLUS REAL_NUM
    (58) constant -> . PLUS INT_NUM
    (59) constant -> . PLUS EXP_NUM
    (60) constant -> . MINUS HEX_NUM
    (61) constant -> . MINUS REAL_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS EXP_NUM
    (89) assignment -> . array EQUAL expression
    (90) assignment -> . IDENTIFIER EQUAL expression
    (91) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (92) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (93) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (94) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (95) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (96) assignment -> . array ADD_ASSIGN expression
    (97) assignment -> . array SUB_ASSIGN expression
    (98) assignment -> . array DIV_ASSIGN expression
    (99) assignment -> . array MUL_ASSIGN expression
    (100) assignment -> . array MOD_ASSIGN expression
    (101) unary_expression -> . IDENTIFIER INC_OP
    (102) unary_expression -> . IDENTIFIER DEC_OP
    (103) unary_expression -> . array INC_OP
    (104) unary_expression -> . array DEC_OP
    (105) unary_expression -> . INC_OP IDENTIFIER
    (106) unary_expression -> . INC_OP array
    (107) unary_expression -> . DEC_OP IDENTIFIER
    (108) unary_expression -> . DEC_OP array
    (109) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (110) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 165
    IF              shift and go to state 116
    FOR             shift and go to state 115
    WHILE           shift and go to state 109
    RETURN          shift and go to state 108
    CONTINUE        shift and go to state 113
    BREAK           shift and go to state 117
    PRINT           shift and go to state 110
    SEMICOLON       shift and go to state 112
    LEFT_ROUND      shift and go to state 48
    IDENTIFIER      shift and go to state 45
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 47
    REAL_NUM        shift and go to state 52
    INT_NUM         shift and go to state 50
    CHARACTER       shift and go to state 43
    STRING          shift and go to state 42
    EXP_NUM         shift and go to state 39
    PLUS            shift and go to state 44
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 49
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 107
    type_specifier                 shift and go to state 111
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 46
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 205
    declaration_statement          shift and go to state 118
    statement                      shift and go to state 166
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 205

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SHORT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LONG            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SIGNED          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    STRING          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    PLUS            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)

