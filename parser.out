Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    LONG
    ELLIPSIS
    GOTO
    ENUM
    LEFT_OP
    DOUBLE
    COMMENTS
    SHORT
    OR_ASSIGN
    SIZEOF
    UNSIGNED
    HEADER
    COLON
    UNION
    AMPERSAND
    XOR_ASSIGN
    SIGNED
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    STRING
    AUTO
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_definition
Rule 5     function -> function_declaration
Rule 6     function -> global_declaration_statement
Rule 7     function -> struct
Rule 8     type_specifier -> CHAR
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> FLOAT
Rule 11    type_specifier -> VOID
Rule 12    argument_list -> argument
Rule 13    argument_list -> argument_list COMMA argument
Rule 14    argument -> type_specifier IDENTIFIER
Rule 15    argument -> type_specifier array_parameter
Rule 16    array_parameter -> array
Rule 17    array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
Rule 18    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 19    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
Rule 20    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
Rule 21    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> statement
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
Rule 31    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 32    statement -> expression_statement
Rule 33    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 34    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 35    statement -> RETURN SEMICOLON
Rule 36    statement -> RETURN expression SEMICOLON
Rule 37    statement -> declaration_statement
Rule 38    statement -> static_declaration_statement
Rule 39    statement -> CONTINUE SEMICOLON
Rule 40    statement -> BREAK SEMICOLON
Rule 41    statement -> PRINT IDENTIFIER SEMICOLON
Rule 42    statement -> struct
Rule 43    statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON
Rule 44    struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
Rule 45    struct_declaration_list -> struct_declaration_list declaration_statement
Rule 46    struct_declaration_list -> declaration_statement
Rule 47    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 48    global_declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 49    static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON
Rule 50    declaration_list -> declaration
Rule 51    declaration_list -> declaration_list COMMA declaration
Rule 52    declaration -> IDENTIFIER
Rule 53    declaration -> array
Rule 54    declaration -> declaration_assignment
Rule 55    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 56    constant -> HEX_NUM
Rule 57    constant -> INT_NUM
Rule 58    constant -> REAL_NUM
Rule 59    constant -> EXP_NUM
Rule 60    constant -> CHARACTER
Rule 61    constant -> MINUS HEX_NUM
Rule 62    constant -> MINUS INT_NUM
Rule 63    constant -> MINUS REAL_NUM
Rule 64    constant -> MINUS EXP_NUM
Rule 65    array -> IDENTIFIER array_index
Rule 66    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 67    expression_statement -> SEMICOLON
Rule 68    expression_statement -> expression SEMICOLON
Rule 69    expression -> expression PLUS expression
Rule 70    expression -> expression MINUS expression
Rule 71    expression -> expression MULTIPLY expression
Rule 72    expression -> expression DIVIDE expression
Rule 73    expression -> expression L_OP expression
Rule 74    expression -> expression G_OP expression
Rule 75    expression -> expression NE_OP expression
Rule 76    expression -> expression EQ_OP expression
Rule 77    expression -> expression GE_OP expression
Rule 78    expression -> expression LE_OP expression
Rule 79    expression -> expression AND_OP expression
Rule 80    expression -> expression OR_OP expression
Rule 81    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 82    expression -> IDENTIFIER
Rule 83    expression -> array
Rule 84    expression -> constant
Rule 85    expression -> assignment
Rule 86    expression -> unary_expression
Rule 87    expression -> function_call
Rule 88    expression -> expression MODULO expression
Rule 89    expression -> TILDA expression
Rule 90    expression -> IDENTIFIER DOT IDENTIFIER
Rule 91    expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression
Rule 92    assignment -> array EQUAL expression
Rule 93    assignment -> IDENTIFIER EQUAL expression
Rule 94    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 95    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 96    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 97    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 98    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 99    assignment -> array ADD_ASSIGN expression
Rule 100   assignment -> array SUB_ASSIGN expression
Rule 101   assignment -> array DIV_ASSIGN expression
Rule 102   assignment -> array MUL_ASSIGN expression
Rule 103   assignment -> array MOD_ASSIGN expression
Rule 104   unary_expression -> IDENTIFIER INC_OP
Rule 105   unary_expression -> IDENTIFIER DEC_OP
Rule 106   unary_expression -> array INC_OP
Rule 107   unary_expression -> array DEC_OP
Rule 108   unary_expression -> INC_OP IDENTIFIER
Rule 109   unary_expression -> INC_OP array
Rule 110   unary_expression -> DEC_OP IDENTIFIER
Rule 111   unary_expression -> DEC_OP array
Rule 112   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 113   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 114   function_call_list -> function_argument
Rule 115   function_call_list -> function_call_list COMMA function_argument
Rule 116   function_argument -> expression
Rule 117   left_curl -> LEFT_CURL
Rule 118   right_curl -> RIGHT_CURL

Terminals, with rules where they appear

ADD_ASSIGN           : 94 99
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 79
AUTO                 : 
BREAK                : 40
CASE                 : 
CHAR                 : 8
CHARACTER            : 60
COLON                : 
COMMA                : 13 51 115
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 39
DEC_OP               : 105 107 110 111
DEFAULT              : 
DIVIDE               : 72
DIV_ASSIGN           : 96 101
DO                   : 
DOT                  : 90 91
DOUBLE               : 
ELLIPSIS             : 
ELSE                 : 26 27 28 29
ENUM                 : 
EQUAL                : 55 91 92 93
EQ_OP                : 76
EXCLAMATION          : 
EXP_NUM              : 59 64
EXTERN               : 
FLOAT                : 10
FOR                  : 30 31
GE_OP                : 77
GOTO                 : 
G_OP                 : 74
HASH                 : 
HEADER               : 
HEX_NUM              : 56 61
IDENTIFIER           : 14 17 18 19 20 21 41 43 43 44 52 55 65 82 90 90 91 91 93 94 95 96 97 98 104 105 108 110 112 113
IF                   : 24 25 26 27 28 29
INC_OP               : 104 106 108 109
INT                  : 9
INT_NUM              : 57 62
LEFT_ASSIGN          : 
LEFT_CURL            : 117
LEFT_OP              : 
LEFT_ROUND           : 18 19 20 21 24 25 26 27 28 29 30 31 33 34 81 112 113
LEFT_SQUARE          : 17 66
LE_OP                : 78
LONG                 : 
L_OP                 : 73
MINUS                : 61 62 63 64 70
MODULO               : 88
MOD_ASSIGN           : 98 103
MULTIPLY             : 71
MUL_ASSIGN           : 97 102
NE_OP                : 75
OR_ASSIGN            : 
OR_OP                : 80
PIPE                 : 
PLUS                 : 69
POWER                : 
PRINT                : 41
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 58 63
REGISTER             : 
RETURN               : 35 36
RIGHT_ASSIGN         : 
RIGHT_CURL           : 118
RIGHT_OP             : 
RIGHT_ROUND          : 18 19 20 21 24 25 26 27 28 29 30 31 33 34 81 112 113
RIGHT_SQUARE         : 17 66
SEMICOLON            : 18 19 35 36 39 40 41 43 44 47 48 49 67 68
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 49
STRING               : 
STRUCT               : 43 44
SUB_ASSIGN           : 95 100
SWITCH               : 
TILDA                : 89
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 11
VOLATILE             : 
WHILE                : 33 34
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 12 13
argument_list        : 13 18 20
array                : 16 53 83 92 99 100 101 102 103 106 107 109 111
array_index          : 65
array_parameter      : 15
assignment           : 85
constant             : 84
declaration          : 50 51
declaration_assignment : 54
declaration_list     : 47 48 49 51
declaration_statement : 37 45 46
expression           : 24 25 26 27 28 29 30 31 33 34 36 55 66 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 88 88 89 91 92 93 94 95 96 97 98 99 100 101 102 103 116
expression_statement : 30 30 31 31 32
function             : 2 3
function_argument    : 114 115
function_call        : 87
function_call_list   : 112 115
function_declaration : 5
function_definition  : 4
function_list        : 1 2
global_declaration_statement : 6
left_curl            : 20 21 24 27 28 29 29 30 33 44
program              : 0
right_curl           : 20 21 24 27 28 29 29 30 33 44
statement            : 22 23 25 26 26 27 28 31 34
statement_list       : 20 21 22 24 27 28 29 29 30 33
static_declaration_statement : 38
struct               : 7 42
struct_declaration_list : 44 45
type_specifier       : 14 15 18 19 20 21 47 48 49
unary_expression     : 86

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . global_declaration_statement
    (7) function -> . struct
    (20) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (21) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (19) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (48) global_declaration_statement -> . type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    STRUCT          shift and go to state 7
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    function                       shift and go to state 6
    global_declaration_statement   shift and go to state 8
    function_definition            shift and go to state 9
    function_declaration           shift and go to state 10
    function_list                  shift and go to state 11
    program                        shift and go to state 5
    type_specifier                 shift and go to state 3
    struct                         shift and go to state 4

state 1

    (11) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 11 (type_specifier -> VOID .)


state 2

    (8) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 8 (type_specifier -> CHAR .)


state 3

    (20) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (21) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (19) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (48) global_declaration_statement -> type_specifier . declaration_list SEMICOLON
    (50) declaration_list -> . declaration
    (51) declaration_list -> . declaration_list COMMA declaration
    (52) declaration -> . IDENTIFIER
    (53) declaration -> . array
    (54) declaration -> . declaration_assignment
    (65) array -> . IDENTIFIER array_index
    (55) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 18

    declaration_assignment         shift and go to state 14
    declaration_list               shift and go to state 15
    declaration                    shift and go to state 16
    array                          shift and go to state 17

state 4

    (7) function -> struct .

    STRUCT          reduce using rule 7 (function -> struct .)
    CHAR            reduce using rule 7 (function -> struct .)
    INT             reduce using rule 7 (function -> struct .)
    FLOAT           reduce using rule 7 (function -> struct .)
    VOID            reduce using rule 7 (function -> struct .)
    $end            reduce using rule 7 (function -> struct .)


state 5

    (0) S' -> program .



state 6

    (3) function_list -> function .

    STRUCT          reduce using rule 3 (function_list -> function .)
    CHAR            reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    VOID            reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 7

    (44) struct -> STRUCT . IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON

    IDENTIFIER      shift and go to state 19


state 8

    (6) function -> global_declaration_statement .

    STRUCT          reduce using rule 6 (function -> global_declaration_statement .)
    CHAR            reduce using rule 6 (function -> global_declaration_statement .)
    INT             reduce using rule 6 (function -> global_declaration_statement .)
    FLOAT           reduce using rule 6 (function -> global_declaration_statement .)
    VOID            reduce using rule 6 (function -> global_declaration_statement .)
    $end            reduce using rule 6 (function -> global_declaration_statement .)


state 9

    (4) function -> function_definition .

    STRUCT          reduce using rule 4 (function -> function_definition .)
    CHAR            reduce using rule 4 (function -> function_definition .)
    INT             reduce using rule 4 (function -> function_definition .)
    FLOAT           reduce using rule 4 (function -> function_definition .)
    VOID            reduce using rule 4 (function -> function_definition .)
    $end            reduce using rule 4 (function -> function_definition .)


state 10

    (5) function -> function_declaration .

    STRUCT          reduce using rule 5 (function -> function_declaration .)
    CHAR            reduce using rule 5 (function -> function_declaration .)
    INT             reduce using rule 5 (function -> function_declaration .)
    FLOAT           reduce using rule 5 (function -> function_declaration .)
    VOID            reduce using rule 5 (function -> function_declaration .)
    $end            reduce using rule 5 (function -> function_declaration .)


state 11

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . global_declaration_statement
    (7) function -> . struct
    (20) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (21) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (19) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (48) global_declaration_statement -> . type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> function_list .)
    STRUCT          shift and go to state 7
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    function                       shift and go to state 20
    global_declaration_statement   shift and go to state 8
    function_definition            shift and go to state 9
    function_declaration           shift and go to state 10
    type_specifier                 shift and go to state 3
    struct                         shift and go to state 4

state 12

    (9) type_specifier -> INT .

    IDENTIFIER      reduce using rule 9 (type_specifier -> INT .)


state 13

    (10) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> FLOAT .)


state 14

    (54) declaration -> declaration_assignment .

    SEMICOLON       reduce using rule 54 (declaration -> declaration_assignment .)
    COMMA           reduce using rule 54 (declaration -> declaration_assignment .)


state 15

    (48) global_declaration_statement -> type_specifier declaration_list . SEMICOLON
    (51) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 22
    COMMA           shift and go to state 21


state 16

    (50) declaration_list -> declaration .

    SEMICOLON       reduce using rule 50 (declaration_list -> declaration .)
    COMMA           reduce using rule 50 (declaration_list -> declaration .)


state 17

    (53) declaration -> array .

    SEMICOLON       reduce using rule 53 (declaration -> array .)
    COMMA           reduce using rule 53 (declaration -> array .)


state 18

    (20) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (21) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (19) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND SEMICOLON
    (52) declaration -> IDENTIFIER .
    (65) array -> IDENTIFIER . array_index
    (55) declaration_assignment -> IDENTIFIER . EQUAL expression
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    LEFT_ROUND      shift and go to state 23
    SEMICOLON       reduce using rule 52 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 52 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 24
    LEFT_SQUARE     shift and go to state 25

    array_index                    shift and go to state 26

state 19

    (44) struct -> STRUCT IDENTIFIER . left_curl struct_declaration_list right_curl SEMICOLON
    (117) left_curl -> . LEFT_CURL

    LEFT_CURL       shift and go to state 27

    left_curl                      shift and go to state 28

state 20

    (2) function_list -> function_list function .

    STRUCT          reduce using rule 2 (function_list -> function_list function .)
    CHAR            reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    VOID            reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 21

    (51) declaration_list -> declaration_list COMMA . declaration
    (52) declaration -> . IDENTIFIER
    (53) declaration -> . array
    (54) declaration -> . declaration_assignment
    (65) array -> . IDENTIFIER array_index
    (55) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 14
    declaration                    shift and go to state 29
    array                          shift and go to state 17

state 22

    (48) global_declaration_statement -> type_specifier declaration_list SEMICOLON .

    STRUCT          reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 48 (global_declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 23

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND left_curl statement_list right_curl
    (21) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (19) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND SEMICOLON
    (12) argument_list -> . argument
    (13) argument_list -> . argument_list COMMA argument
    (14) argument -> . type_specifier IDENTIFIER
    (15) argument -> . type_specifier array_parameter
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    RIGHT_ROUND     shift and go to state 33
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 32
    argument_list                  shift and go to state 34

state 24

    (55) declaration_assignment -> IDENTIFIER EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 50

state 25

    (66) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 52

state 26

    (65) array -> IDENTIFIER array_index .

    EQUAL           reduce using rule 65 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 65 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 65 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 65 (array -> IDENTIFIER array_index .)
    MUL_ASSIGN      reduce using rule 65 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 65 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 65 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 65 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 65 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 65 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 65 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 65 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 65 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 65 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 65 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 65 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 65 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 65 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 65 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 65 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 65 (array -> IDENTIFIER array_index .)
    MODULO          reduce using rule 65 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 65 (array -> IDENTIFIER array_index .)
    RIGHT_SQUARE    reduce using rule 65 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 65 (array -> IDENTIFIER array_index .)


state 27

    (117) left_curl -> LEFT_CURL .

    CHAR            reduce using rule 117 (left_curl -> LEFT_CURL .)
    INT             reduce using rule 117 (left_curl -> LEFT_CURL .)
    FLOAT           reduce using rule 117 (left_curl -> LEFT_CURL .)
    VOID            reduce using rule 117 (left_curl -> LEFT_CURL .)
    IF              reduce using rule 117 (left_curl -> LEFT_CURL .)
    FOR             reduce using rule 117 (left_curl -> LEFT_CURL .)
    WHILE           reduce using rule 117 (left_curl -> LEFT_CURL .)
    RETURN          reduce using rule 117 (left_curl -> LEFT_CURL .)
    CONTINUE        reduce using rule 117 (left_curl -> LEFT_CURL .)
    BREAK           reduce using rule 117 (left_curl -> LEFT_CURL .)
    PRINT           reduce using rule 117 (left_curl -> LEFT_CURL .)
    STRUCT          reduce using rule 117 (left_curl -> LEFT_CURL .)
    SEMICOLON       reduce using rule 117 (left_curl -> LEFT_CURL .)
    STATIC          reduce using rule 117 (left_curl -> LEFT_CURL .)
    LEFT_ROUND      reduce using rule 117 (left_curl -> LEFT_CURL .)
    IDENTIFIER      reduce using rule 117 (left_curl -> LEFT_CURL .)
    TILDA           reduce using rule 117 (left_curl -> LEFT_CURL .)
    HEX_NUM         reduce using rule 117 (left_curl -> LEFT_CURL .)
    INT_NUM         reduce using rule 117 (left_curl -> LEFT_CURL .)
    REAL_NUM        reduce using rule 117 (left_curl -> LEFT_CURL .)
    EXP_NUM         reduce using rule 117 (left_curl -> LEFT_CURL .)
    CHARACTER       reduce using rule 117 (left_curl -> LEFT_CURL .)
    MINUS           reduce using rule 117 (left_curl -> LEFT_CURL .)
    INC_OP          reduce using rule 117 (left_curl -> LEFT_CURL .)
    DEC_OP          reduce using rule 117 (left_curl -> LEFT_CURL .)


state 28

    (44) struct -> STRUCT IDENTIFIER left_curl . struct_declaration_list right_curl SEMICOLON
    (45) struct_declaration_list -> . struct_declaration_list declaration_statement
    (46) struct_declaration_list -> . declaration_statement
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 53
    struct_declaration_list        shift and go to state 54
    declaration_statement          shift and go to state 55

state 29

    (51) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 51 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 51 (declaration_list -> declaration_list COMMA declaration .)


state 30

    (52) declaration -> IDENTIFIER .
    (65) array -> IDENTIFIER . array_index
    (55) declaration_assignment -> IDENTIFIER . EQUAL expression
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 52 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 52 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 24
    LEFT_SQUARE     shift and go to state 25

    array_index                    shift and go to state 26

state 31

    (14) argument -> type_specifier . IDENTIFIER
    (15) argument -> type_specifier . array_parameter
    (16) array_parameter -> . array
    (17) array_parameter -> . IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
    (65) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 58

    array                          shift and go to state 57
    array_parameter                shift and go to state 56

state 32

    (12) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 12 (argument_list -> argument .)
    COMMA           reduce using rule 12 (argument_list -> argument .)


state 33

    (21) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . left_curl statement_list right_curl
    (19) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . SEMICOLON
    (117) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 59
    LEFT_CURL       shift and go to state 27

    left_curl                      shift and go to state 60

state 34

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND left_curl statement_list right_curl
    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (13) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 61
    COMMA           shift and go to state 62


state 35

    (84) expression -> constant .

    PLUS            reduce using rule 84 (expression -> constant .)
    MINUS           reduce using rule 84 (expression -> constant .)
    MULTIPLY        reduce using rule 84 (expression -> constant .)
    DIVIDE          reduce using rule 84 (expression -> constant .)
    L_OP            reduce using rule 84 (expression -> constant .)
    G_OP            reduce using rule 84 (expression -> constant .)
    NE_OP           reduce using rule 84 (expression -> constant .)
    EQ_OP           reduce using rule 84 (expression -> constant .)
    GE_OP           reduce using rule 84 (expression -> constant .)
    LE_OP           reduce using rule 84 (expression -> constant .)
    AND_OP          reduce using rule 84 (expression -> constant .)
    OR_OP           reduce using rule 84 (expression -> constant .)
    MODULO          reduce using rule 84 (expression -> constant .)
    SEMICOLON       reduce using rule 84 (expression -> constant .)
    COMMA           reduce using rule 84 (expression -> constant .)
    RIGHT_SQUARE    reduce using rule 84 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 84 (expression -> constant .)


state 36

    (86) expression -> unary_expression .

    PLUS            reduce using rule 86 (expression -> unary_expression .)
    MINUS           reduce using rule 86 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 86 (expression -> unary_expression .)
    DIVIDE          reduce using rule 86 (expression -> unary_expression .)
    L_OP            reduce using rule 86 (expression -> unary_expression .)
    G_OP            reduce using rule 86 (expression -> unary_expression .)
    NE_OP           reduce using rule 86 (expression -> unary_expression .)
    EQ_OP           reduce using rule 86 (expression -> unary_expression .)
    GE_OP           reduce using rule 86 (expression -> unary_expression .)
    LE_OP           reduce using rule 86 (expression -> unary_expression .)
    AND_OP          reduce using rule 86 (expression -> unary_expression .)
    OR_OP           reduce using rule 86 (expression -> unary_expression .)
    MODULO          reduce using rule 86 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 86 (expression -> unary_expression .)
    COMMA           reduce using rule 86 (expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 86 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 86 (expression -> unary_expression .)


state 37

    (110) unary_expression -> DEC_OP . IDENTIFIER
    (111) unary_expression -> DEC_OP . array
    (65) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 64

    array                          shift and go to state 63

state 38

    (87) expression -> function_call .

    PLUS            reduce using rule 87 (expression -> function_call .)
    MINUS           reduce using rule 87 (expression -> function_call .)
    MULTIPLY        reduce using rule 87 (expression -> function_call .)
    DIVIDE          reduce using rule 87 (expression -> function_call .)
    L_OP            reduce using rule 87 (expression -> function_call .)
    G_OP            reduce using rule 87 (expression -> function_call .)
    NE_OP           reduce using rule 87 (expression -> function_call .)
    EQ_OP           reduce using rule 87 (expression -> function_call .)
    GE_OP           reduce using rule 87 (expression -> function_call .)
    LE_OP           reduce using rule 87 (expression -> function_call .)
    AND_OP          reduce using rule 87 (expression -> function_call .)
    OR_OP           reduce using rule 87 (expression -> function_call .)
    MODULO          reduce using rule 87 (expression -> function_call .)
    SEMICOLON       reduce using rule 87 (expression -> function_call .)
    COMMA           reduce using rule 87 (expression -> function_call .)
    RIGHT_SQUARE    reduce using rule 87 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 87 (expression -> function_call .)


state 39

    (59) constant -> EXP_NUM .

    PLUS            reduce using rule 59 (constant -> EXP_NUM .)
    MINUS           reduce using rule 59 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 59 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 59 (constant -> EXP_NUM .)
    L_OP            reduce using rule 59 (constant -> EXP_NUM .)
    G_OP            reduce using rule 59 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 59 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 59 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 59 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 59 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 59 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 59 (constant -> EXP_NUM .)
    MODULO          reduce using rule 59 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 59 (constant -> EXP_NUM .)
    COMMA           reduce using rule 59 (constant -> EXP_NUM .)
    SEMICOLON       reduce using rule 59 (constant -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 59 (constant -> EXP_NUM .)


state 40

    (83) expression -> array .
    (92) assignment -> array . EQUAL expression
    (99) assignment -> array . ADD_ASSIGN expression
    (100) assignment -> array . SUB_ASSIGN expression
    (101) assignment -> array . DIV_ASSIGN expression
    (102) assignment -> array . MUL_ASSIGN expression
    (103) assignment -> array . MOD_ASSIGN expression
    (106) unary_expression -> array . INC_OP
    (107) unary_expression -> array . DEC_OP

    PLUS            reduce using rule 83 (expression -> array .)
    MINUS           reduce using rule 83 (expression -> array .)
    MULTIPLY        reduce using rule 83 (expression -> array .)
    DIVIDE          reduce using rule 83 (expression -> array .)
    L_OP            reduce using rule 83 (expression -> array .)
    G_OP            reduce using rule 83 (expression -> array .)
    NE_OP           reduce using rule 83 (expression -> array .)
    EQ_OP           reduce using rule 83 (expression -> array .)
    GE_OP           reduce using rule 83 (expression -> array .)
    LE_OP           reduce using rule 83 (expression -> array .)
    AND_OP          reduce using rule 83 (expression -> array .)
    OR_OP           reduce using rule 83 (expression -> array .)
    MODULO          reduce using rule 83 (expression -> array .)
    SEMICOLON       reduce using rule 83 (expression -> array .)
    COMMA           reduce using rule 83 (expression -> array .)
    RIGHT_SQUARE    reduce using rule 83 (expression -> array .)
    RIGHT_ROUND     reduce using rule 83 (expression -> array .)
    EQUAL           shift and go to state 69
    ADD_ASSIGN      shift and go to state 72
    SUB_ASSIGN      shift and go to state 65
    DIV_ASSIGN      shift and go to state 71
    MUL_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 66
    INC_OP          shift and go to state 68
    DEC_OP          shift and go to state 67


state 41

    (61) constant -> MINUS . HEX_NUM
    (62) constant -> MINUS . INT_NUM
    (63) constant -> MINUS . REAL_NUM
    (64) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 76
    INT_NUM         shift and go to state 74
    REAL_NUM        shift and go to state 73
    EXP_NUM         shift and go to state 75


state 42

    (60) constant -> CHARACTER .

    PLUS            reduce using rule 60 (constant -> CHARACTER .)
    MINUS           reduce using rule 60 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 60 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 60 (constant -> CHARACTER .)
    L_OP            reduce using rule 60 (constant -> CHARACTER .)
    G_OP            reduce using rule 60 (constant -> CHARACTER .)
    NE_OP           reduce using rule 60 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 60 (constant -> CHARACTER .)
    GE_OP           reduce using rule 60 (constant -> CHARACTER .)
    LE_OP           reduce using rule 60 (constant -> CHARACTER .)
    AND_OP          reduce using rule 60 (constant -> CHARACTER .)
    OR_OP           reduce using rule 60 (constant -> CHARACTER .)
    MODULO          reduce using rule 60 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 60 (constant -> CHARACTER .)
    COMMA           reduce using rule 60 (constant -> CHARACTER .)
    SEMICOLON       reduce using rule 60 (constant -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 60 (constant -> CHARACTER .)


state 43

    (89) expression -> TILDA . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 77

state 44

    (82) expression -> IDENTIFIER .
    (90) expression -> IDENTIFIER . DOT IDENTIFIER
    (91) expression -> IDENTIFIER . DOT IDENTIFIER EQUAL expression
    (65) array -> IDENTIFIER . array_index
    (93) assignment -> IDENTIFIER . EQUAL expression
    (94) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (95) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (96) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (97) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (98) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (104) unary_expression -> IDENTIFIER . INC_OP
    (105) unary_expression -> IDENTIFIER . DEC_OP
    (112) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> IDENTIFIER . LEFT_ROUND RIGHT_ROUND
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 82 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 82 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 82 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 82 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 82 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 82 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 82 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 82 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 82 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 82 (expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 82 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 82 (expression -> IDENTIFIER .)
    DOT             shift and go to state 86
    EQUAL           shift and go to state 83
    ADD_ASSIGN      shift and go to state 85
    SUB_ASSIGN      shift and go to state 78
    DIV_ASSIGN      shift and go to state 87
    MUL_ASSIGN      shift and go to state 84
    MOD_ASSIGN      shift and go to state 79
    INC_OP          shift and go to state 82
    DEC_OP          shift and go to state 81
    LEFT_ROUND      shift and go to state 80
    LEFT_SQUARE     shift and go to state 25

    array_index                    shift and go to state 26

state 45

    (85) expression -> assignment .

    PLUS            reduce using rule 85 (expression -> assignment .)
    MINUS           reduce using rule 85 (expression -> assignment .)
    MULTIPLY        reduce using rule 85 (expression -> assignment .)
    DIVIDE          reduce using rule 85 (expression -> assignment .)
    L_OP            reduce using rule 85 (expression -> assignment .)
    G_OP            reduce using rule 85 (expression -> assignment .)
    NE_OP           reduce using rule 85 (expression -> assignment .)
    EQ_OP           reduce using rule 85 (expression -> assignment .)
    GE_OP           reduce using rule 85 (expression -> assignment .)
    LE_OP           reduce using rule 85 (expression -> assignment .)
    AND_OP          reduce using rule 85 (expression -> assignment .)
    OR_OP           reduce using rule 85 (expression -> assignment .)
    MODULO          reduce using rule 85 (expression -> assignment .)
    SEMICOLON       reduce using rule 85 (expression -> assignment .)
    COMMA           reduce using rule 85 (expression -> assignment .)
    RIGHT_SQUARE    reduce using rule 85 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 85 (expression -> assignment .)


state 46

    (56) constant -> HEX_NUM .

    PLUS            reduce using rule 56 (constant -> HEX_NUM .)
    MINUS           reduce using rule 56 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 56 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 56 (constant -> HEX_NUM .)
    L_OP            reduce using rule 56 (constant -> HEX_NUM .)
    G_OP            reduce using rule 56 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 56 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 56 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 56 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 56 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 56 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 56 (constant -> HEX_NUM .)
    MODULO          reduce using rule 56 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 56 (constant -> HEX_NUM .)
    COMMA           reduce using rule 56 (constant -> HEX_NUM .)
    SEMICOLON       reduce using rule 56 (constant -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 56 (constant -> HEX_NUM .)


state 47

    (81) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 88

state 48

    (108) unary_expression -> INC_OP . IDENTIFIER
    (109) unary_expression -> INC_OP . array
    (65) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 90

    array                          shift and go to state 89

state 49

    (57) constant -> INT_NUM .

    PLUS            reduce using rule 57 (constant -> INT_NUM .)
    MINUS           reduce using rule 57 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 57 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 57 (constant -> INT_NUM .)
    L_OP            reduce using rule 57 (constant -> INT_NUM .)
    G_OP            reduce using rule 57 (constant -> INT_NUM .)
    NE_OP           reduce using rule 57 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 57 (constant -> INT_NUM .)
    GE_OP           reduce using rule 57 (constant -> INT_NUM .)
    LE_OP           reduce using rule 57 (constant -> INT_NUM .)
    AND_OP          reduce using rule 57 (constant -> INT_NUM .)
    OR_OP           reduce using rule 57 (constant -> INT_NUM .)
    MODULO          reduce using rule 57 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 57 (constant -> INT_NUM .)
    COMMA           reduce using rule 57 (constant -> INT_NUM .)
    SEMICOLON       reduce using rule 57 (constant -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 57 (constant -> INT_NUM .)


state 50

    (55) declaration_assignment -> IDENTIFIER EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 55 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 55 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 51

    (58) constant -> REAL_NUM .

    PLUS            reduce using rule 58 (constant -> REAL_NUM .)
    MINUS           reduce using rule 58 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 58 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 58 (constant -> REAL_NUM .)
    L_OP            reduce using rule 58 (constant -> REAL_NUM .)
    G_OP            reduce using rule 58 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 58 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 58 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 58 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 58 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 58 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 58 (constant -> REAL_NUM .)
    MODULO          reduce using rule 58 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 58 (constant -> REAL_NUM .)
    COMMA           reduce using rule 58 (constant -> REAL_NUM .)
    SEMICOLON       reduce using rule 58 (constant -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 58 (constant -> REAL_NUM .)


state 52

    (66) array_index -> LEFT_SQUARE expression . RIGHT_SQUARE
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_SQUARE    shift and go to state 104
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 53

    (47) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (50) declaration_list -> . declaration
    (51) declaration_list -> . declaration_list COMMA declaration
    (52) declaration -> . IDENTIFIER
    (53) declaration -> . array
    (54) declaration -> . declaration_assignment
    (65) array -> . IDENTIFIER array_index
    (55) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 14
    declaration_list               shift and go to state 105
    declaration                    shift and go to state 16
    array                          shift and go to state 17

state 54

    (44) struct -> STRUCT IDENTIFIER left_curl struct_declaration_list . right_curl SEMICOLON
    (45) struct_declaration_list -> struct_declaration_list . declaration_statement
    (118) right_curl -> . RIGHT_CURL
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    RIGHT_CURL      shift and go to state 107
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 53
    declaration_statement          shift and go to state 108
    right_curl                     shift and go to state 106

state 55

    (46) struct_declaration_list -> declaration_statement .

    RIGHT_CURL      reduce using rule 46 (struct_declaration_list -> declaration_statement .)
    CHAR            reduce using rule 46 (struct_declaration_list -> declaration_statement .)
    INT             reduce using rule 46 (struct_declaration_list -> declaration_statement .)
    FLOAT           reduce using rule 46 (struct_declaration_list -> declaration_statement .)
    VOID            reduce using rule 46 (struct_declaration_list -> declaration_statement .)


state 56

    (15) argument -> type_specifier array_parameter .

    RIGHT_ROUND     reduce using rule 15 (argument -> type_specifier array_parameter .)
    COMMA           reduce using rule 15 (argument -> type_specifier array_parameter .)


state 57

    (16) array_parameter -> array .

    RIGHT_ROUND     reduce using rule 16 (array_parameter -> array .)
    COMMA           reduce using rule 16 (array_parameter -> array .)


state 58

    (14) argument -> type_specifier IDENTIFIER .
    (17) array_parameter -> IDENTIFIER . LEFT_SQUARE RIGHT_SQUARE
    (65) array -> IDENTIFIER . array_index
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 14 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 14 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 109

    array_index                    shift and go to state 26

state 59

    (19) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .

    STRUCT          reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    CHAR            reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 19 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)


state 60

    (21) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 125
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 61

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . left_curl statement_list right_curl
    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (117) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 127
    LEFT_CURL       shift and go to state 27

    left_curl                      shift and go to state 128

state 62

    (13) argument_list -> argument_list COMMA . argument
    (14) argument -> . type_specifier IDENTIFIER
    (15) argument -> . type_specifier array_parameter
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 129

state 63

    (111) unary_expression -> DEC_OP array .

    PLUS            reduce using rule 111 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 111 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 111 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 111 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 111 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 111 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 111 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 111 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 111 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 111 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 111 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 111 (unary_expression -> DEC_OP array .)
    MODULO          reduce using rule 111 (unary_expression -> DEC_OP array .)
    SEMICOLON       reduce using rule 111 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 111 (unary_expression -> DEC_OP array .)
    RIGHT_SQUARE    reduce using rule 111 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 111 (unary_expression -> DEC_OP array .)


state 64

    (110) unary_expression -> DEC_OP IDENTIFIER .
    (65) array -> IDENTIFIER . array_index
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    MODULO          reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 110 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 25

    array_index                    shift and go to state 26

state 65

    (100) assignment -> array SUB_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 130

state 66

    (103) assignment -> array MOD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 131

state 67

    (107) unary_expression -> array DEC_OP .

    PLUS            reduce using rule 107 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 107 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 107 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 107 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 107 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 107 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 107 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 107 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 107 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 107 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 107 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 107 (unary_expression -> array DEC_OP .)
    MODULO          reduce using rule 107 (unary_expression -> array DEC_OP .)
    SEMICOLON       reduce using rule 107 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 107 (unary_expression -> array DEC_OP .)
    RIGHT_SQUARE    reduce using rule 107 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 107 (unary_expression -> array DEC_OP .)


state 68

    (106) unary_expression -> array INC_OP .

    PLUS            reduce using rule 106 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 106 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 106 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 106 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 106 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 106 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 106 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 106 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 106 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 106 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 106 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 106 (unary_expression -> array INC_OP .)
    MODULO          reduce using rule 106 (unary_expression -> array INC_OP .)
    SEMICOLON       reduce using rule 106 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 106 (unary_expression -> array INC_OP .)
    RIGHT_SQUARE    reduce using rule 106 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 106 (unary_expression -> array INC_OP .)


state 69

    (92) assignment -> array EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 132

state 70

    (102) assignment -> array MUL_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 133

state 71

    (101) assignment -> array DIV_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 134

state 72

    (99) assignment -> array ADD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 135

state 73

    (63) constant -> MINUS REAL_NUM .

    PLUS            reduce using rule 63 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 63 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 63 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 63 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 63 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 63 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    MODULO          reduce using rule 63 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 63 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 63 (constant -> MINUS REAL_NUM .)
    SEMICOLON       reduce using rule 63 (constant -> MINUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 63 (constant -> MINUS REAL_NUM .)


state 74

    (62) constant -> MINUS INT_NUM .

    PLUS            reduce using rule 62 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 62 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 62 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 62 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 62 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 62 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 62 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 62 (constant -> MINUS INT_NUM .)
    MODULO          reduce using rule 62 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 62 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 62 (constant -> MINUS INT_NUM .)
    SEMICOLON       reduce using rule 62 (constant -> MINUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 62 (constant -> MINUS INT_NUM .)


state 75

    (64) constant -> MINUS EXP_NUM .

    PLUS            reduce using rule 64 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 64 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 64 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 64 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 64 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 64 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    MODULO          reduce using rule 64 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 64 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 64 (constant -> MINUS EXP_NUM .)
    SEMICOLON       reduce using rule 64 (constant -> MINUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 64 (constant -> MINUS EXP_NUM .)


state 76

    (61) constant -> MINUS HEX_NUM .

    PLUS            reduce using rule 61 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 61 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 61 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 61 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 61 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 61 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    MODULO          reduce using rule 61 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 61 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 61 (constant -> MINUS HEX_NUM .)
    SEMICOLON       reduce using rule 61 (constant -> MINUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 61 (constant -> MINUS HEX_NUM .)


state 77

    (89) expression -> TILDA expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 89 (expression -> TILDA expression .)
    MINUS           reduce using rule 89 (expression -> TILDA expression .)
    MULTIPLY        reduce using rule 89 (expression -> TILDA expression .)
    DIVIDE          reduce using rule 89 (expression -> TILDA expression .)
    L_OP            reduce using rule 89 (expression -> TILDA expression .)
    G_OP            reduce using rule 89 (expression -> TILDA expression .)
    NE_OP           reduce using rule 89 (expression -> TILDA expression .)
    EQ_OP           reduce using rule 89 (expression -> TILDA expression .)
    GE_OP           reduce using rule 89 (expression -> TILDA expression .)
    LE_OP           reduce using rule 89 (expression -> TILDA expression .)
    AND_OP          reduce using rule 89 (expression -> TILDA expression .)
    OR_OP           reduce using rule 89 (expression -> TILDA expression .)
    MODULO          reduce using rule 89 (expression -> TILDA expression .)
    SEMICOLON       reduce using rule 89 (expression -> TILDA expression .)
    COMMA           reduce using rule 89 (expression -> TILDA expression .)
    RIGHT_SQUARE    reduce using rule 89 (expression -> TILDA expression .)
    RIGHT_ROUND     reduce using rule 89 (expression -> TILDA expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]
  ! MODULO          [ shift and go to state 100 ]


state 78

    (95) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 136

state 79

    (98) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 137

state 80

    (112) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (113) function_call -> IDENTIFIER LEFT_ROUND . RIGHT_ROUND
    (114) function_call_list -> . function_argument
    (115) function_call_list -> . function_call_list COMMA function_argument
    (116) function_argument -> . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 138
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    function_call_list             shift and go to state 139
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    function_argument              shift and go to state 140
    array                          shift and go to state 40
    expression                     shift and go to state 141

state 81

    (105) unary_expression -> IDENTIFIER DEC_OP .

    PLUS            reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    MODULO          reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    SEMICOLON       reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_SQUARE    reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 105 (unary_expression -> IDENTIFIER DEC_OP .)


state 82

    (104) unary_expression -> IDENTIFIER INC_OP .

    PLUS            reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    MODULO          reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    SEMICOLON       reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_SQUARE    reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 104 (unary_expression -> IDENTIFIER INC_OP .)


state 83

    (93) assignment -> IDENTIFIER EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 142

state 84

    (97) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 143

state 85

    (94) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 144

state 86

    (90) expression -> IDENTIFIER DOT . IDENTIFIER
    (91) expression -> IDENTIFIER DOT . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 145


state 87

    (96) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 146

state 88

    (81) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 147
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 89

    (109) unary_expression -> INC_OP array .

    PLUS            reduce using rule 109 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 109 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 109 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 109 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 109 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 109 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 109 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 109 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 109 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 109 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 109 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 109 (unary_expression -> INC_OP array .)
    MODULO          reduce using rule 109 (unary_expression -> INC_OP array .)
    SEMICOLON       reduce using rule 109 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 109 (unary_expression -> INC_OP array .)
    RIGHT_SQUARE    reduce using rule 109 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 109 (unary_expression -> INC_OP array .)


state 90

    (108) unary_expression -> INC_OP IDENTIFIER .
    (65) array -> IDENTIFIER . array_index
    (66) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    MODULO          reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 108 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 25

    array_index                    shift and go to state 26

state 91

    (78) expression -> expression LE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 148

state 92

    (72) expression -> expression DIVIDE . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 149

state 93

    (74) expression -> expression G_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 150

state 94

    (73) expression -> expression L_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 151

state 95

    (79) expression -> expression AND_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 152

state 96

    (77) expression -> expression GE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 153

state 97

    (69) expression -> expression PLUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 154

state 98

    (76) expression -> expression EQ_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 155

state 99

    (71) expression -> expression MULTIPLY . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 156

state 100

    (88) expression -> expression MODULO . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 157

state 101

    (70) expression -> expression MINUS . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 158

state 102

    (75) expression -> expression NE_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 159

state 103

    (80) expression -> expression OR_OP . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 160

state 104

    (66) array_index -> LEFT_SQUARE expression RIGHT_SQUARE .

    SEMICOLON       reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 66 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)


state 105

    (47) declaration_statement -> type_specifier declaration_list . SEMICOLON
    (51) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 161
    COMMA           shift and go to state 21


state 106

    (44) struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl . SEMICOLON

    SEMICOLON       shift and go to state 162


state 107

    (118) right_curl -> RIGHT_CURL .

    RIGHT_CURL      reduce using rule 118 (right_curl -> RIGHT_CURL .)
    IF              reduce using rule 118 (right_curl -> RIGHT_CURL .)
    FOR             reduce using rule 118 (right_curl -> RIGHT_CURL .)
    WHILE           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    RETURN          reduce using rule 118 (right_curl -> RIGHT_CURL .)
    CONTINUE        reduce using rule 118 (right_curl -> RIGHT_CURL .)
    BREAK           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    PRINT           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    STRUCT          reduce using rule 118 (right_curl -> RIGHT_CURL .)
    SEMICOLON       reduce using rule 118 (right_curl -> RIGHT_CURL .)
    STATIC          reduce using rule 118 (right_curl -> RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 118 (right_curl -> RIGHT_CURL .)
    IDENTIFIER      reduce using rule 118 (right_curl -> RIGHT_CURL .)
    TILDA           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    CHAR            reduce using rule 118 (right_curl -> RIGHT_CURL .)
    INT             reduce using rule 118 (right_curl -> RIGHT_CURL .)
    FLOAT           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    VOID            reduce using rule 118 (right_curl -> RIGHT_CURL .)
    HEX_NUM         reduce using rule 118 (right_curl -> RIGHT_CURL .)
    INT_NUM         reduce using rule 118 (right_curl -> RIGHT_CURL .)
    REAL_NUM        reduce using rule 118 (right_curl -> RIGHT_CURL .)
    EXP_NUM         reduce using rule 118 (right_curl -> RIGHT_CURL .)
    CHARACTER       reduce using rule 118 (right_curl -> RIGHT_CURL .)
    MINUS           reduce using rule 118 (right_curl -> RIGHT_CURL .)
    INC_OP          reduce using rule 118 (right_curl -> RIGHT_CURL .)
    DEC_OP          reduce using rule 118 (right_curl -> RIGHT_CURL .)
    ELSE            reduce using rule 118 (right_curl -> RIGHT_CURL .)
    $end            reduce using rule 118 (right_curl -> RIGHT_CURL .)


state 108

    (45) struct_declaration_list -> struct_declaration_list declaration_statement .

    RIGHT_CURL      reduce using rule 45 (struct_declaration_list -> struct_declaration_list declaration_statement .)
    CHAR            reduce using rule 45 (struct_declaration_list -> struct_declaration_list declaration_statement .)
    INT             reduce using rule 45 (struct_declaration_list -> struct_declaration_list declaration_statement .)
    FLOAT           reduce using rule 45 (struct_declaration_list -> struct_declaration_list declaration_statement .)
    VOID            reduce using rule 45 (struct_declaration_list -> struct_declaration_list declaration_statement .)


state 109

    (17) array_parameter -> IDENTIFIER LEFT_SQUARE . RIGHT_SQUARE
    (66) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_SQUARE    shift and go to state 163
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 52

state 110

    (32) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    WHILE           reduce using rule 32 (statement -> expression_statement .)
    RETURN          reduce using rule 32 (statement -> expression_statement .)
    CONTINUE        reduce using rule 32 (statement -> expression_statement .)
    BREAK           reduce using rule 32 (statement -> expression_statement .)
    PRINT           reduce using rule 32 (statement -> expression_statement .)
    STRUCT          reduce using rule 32 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 32 (statement -> expression_statement .)
    STATIC          reduce using rule 32 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 32 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 32 (statement -> expression_statement .)
    TILDA           reduce using rule 32 (statement -> expression_statement .)
    CHAR            reduce using rule 32 (statement -> expression_statement .)
    INT             reduce using rule 32 (statement -> expression_statement .)
    FLOAT           reduce using rule 32 (statement -> expression_statement .)
    VOID            reduce using rule 32 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 32 (statement -> expression_statement .)
    INT_NUM         reduce using rule 32 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 32 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 32 (statement -> expression_statement .)
    CHARACTER       reduce using rule 32 (statement -> expression_statement .)
    MINUS           reduce using rule 32 (statement -> expression_statement .)
    INC_OP          reduce using rule 32 (statement -> expression_statement .)
    DEC_OP          reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 111

    (35) statement -> RETURN . SEMICOLON
    (36) statement -> RETURN . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 164
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 165

state 112

    (33) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 166


state 113

    (49) static_declaration_statement -> STATIC . type_specifier declaration_list SEMICOLON
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID

    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 167

state 114

    (41) statement -> PRINT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 168


state 115

    (42) statement -> struct .

    RIGHT_CURL      reduce using rule 42 (statement -> struct .)
    IF              reduce using rule 42 (statement -> struct .)
    FOR             reduce using rule 42 (statement -> struct .)
    WHILE           reduce using rule 42 (statement -> struct .)
    RETURN          reduce using rule 42 (statement -> struct .)
    CONTINUE        reduce using rule 42 (statement -> struct .)
    BREAK           reduce using rule 42 (statement -> struct .)
    PRINT           reduce using rule 42 (statement -> struct .)
    STRUCT          reduce using rule 42 (statement -> struct .)
    SEMICOLON       reduce using rule 42 (statement -> struct .)
    STATIC          reduce using rule 42 (statement -> struct .)
    LEFT_ROUND      reduce using rule 42 (statement -> struct .)
    IDENTIFIER      reduce using rule 42 (statement -> struct .)
    TILDA           reduce using rule 42 (statement -> struct .)
    CHAR            reduce using rule 42 (statement -> struct .)
    INT             reduce using rule 42 (statement -> struct .)
    FLOAT           reduce using rule 42 (statement -> struct .)
    VOID            reduce using rule 42 (statement -> struct .)
    HEX_NUM         reduce using rule 42 (statement -> struct .)
    INT_NUM         reduce using rule 42 (statement -> struct .)
    REAL_NUM        reduce using rule 42 (statement -> struct .)
    EXP_NUM         reduce using rule 42 (statement -> struct .)
    CHARACTER       reduce using rule 42 (statement -> struct .)
    MINUS           reduce using rule 42 (statement -> struct .)
    INC_OP          reduce using rule 42 (statement -> struct .)
    DEC_OP          reduce using rule 42 (statement -> struct .)
    ELSE            reduce using rule 42 (statement -> struct .)


state 116

    (67) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 67 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 67 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 67 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 67 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 67 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 67 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 67 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 67 (expression_statement -> SEMICOLON .)
    STRUCT          reduce using rule 67 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 67 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 67 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 67 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (expression_statement -> SEMICOLON .)
    TILDA           reduce using rule 67 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 67 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 67 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 67 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 67 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 67 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 67 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 67 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 67 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 67 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 67 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 67 (expression_statement -> SEMICOLON .)


state 117

    (37) statement -> declaration_statement .

    RIGHT_CURL      reduce using rule 37 (statement -> declaration_statement .)
    IF              reduce using rule 37 (statement -> declaration_statement .)
    FOR             reduce using rule 37 (statement -> declaration_statement .)
    WHILE           reduce using rule 37 (statement -> declaration_statement .)
    RETURN          reduce using rule 37 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 37 (statement -> declaration_statement .)
    BREAK           reduce using rule 37 (statement -> declaration_statement .)
    PRINT           reduce using rule 37 (statement -> declaration_statement .)
    STRUCT          reduce using rule 37 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 37 (statement -> declaration_statement .)
    STATIC          reduce using rule 37 (statement -> declaration_statement .)
    LEFT_ROUND      reduce using rule 37 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 37 (statement -> declaration_statement .)
    TILDA           reduce using rule 37 (statement -> declaration_statement .)
    CHAR            reduce using rule 37 (statement -> declaration_statement .)
    INT             reduce using rule 37 (statement -> declaration_statement .)
    FLOAT           reduce using rule 37 (statement -> declaration_statement .)
    VOID            reduce using rule 37 (statement -> declaration_statement .)
    HEX_NUM         reduce using rule 37 (statement -> declaration_statement .)
    INT_NUM         reduce using rule 37 (statement -> declaration_statement .)
    REAL_NUM        reduce using rule 37 (statement -> declaration_statement .)
    EXP_NUM         reduce using rule 37 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 37 (statement -> declaration_statement .)
    MINUS           reduce using rule 37 (statement -> declaration_statement .)
    INC_OP          reduce using rule 37 (statement -> declaration_statement .)
    DEC_OP          reduce using rule 37 (statement -> declaration_statement .)
    ELSE            reduce using rule 37 (statement -> declaration_statement .)


state 118

    (23) statement_list -> statement .

    RIGHT_CURL      reduce using rule 23 (statement_list -> statement .)
    IF              reduce using rule 23 (statement_list -> statement .)
    FOR             reduce using rule 23 (statement_list -> statement .)
    WHILE           reduce using rule 23 (statement_list -> statement .)
    RETURN          reduce using rule 23 (statement_list -> statement .)
    CONTINUE        reduce using rule 23 (statement_list -> statement .)
    BREAK           reduce using rule 23 (statement_list -> statement .)
    PRINT           reduce using rule 23 (statement_list -> statement .)
    STRUCT          reduce using rule 23 (statement_list -> statement .)
    SEMICOLON       reduce using rule 23 (statement_list -> statement .)
    STATIC          reduce using rule 23 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 23 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 23 (statement_list -> statement .)
    TILDA           reduce using rule 23 (statement_list -> statement .)
    CHAR            reduce using rule 23 (statement_list -> statement .)
    INT             reduce using rule 23 (statement_list -> statement .)
    FLOAT           reduce using rule 23 (statement_list -> statement .)
    VOID            reduce using rule 23 (statement_list -> statement .)
    HEX_NUM         reduce using rule 23 (statement_list -> statement .)
    INT_NUM         reduce using rule 23 (statement_list -> statement .)
    REAL_NUM        reduce using rule 23 (statement_list -> statement .)
    EXP_NUM         reduce using rule 23 (statement_list -> statement .)
    CHARACTER       reduce using rule 23 (statement_list -> statement .)
    MINUS           reduce using rule 23 (statement_list -> statement .)
    INC_OP          reduce using rule 23 (statement_list -> statement .)
    DEC_OP          reduce using rule 23 (statement_list -> statement .)


state 119

    (30) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 169


state 120

    (38) statement -> static_declaration_statement .

    RIGHT_CURL      reduce using rule 38 (statement -> static_declaration_statement .)
    IF              reduce using rule 38 (statement -> static_declaration_statement .)
    FOR             reduce using rule 38 (statement -> static_declaration_statement .)
    WHILE           reduce using rule 38 (statement -> static_declaration_statement .)
    RETURN          reduce using rule 38 (statement -> static_declaration_statement .)
    CONTINUE        reduce using rule 38 (statement -> static_declaration_statement .)
    BREAK           reduce using rule 38 (statement -> static_declaration_statement .)
    PRINT           reduce using rule 38 (statement -> static_declaration_statement .)
    STRUCT          reduce using rule 38 (statement -> static_declaration_statement .)
    SEMICOLON       reduce using rule 38 (statement -> static_declaration_statement .)
    STATIC          reduce using rule 38 (statement -> static_declaration_statement .)
    LEFT_ROUND      reduce using rule 38 (statement -> static_declaration_statement .)
    IDENTIFIER      reduce using rule 38 (statement -> static_declaration_statement .)
    TILDA           reduce using rule 38 (statement -> static_declaration_statement .)
    CHAR            reduce using rule 38 (statement -> static_declaration_statement .)
    INT             reduce using rule 38 (statement -> static_declaration_statement .)
    FLOAT           reduce using rule 38 (statement -> static_declaration_statement .)
    VOID            reduce using rule 38 (statement -> static_declaration_statement .)
    HEX_NUM         reduce using rule 38 (statement -> static_declaration_statement .)
    INT_NUM         reduce using rule 38 (statement -> static_declaration_statement .)
    REAL_NUM        reduce using rule 38 (statement -> static_declaration_statement .)
    EXP_NUM         reduce using rule 38 (statement -> static_declaration_statement .)
    CHARACTER       reduce using rule 38 (statement -> static_declaration_statement .)
    MINUS           reduce using rule 38 (statement -> static_declaration_statement .)
    INC_OP          reduce using rule 38 (statement -> static_declaration_statement .)
    DEC_OP          reduce using rule 38 (statement -> static_declaration_statement .)
    ELSE            reduce using rule 38 (statement -> static_declaration_statement .)


state 121

    (24) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl

    LEFT_ROUND      shift and go to state 170


state 122

    (43) statement -> STRUCT . IDENTIFIER IDENTIFIER SEMICOLON
    (44) struct -> STRUCT . IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON

    IDENTIFIER      shift and go to state 171


state 123

    (40) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 172


state 124

    (39) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 173


state 125

    (21) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 175
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 126

    (68) expression_statement -> expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 176
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 127

    (18) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    STRUCT          reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    CHAR            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 18 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 128

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 177
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 129

    (13) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 13 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 13 (argument_list -> argument_list COMMA argument .)


state 130

    (100) assignment -> array SUB_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 100 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 100 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 100 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 100 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 100 (assignment -> array SUB_ASSIGN expression .) ]


state 131

    (103) assignment -> array MOD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 103 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 103 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 103 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 103 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 103 (assignment -> array MOD_ASSIGN expression .) ]


state 132

    (92) assignment -> array EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 92 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 92 (assignment -> array EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 92 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 92 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> array EQUAL expression .) ]
  ! MODULO          [ reduce using rule 92 (assignment -> array EQUAL expression .) ]


state 133

    (102) assignment -> array MUL_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 102 (assignment -> array MUL_ASSIGN expression .)
    COMMA           reduce using rule 102 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 102 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 102 (assignment -> array MUL_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 102 (assignment -> array MUL_ASSIGN expression .) ]


state 134

    (101) assignment -> array DIV_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 101 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 101 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 101 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 101 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 101 (assignment -> array DIV_ASSIGN expression .) ]


state 135

    (99) assignment -> array ADD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 99 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 99 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 99 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 99 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 99 (assignment -> array ADD_ASSIGN expression .) ]


state 136

    (95) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 95 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 137

    (98) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 98 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 138

    (113) function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .

    PLUS            reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 113 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)


state 139

    (112) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (115) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 178
    COMMA           shift and go to state 179


state 140

    (114) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 114 (function_call_list -> function_argument .)
    COMMA           reduce using rule 114 (function_call_list -> function_argument .)


state 141

    (116) function_argument -> expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     reduce using rule 116 (function_argument -> expression .)
    COMMA           reduce using rule 116 (function_argument -> expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 142

    (93) assignment -> IDENTIFIER EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MODULO          [ reduce using rule 93 (assignment -> IDENTIFIER EQUAL expression .) ]


state 143

    (97) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 97 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 144

    (94) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 94 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 145

    (90) expression -> IDENTIFIER DOT IDENTIFIER .
    (91) expression -> IDENTIFIER DOT IDENTIFIER . EQUAL expression

    PLUS            reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    L_OP            reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    G_OP            reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    NE_OP           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    EQ_OP           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    GE_OP           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    LE_OP           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    AND_OP          reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    OR_OP           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    MODULO          reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 90 (expression -> IDENTIFIER DOT IDENTIFIER .)
    EQUAL           shift and go to state 180


state 146

    (96) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 96 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 147

    (81) expression -> LEFT_ROUND expression RIGHT_ROUND .

    PLUS            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 81 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 148

    (78) expression -> expression LE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 78 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 78 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 78 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 78 (expression -> expression LE_OP expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 78 (expression -> expression LE_OP expression .)
    RIGHT_SQUARE    reduce using rule 78 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 78 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! MODULO          [ reduce using rule 78 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 149

    (72) expression -> expression DIVIDE expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 72 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 72 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 72 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 72 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 72 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 72 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 72 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 72 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 72 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 72 (expression -> expression DIVIDE expression .)
    RIGHT_SQUARE    reduce using rule 72 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 72 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]
  ! MODULO          [ shift and go to state 100 ]


state 150

    (74) expression -> expression G_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 74 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 74 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 74 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 74 (expression -> expression G_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 74 (expression -> expression G_OP expression .)
    RIGHT_SQUARE    reduce using rule 74 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 74 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! MODULO          [ reduce using rule 74 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 151

    (73) expression -> expression L_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 73 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 73 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 73 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 73 (expression -> expression L_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 73 (expression -> expression L_OP expression .)
    RIGHT_SQUARE    reduce using rule 73 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! MODULO          [ reduce using rule 73 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 152

    (79) expression -> expression AND_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    AND_OP          reduce using rule 79 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 79 (expression -> expression AND_OP expression .)
    SEMICOLON       reduce using rule 79 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 79 (expression -> expression AND_OP expression .)
    RIGHT_SQUARE    reduce using rule 79 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 79 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! MODULO          [ reduce using rule 79 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 153

    (77) expression -> expression GE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    L_OP            reduce using rule 77 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 77 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 77 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 77 (expression -> expression GE_OP expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 77 (expression -> expression GE_OP expression .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 77 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! MODULO          [ reduce using rule 77 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 154

    (69) expression -> expression PLUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 69 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 69 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 69 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 69 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 69 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 69 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 69 (expression -> expression PLUS expression .)
    RIGHT_SQUARE    reduce using rule 69 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! MULTIPLY        [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 155

    (76) expression -> expression EQ_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    NE_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 76 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 76 (expression -> expression EQ_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression EQ_OP expression .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 76 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! MODULO          [ reduce using rule 76 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 156

    (71) expression -> expression MULTIPLY expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 71 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 71 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 71 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 71 (expression -> expression MULTIPLY expression .)
    RIGHT_SQUARE    reduce using rule 71 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]
  ! MODULO          [ shift and go to state 100 ]


state 157

    (88) expression -> expression MODULO expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 88 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 88 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 88 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 88 (expression -> expression MODULO expression .)
    L_OP            reduce using rule 88 (expression -> expression MODULO expression .)
    G_OP            reduce using rule 88 (expression -> expression MODULO expression .)
    NE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    EQ_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    GE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    LE_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    AND_OP          reduce using rule 88 (expression -> expression MODULO expression .)
    OR_OP           reduce using rule 88 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 88 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 88 (expression -> expression MODULO expression .)
    RIGHT_SQUARE    reduce using rule 88 (expression -> expression MODULO expression .)
    RIGHT_ROUND     reduce using rule 88 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! MULTIPLY        [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]
  ! MODULO          [ shift and go to state 100 ]


state 158

    (70) expression -> expression MINUS expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    PLUS            reduce using rule 70 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 70 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 70 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 70 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 70 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 70 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 70 (expression -> expression MINUS expression .)
    RIGHT_SQUARE    reduce using rule 70 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    MODULO          shift and go to state 100

  ! MULTIPLY        [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 101 ]
  ! L_OP            [ shift and go to state 94 ]
  ! G_OP            [ shift and go to state 93 ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! GE_OP           [ shift and go to state 96 ]
  ! LE_OP           [ shift and go to state 91 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 159

    (75) expression -> expression NE_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    NE_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 75 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 75 (expression -> expression NE_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 75 (expression -> expression NE_OP expression .)
    RIGHT_SQUARE    reduce using rule 75 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 75 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! MODULO          [ reduce using rule 75 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 102 ]
  ! EQ_OP           [ shift and go to state 98 ]
  ! AND_OP          [ shift and go to state 95 ]
  ! OR_OP           [ shift and go to state 103 ]


state 160

    (80) expression -> expression OR_OP expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    OR_OP           reduce using rule 80 (expression -> expression OR_OP expression .)
    SEMICOLON       reduce using rule 80 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 80 (expression -> expression OR_OP expression .)
    RIGHT_SQUARE    reduce using rule 80 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 80 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! MODULO          [ reduce using rule 80 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 103 ]


state 161

    (47) declaration_statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PRINT           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    STRUCT          reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    STATIC          reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    TILDA           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 47 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 162

    (44) struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .

    RIGHT_CURL      reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    IF              reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    FOR             reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    WHILE           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    RETURN          reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    CONTINUE        reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    BREAK           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    PRINT           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    STRUCT          reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    SEMICOLON       reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    STATIC          reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    LEFT_ROUND      reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    TILDA           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    CHAR            reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    INT             reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    FLOAT           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    VOID            reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    HEX_NUM         reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    INT_NUM         reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    REAL_NUM        reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    EXP_NUM         reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    CHARACTER       reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    MINUS           reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    INC_OP          reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    DEC_OP          reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    ELSE            reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)
    $end            reduce using rule 44 (struct -> STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON .)


state 163

    (17) array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .

    RIGHT_ROUND     reduce using rule 17 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 17 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)


state 164

    (35) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 35 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 35 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 35 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 35 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 35 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 35 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement -> RETURN SEMICOLON .)
    STATIC          reduce using rule 35 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 35 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (statement -> RETURN SEMICOLON .)
    TILDA           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 35 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 35 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 35 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 35 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 35 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 35 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 35 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 35 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 35 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 35 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 35 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 35 (statement -> RETURN SEMICOLON .)


state 165

    (36) statement -> RETURN expression . SEMICOLON
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 181
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 166

    (33) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 182

state 167

    (49) static_declaration_statement -> STATIC type_specifier . declaration_list SEMICOLON
    (50) declaration_list -> . declaration
    (51) declaration_list -> . declaration_list COMMA declaration
    (52) declaration -> . IDENTIFIER
    (53) declaration -> . array
    (54) declaration -> . declaration_assignment
    (65) array -> . IDENTIFIER array_index
    (55) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 14
    declaration_list               shift and go to state 183
    declaration                    shift and go to state 16
    array                          shift and go to state 17

state 168

    (41) statement -> PRINT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 184


state 169

    (30) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 116
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 185
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 170

    (24) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 186

state 171

    (43) statement -> STRUCT IDENTIFIER . IDENTIFIER SEMICOLON
    (44) struct -> STRUCT IDENTIFIER . left_curl struct_declaration_list right_curl SEMICOLON
    (117) left_curl -> . LEFT_CURL

    IDENTIFIER      shift and go to state 187
    LEFT_CURL       shift and go to state 27

    left_curl                      shift and go to state 28

state 172

    (40) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 40 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 40 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 40 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 40 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 40 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 40 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 40 (statement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 40 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 40 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (statement -> BREAK SEMICOLON .)
    TILDA           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 40 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 40 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 40 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 40 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 40 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 40 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 40 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 40 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 40 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 40 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 40 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 40 (statement -> BREAK SEMICOLON .)


state 173

    (39) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    TILDA           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> CONTINUE SEMICOLON .)


state 174

    (22) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 22 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 22 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 22 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 22 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 22 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 22 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 22 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 22 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 22 (statement_list -> statement_list statement .)
    TILDA           reduce using rule 22 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 22 (statement_list -> statement_list statement .)
    INT             reduce using rule 22 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 22 (statement_list -> statement_list statement .)
    VOID            reduce using rule 22 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 22 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 22 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 22 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 22 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 22 (statement_list -> statement_list statement .)


state 175

    (21) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .

    STRUCT          reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 21 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)


state 176

    (68) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    TILDA           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 68 (expression_statement -> expression SEMICOLON .)


state 177

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    right_curl                     shift and go to state 188
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 178

    (112) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    PLUS            reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MODULO          reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 112 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 179

    (115) function_call_list -> function_call_list COMMA . function_argument
    (116) function_argument -> . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    function_argument              shift and go to state 189
    array                          shift and go to state 40
    expression                     shift and go to state 141

state 180

    (91) expression -> IDENTIFIER DOT IDENTIFIER EQUAL . expression
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 190

state 181

    (36) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    STATIC          reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    TILDA           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 36 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 36 (statement -> RETURN expression SEMICOLON .)


state 182

    (33) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 191
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 183

    (49) static_declaration_statement -> STATIC type_specifier declaration_list . SEMICOLON
    (51) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 192
    COMMA           shift and go to state 21


state 184

    (41) statement -> PRINT IDENTIFIER SEMICOLON .

    RIGHT_CURL      reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LEFT_ROUND      reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    TILDA           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT             reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    HEX_NUM         reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT_NUM         reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    REAL_NUM        reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    EXP_NUM         reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 41 (statement -> PRINT IDENTIFIER SEMICOLON .)


state 185

    (30) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 116
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 193
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 186

    (24) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 194
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 187

    (43) statement -> STRUCT IDENTIFIER IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 195


state 188

    (20) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .

    STRUCT          reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 20 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)


state 189

    (115) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 115 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 115 (function_call_list -> function_call_list COMMA function_argument .)


state 190

    (91) expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100

  ! PLUS            [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]
  ! MODULO          [ reduce using rule 91 (expression -> IDENTIFIER DOT IDENTIFIER EQUAL expression .) ]


state 191

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (117) left_curl -> . LEFT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 27
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 196
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 197
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 192

    (49) static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    PRINT           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    STRUCT          reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    STATIC          reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    TILDA           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 49 (static_declaration_statement -> STATIC type_specifier declaration_list SEMICOLON .)


state 193

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 198

state 194

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (117) left_curl -> . LEFT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 27
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 199
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 200
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 195

    (43) statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .

    RIGHT_CURL      reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    IF              reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    STRUCT          reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    LEFT_ROUND      reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    TILDA           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    INT             reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    HEX_NUM         reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    INT_NUM         reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    REAL_NUM        reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    EXP_NUM         reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 43 (statement -> STRUCT IDENTIFIER IDENTIFIER SEMICOLON .)


state 196

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 201
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 197

    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRUCT          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STATIC          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 198

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (69) expression -> expression . PLUS expression
    (70) expression -> expression . MINUS expression
    (71) expression -> expression . MULTIPLY expression
    (72) expression -> expression . DIVIDE expression
    (73) expression -> expression . L_OP expression
    (74) expression -> expression . G_OP expression
    (75) expression -> expression . NE_OP expression
    (76) expression -> expression . EQ_OP expression
    (77) expression -> expression . GE_OP expression
    (78) expression -> expression . LE_OP expression
    (79) expression -> expression . AND_OP expression
    (80) expression -> expression . OR_OP expression
    (88) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 202
    PLUS            shift and go to state 97
    MINUS           shift and go to state 101
    MULTIPLY        shift and go to state 99
    DIVIDE          shift and go to state 92
    L_OP            shift and go to state 94
    G_OP            shift and go to state 93
    NE_OP           shift and go to state 102
    EQ_OP           shift and go to state 98
    GE_OP           shift and go to state 96
    LE_OP           shift and go to state 91
    AND_OP          shift and go to state 95
    OR_OP           shift and go to state 103
    MODULO          shift and go to state 100


state 199

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE left_curl statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 203
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 200

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRUCT          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STATIC          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 204

  ! ELSE            [ reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 201

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 205
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 202

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . left_curl statement_list right_curl
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (117) left_curl -> . LEFT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 27
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 206
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 207
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 203

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE left_curl statement_list right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 208
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 204

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (117) left_curl -> . LEFT_CURL
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    LEFT_CURL       shift and go to state 27
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 209
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 210
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 205

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRUCT          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STATIC          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)


state 206

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 211
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 207

    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRUCT          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STATIC          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    VOID            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 208

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRUCT          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    STATIC          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            shift and go to state 212

  ! ELSE            [ reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .) ]


state 209

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 213
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 210

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PRINT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRUCT          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STATIC          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    TILDA           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    VOID            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 211

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 214
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 212

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . left_curl statement_list right_curl
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (117) left_curl -> . LEFT_CURL
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    LEFT_CURL       shift and go to state 27
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 215
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 216
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 213

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 217
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 214

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    STRUCT          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    STATIC          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)


state 215

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl . statement_list right_curl
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 118
    statement_list                 shift and go to state 218
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 216

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    PRINT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    STRUCT          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    STATIC          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    TILDA           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    VOID            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    MINUS           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    ELSE            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)


state 217

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    STRUCT          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    STATIC          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)


state 218

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list . right_curl
    (22) statement_list -> statement_list . statement
    (118) right_curl -> . RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . RETURN SEMICOLON
    (36) statement -> . RETURN expression SEMICOLON
    (37) statement -> . declaration_statement
    (38) statement -> . static_declaration_statement
    (39) statement -> . CONTINUE SEMICOLON
    (40) statement -> . BREAK SEMICOLON
    (41) statement -> . PRINT IDENTIFIER SEMICOLON
    (42) statement -> . struct
    (43) statement -> . STRUCT IDENTIFIER IDENTIFIER SEMICOLON
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (47) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (49) static_declaration_statement -> . STATIC type_specifier declaration_list SEMICOLON
    (44) struct -> . STRUCT IDENTIFIER left_curl struct_declaration_list right_curl SEMICOLON
    (69) expression -> . expression PLUS expression
    (70) expression -> . expression MINUS expression
    (71) expression -> . expression MULTIPLY expression
    (72) expression -> . expression DIVIDE expression
    (73) expression -> . expression L_OP expression
    (74) expression -> . expression G_OP expression
    (75) expression -> . expression NE_OP expression
    (76) expression -> . expression EQ_OP expression
    (77) expression -> . expression GE_OP expression
    (78) expression -> . expression LE_OP expression
    (79) expression -> . expression AND_OP expression
    (80) expression -> . expression OR_OP expression
    (81) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (82) expression -> . IDENTIFIER
    (83) expression -> . array
    (84) expression -> . constant
    (85) expression -> . assignment
    (86) expression -> . unary_expression
    (87) expression -> . function_call
    (88) expression -> . expression MODULO expression
    (89) expression -> . TILDA expression
    (90) expression -> . IDENTIFIER DOT IDENTIFIER
    (91) expression -> . IDENTIFIER DOT IDENTIFIER EQUAL expression
    (8) type_specifier -> . CHAR
    (9) type_specifier -> . INT
    (10) type_specifier -> . FLOAT
    (11) type_specifier -> . VOID
    (65) array -> . IDENTIFIER array_index
    (56) constant -> . HEX_NUM
    (57) constant -> . INT_NUM
    (58) constant -> . REAL_NUM
    (59) constant -> . EXP_NUM
    (60) constant -> . CHARACTER
    (61) constant -> . MINUS HEX_NUM
    (62) constant -> . MINUS INT_NUM
    (63) constant -> . MINUS REAL_NUM
    (64) constant -> . MINUS EXP_NUM
    (92) assignment -> . array EQUAL expression
    (93) assignment -> . IDENTIFIER EQUAL expression
    (94) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (95) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (96) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (97) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (98) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (99) assignment -> . array ADD_ASSIGN expression
    (100) assignment -> . array SUB_ASSIGN expression
    (101) assignment -> . array DIV_ASSIGN expression
    (102) assignment -> . array MUL_ASSIGN expression
    (103) assignment -> . array MOD_ASSIGN expression
    (104) unary_expression -> . IDENTIFIER INC_OP
    (105) unary_expression -> . IDENTIFIER DEC_OP
    (106) unary_expression -> . array INC_OP
    (107) unary_expression -> . array DEC_OP
    (108) unary_expression -> . INC_OP IDENTIFIER
    (109) unary_expression -> . INC_OP array
    (110) unary_expression -> . DEC_OP IDENTIFIER
    (111) unary_expression -> . DEC_OP array
    (112) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (113) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 107
    IF              shift and go to state 121
    FOR             shift and go to state 119
    WHILE           shift and go to state 112
    RETURN          shift and go to state 111
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 123
    PRINT           shift and go to state 114
    STRUCT          shift and go to state 122
    SEMICOLON       shift and go to state 116
    STATIC          shift and go to state 113
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 2
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    VOID            shift and go to state 1
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 110
    type_specifier                 shift and go to state 53
    constant                       shift and go to state 35
    struct                         shift and go to state 115
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 219
    declaration_statement          shift and go to state 117
    statement                      shift and go to state 174
    static_declaration_statement   shift and go to state 120
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 219

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    STRUCT          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    STATIC          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)

