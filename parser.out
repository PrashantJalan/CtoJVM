Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    STRING
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_definition
Rule 5     function -> function_declaration
Rule 6     function -> declaration_statement
Rule 7     type_specifier -> CHAR
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> SHORT
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> LONG
Rule 12    type_specifier -> FLOAT
Rule 13    type_specifier -> DOUBLE
Rule 14    type_specifier -> SIGNED
Rule 15    type_specifier -> UNSIGNED
Rule 16    argument_list -> argument
Rule 17    argument_list -> argument_list COMMA argument
Rule 18    argument -> type_specifier IDENTIFIER
Rule 19    argument -> type_specifier array_parameter
Rule 20    array_parameter -> array
Rule 21    array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
Rule 22    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 23    function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
Rule 24    function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
Rule 25    function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
Rule 26    statement_list -> statement_list statement
Rule 27    statement_list -> statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 30    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 31    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
Rule 32    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
Rule 33    statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
Rule 34    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
Rule 35    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 36    statement -> expression_statement
Rule 37    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
Rule 38    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 39    statement -> RETURN SEMICOLON
Rule 40    statement -> RETURN expression SEMICOLON
Rule 41    statement -> declaration_statement
Rule 42    statement -> CONTINUE SEMICOLON
Rule 43    statement -> BREAK SEMICOLON
Rule 44    statement -> PRINT IDENTIFIER SEMICOLON
Rule 45    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 46    declaration_list -> declaration
Rule 47    declaration_list -> declaration_list COMMA declaration
Rule 48    declaration -> IDENTIFIER
Rule 49    declaration -> array
Rule 50    declaration -> declaration_assignment
Rule 51    declaration_assignment -> IDENTIFIER EQUAL expression
Rule 52    constant -> HEX_NUM
Rule 53    constant -> INT_NUM
Rule 54    constant -> REAL_NUM
Rule 55    constant -> EXP_NUM
Rule 56    constant -> CHARACTER
Rule 57    constant -> MINUS HEX_NUM
Rule 58    constant -> MINUS INT_NUM
Rule 59    constant -> MINUS REAL_NUM
Rule 60    constant -> MINUS EXP_NUM
Rule 61    array -> IDENTIFIER array_index
Rule 62    array_index -> LEFT_SQUARE expression RIGHT_SQUARE
Rule 63    expression_statement -> SEMICOLON
Rule 64    expression_statement -> expression SEMICOLON
Rule 65    expression -> expression PLUS expression
Rule 66    expression -> expression MINUS expression
Rule 67    expression -> expression MULTIPLY expression
Rule 68    expression -> expression DIVIDE expression
Rule 69    expression -> expression L_OP expression
Rule 70    expression -> expression G_OP expression
Rule 71    expression -> expression NE_OP expression
Rule 72    expression -> expression EQ_OP expression
Rule 73    expression -> expression GE_OP expression
Rule 74    expression -> expression LE_OP expression
Rule 75    expression -> expression AND_OP expression
Rule 76    expression -> expression OR_OP expression
Rule 77    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 78    expression -> IDENTIFIER
Rule 79    expression -> array
Rule 80    expression -> constant
Rule 81    expression -> assignment
Rule 82    expression -> unary_expression
Rule 83    expression -> function_call
Rule 84    expression -> expression MODULO expression
Rule 85    expression -> TILDA expression
Rule 86    assignment -> array EQUAL expression
Rule 87    assignment -> IDENTIFIER EQUAL expression
Rule 88    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 89    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 90    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 91    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 92    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 93    assignment -> array ADD_ASSIGN expression
Rule 94    assignment -> array SUB_ASSIGN expression
Rule 95    assignment -> array DIV_ASSIGN expression
Rule 96    assignment -> array MUL_ASSIGN expression
Rule 97    assignment -> array MOD_ASSIGN expression
Rule 98    unary_expression -> IDENTIFIER INC_OP
Rule 99    unary_expression -> IDENTIFIER DEC_OP
Rule 100   unary_expression -> array INC_OP
Rule 101   unary_expression -> array DEC_OP
Rule 102   unary_expression -> INC_OP IDENTIFIER
Rule 103   unary_expression -> INC_OP array
Rule 104   unary_expression -> DEC_OP IDENTIFIER
Rule 105   unary_expression -> DEC_OP array
Rule 106   function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 107   function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND
Rule 108   function_call_list -> function_argument
Rule 109   function_call_list -> function_call_list COMMA function_argument
Rule 110   function_argument -> expression
Rule 111   left_curl -> LEFT_CURL
Rule 112   right_curl -> RIGHT_CURL

Terminals, with rules where they appear

ADD_ASSIGN           : 88 93
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 75
AUTO                 : 
BREAK                : 43
CASE                 : 
CHAR                 : 7
CHARACTER            : 56
COLON                : 
COMMA                : 17 47 109
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 42
DEC_OP               : 99 101 104 105
DEFAULT              : 
DIVIDE               : 68
DIV_ASSIGN           : 90 95
DO                   : 
DOT                  : 
DOUBLE               : 13
ELLIPSIS             : 
ELSE                 : 30 31 32 33
ENUM                 : 
EQUAL                : 51 86 87
EQ_OP                : 72
EXCLAMATION          : 
EXP_NUM              : 55 60
EXTERN               : 
FLOAT                : 12
FOR                  : 34 35
GE_OP                : 73
GOTO                 : 
G_OP                 : 70
HASH                 : 
HEADER               : 
HEX_NUM              : 52 57
IDENTIFIER           : 18 21 22 23 24 25 44 48 51 61 78 87 88 89 90 91 92 98 99 102 104 106 107
IF                   : 28 29 30 31 32 33
INC_OP               : 98 100 102 103
INT                  : 10
INT_NUM              : 53 58
LEFT_ASSIGN          : 
LEFT_CURL            : 111
LEFT_OP              : 
LEFT_ROUND           : 22 23 24 25 28 29 30 31 32 33 34 35 37 38 77 106 107
LEFT_SQUARE          : 21 62
LE_OP                : 74
LONG                 : 11
L_OP                 : 69
MINUS                : 57 58 59 60 66
MODULO               : 84
MOD_ASSIGN           : 92 97
MULTIPLY             : 67
MUL_ASSIGN           : 91 96
NE_OP                : 71
OR_ASSIGN            : 
OR_OP                : 76
PIPE                 : 
PLUS                 : 65
POWER                : 
PRINT                : 44
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 54 59
REGISTER             : 
RETURN               : 39 40
RIGHT_ASSIGN         : 
RIGHT_CURL           : 112
RIGHT_OP             : 
RIGHT_ROUND          : 22 23 24 25 28 29 30 31 32 33 34 35 37 38 77 106 107
RIGHT_SQUARE         : 21 62
SEMICOLON            : 22 23 39 40 42 43 44 45 63 64
SHORT                : 9
SIGNED               : 14
SIZEOF               : 
STATIC               : 
STRING               : 
STRUCT               : 
SUB_ASSIGN           : 89 94
SWITCH               : 
TILDA                : 85
TYPEDEF              : 
UNION                : 
UNSIGNED             : 15
VOID                 : 8
VOLATILE             : 
WHILE                : 37 38
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 16 17
argument_list        : 17 22 24
array                : 20 49 79 86 93 94 95 96 97 100 101 103 105
array_index          : 61
array_parameter      : 19
assignment           : 81
constant             : 80
declaration          : 46 47
declaration_assignment : 50
declaration_list     : 45 47
declaration_statement : 6 41
expression           : 28 29 30 31 32 33 34 35 37 38 40 51 62 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 84 84 85 86 87 88 89 90 91 92 93 94 95 96 97 110
expression_statement : 34 34 35 35 36
function             : 2 3
function_argument    : 108 109
function_call        : 83
function_call_list   : 106 109
function_declaration : 5
function_definition  : 4
function_list        : 1 2
left_curl            : 24 25 28 31 32 33 33 34 37
program              : 0
right_curl           : 24 25 28 31 32 33 33 34 37
statement            : 26 27 29 30 30 31 32 35 38
statement_list       : 24 25 26 28 31 32 33 33 34 37
type_specifier       : 18 19 22 23 24 25 45
unary_expression     : 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (24) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (25) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (23) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    function                       shift and go to state 8
    function_definition            shift and go to state 9
    function_declaration           shift and go to state 10
    function_list                  shift and go to state 11
    program                        shift and go to state 7
    type_specifier                 shift and go to state 5
    declaration_statement          shift and go to state 16

state 1

    (9) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 9 (type_specifier -> SHORT .)


state 2

    (8) type_specifier -> VOID .

    IDENTIFIER      reduce using rule 8 (type_specifier -> VOID .)


state 3

    (15) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 15 (type_specifier -> UNSIGNED .)


state 4

    (7) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 7 (type_specifier -> CHAR .)


state 5

    (24) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (25) function_definition -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (23) function_declaration -> type_specifier . IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (45) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (46) declaration_list -> . declaration
    (47) declaration_list -> . declaration_list COMMA declaration
    (48) declaration -> . IDENTIFIER
    (49) declaration -> . array
    (50) declaration -> . declaration_assignment
    (61) array -> . IDENTIFIER array_index
    (51) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 21

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 6

    (11) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 11 (type_specifier -> LONG .)


state 7

    (0) S' -> program .



state 8

    (3) function_list -> function .

    CHAR            reduce using rule 3 (function_list -> function .)
    VOID            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 9

    (4) function -> function_definition .

    CHAR            reduce using rule 4 (function -> function_definition .)
    VOID            reduce using rule 4 (function -> function_definition .)
    SHORT           reduce using rule 4 (function -> function_definition .)
    INT             reduce using rule 4 (function -> function_definition .)
    LONG            reduce using rule 4 (function -> function_definition .)
    FLOAT           reduce using rule 4 (function -> function_definition .)
    DOUBLE          reduce using rule 4 (function -> function_definition .)
    SIGNED          reduce using rule 4 (function -> function_definition .)
    UNSIGNED        reduce using rule 4 (function -> function_definition .)
    $end            reduce using rule 4 (function -> function_definition .)


state 10

    (5) function -> function_declaration .

    CHAR            reduce using rule 5 (function -> function_declaration .)
    VOID            reduce using rule 5 (function -> function_declaration .)
    SHORT           reduce using rule 5 (function -> function_declaration .)
    INT             reduce using rule 5 (function -> function_declaration .)
    LONG            reduce using rule 5 (function -> function_declaration .)
    FLOAT           reduce using rule 5 (function -> function_declaration .)
    DOUBLE          reduce using rule 5 (function -> function_declaration .)
    SIGNED          reduce using rule 5 (function -> function_declaration .)
    UNSIGNED        reduce using rule 5 (function -> function_declaration .)
    $end            reduce using rule 5 (function -> function_declaration .)


state 11

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_definition
    (5) function -> . function_declaration
    (6) function -> . declaration_statement
    (24) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (25) function_definition -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (23) function_declaration -> . type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    function                       shift and go to state 22
    type_specifier                 shift and go to state 5
    function_declaration           shift and go to state 10
    function_definition            shift and go to state 9
    declaration_statement          shift and go to state 16

state 12

    (10) type_specifier -> INT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> INT .)


state 13

    (13) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 13 (type_specifier -> DOUBLE .)


state 14

    (12) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 12 (type_specifier -> FLOAT .)


state 15

    (14) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 14 (type_specifier -> SIGNED .)


state 16

    (6) function -> declaration_statement .

    CHAR            reduce using rule 6 (function -> declaration_statement .)
    VOID            reduce using rule 6 (function -> declaration_statement .)
    SHORT           reduce using rule 6 (function -> declaration_statement .)
    INT             reduce using rule 6 (function -> declaration_statement .)
    LONG            reduce using rule 6 (function -> declaration_statement .)
    FLOAT           reduce using rule 6 (function -> declaration_statement .)
    DOUBLE          reduce using rule 6 (function -> declaration_statement .)
    SIGNED          reduce using rule 6 (function -> declaration_statement .)
    UNSIGNED        reduce using rule 6 (function -> declaration_statement .)
    $end            reduce using rule 6 (function -> declaration_statement .)


state 17

    (50) declaration -> declaration_assignment .

    SEMICOLON       reduce using rule 50 (declaration -> declaration_assignment .)
    COMMA           reduce using rule 50 (declaration -> declaration_assignment .)


state 18

    (45) declaration_statement -> type_specifier declaration_list . SEMICOLON
    (47) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 23


state 19

    (46) declaration_list -> declaration .

    SEMICOLON       reduce using rule 46 (declaration_list -> declaration .)
    COMMA           reduce using rule 46 (declaration_list -> declaration .)


state 20

    (49) declaration -> array .

    SEMICOLON       reduce using rule 49 (declaration -> array .)
    COMMA           reduce using rule 49 (declaration -> array .)


state 21

    (24) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl
    (25) function_definition -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (23) function_declaration -> type_specifier IDENTIFIER . LEFT_ROUND RIGHT_ROUND SEMICOLON
    (48) declaration -> IDENTIFIER .
    (61) array -> IDENTIFIER . array_index
    (51) declaration_assignment -> IDENTIFIER . EQUAL expression
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    LEFT_ROUND      shift and go to state 25
    SEMICOLON       reduce using rule 48 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 48 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 22

    (2) function_list -> function_list function .

    CHAR            reduce using rule 2 (function_list -> function_list function .)
    VOID            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 23

    (47) declaration_list -> declaration_list COMMA . declaration
    (48) declaration -> . IDENTIFIER
    (49) declaration -> . array
    (50) declaration -> . declaration_assignment
    (61) array -> . IDENTIFIER array_index
    (51) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration                    shift and go to state 29
    array                          shift and go to state 20

state 24

    (45) declaration_statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    PRINT           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    TILDA           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    VOID            reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SHORT           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LONG            reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    SIGNED          reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    UNSIGNED        reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    MINUS           reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 45 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 25

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND left_curl statement_list right_curl
    (25) function_definition -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (23) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND . RIGHT_ROUND SEMICOLON
    (16) argument_list -> . argument
    (17) argument_list -> . argument_list COMMA argument
    (18) argument -> . type_specifier IDENTIFIER
    (19) argument -> . type_specifier array_parameter
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    RIGHT_ROUND     shift and go to state 33
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 32
    argument_list                  shift and go to state 34

state 26

    (51) declaration_assignment -> IDENTIFIER EQUAL . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 50

state 27

    (62) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 52

state 28

    (61) array -> IDENTIFIER array_index .

    EQUAL           reduce using rule 61 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 61 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 61 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 61 (array -> IDENTIFIER array_index .)
    MUL_ASSIGN      reduce using rule 61 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 61 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 61 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 61 (array -> IDENTIFIER array_index .)
    RIGHT_SQUARE    reduce using rule 61 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 61 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 61 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 61 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 61 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 61 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 61 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 61 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 61 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 61 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 61 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 61 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 61 (array -> IDENTIFIER array_index .)
    MODULO          reduce using rule 61 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 61 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 61 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 61 (array -> IDENTIFIER array_index .)


state 29

    (47) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 47 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 47 (declaration_list -> declaration_list COMMA declaration .)


state 30

    (48) declaration -> IDENTIFIER .
    (61) array -> IDENTIFIER . array_index
    (51) declaration_assignment -> IDENTIFIER . EQUAL expression
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    SEMICOLON       reduce using rule 48 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 48 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 26
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 31

    (18) argument -> type_specifier . IDENTIFIER
    (19) argument -> type_specifier . array_parameter
    (20) array_parameter -> . array
    (21) array_parameter -> . IDENTIFIER LEFT_SQUARE RIGHT_SQUARE
    (61) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 55

    array                          shift and go to state 54
    array_parameter                shift and go to state 53

state 32

    (16) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 16 (argument_list -> argument .)
    COMMA           reduce using rule 16 (argument_list -> argument .)


state 33

    (25) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . left_curl statement_list right_curl
    (23) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND . SEMICOLON
    (111) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 56
    LEFT_CURL       shift and go to state 57

    left_curl                      shift and go to state 58

state 34

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND left_curl statement_list right_curl
    (22) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (17) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 59
    COMMA           shift and go to state 60


state 35

    (80) expression -> constant .

    PLUS            reduce using rule 80 (expression -> constant .)
    MINUS           reduce using rule 80 (expression -> constant .)
    MULTIPLY        reduce using rule 80 (expression -> constant .)
    DIVIDE          reduce using rule 80 (expression -> constant .)
    L_OP            reduce using rule 80 (expression -> constant .)
    G_OP            reduce using rule 80 (expression -> constant .)
    NE_OP           reduce using rule 80 (expression -> constant .)
    EQ_OP           reduce using rule 80 (expression -> constant .)
    GE_OP           reduce using rule 80 (expression -> constant .)
    LE_OP           reduce using rule 80 (expression -> constant .)
    AND_OP          reduce using rule 80 (expression -> constant .)
    OR_OP           reduce using rule 80 (expression -> constant .)
    MODULO          reduce using rule 80 (expression -> constant .)
    SEMICOLON       reduce using rule 80 (expression -> constant .)
    COMMA           reduce using rule 80 (expression -> constant .)
    RIGHT_SQUARE    reduce using rule 80 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 80 (expression -> constant .)


state 36

    (82) expression -> unary_expression .

    PLUS            reduce using rule 82 (expression -> unary_expression .)
    MINUS           reduce using rule 82 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 82 (expression -> unary_expression .)
    DIVIDE          reduce using rule 82 (expression -> unary_expression .)
    L_OP            reduce using rule 82 (expression -> unary_expression .)
    G_OP            reduce using rule 82 (expression -> unary_expression .)
    NE_OP           reduce using rule 82 (expression -> unary_expression .)
    EQ_OP           reduce using rule 82 (expression -> unary_expression .)
    GE_OP           reduce using rule 82 (expression -> unary_expression .)
    LE_OP           reduce using rule 82 (expression -> unary_expression .)
    AND_OP          reduce using rule 82 (expression -> unary_expression .)
    OR_OP           reduce using rule 82 (expression -> unary_expression .)
    MODULO          reduce using rule 82 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 82 (expression -> unary_expression .)
    COMMA           reduce using rule 82 (expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 82 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 82 (expression -> unary_expression .)


state 37

    (104) unary_expression -> DEC_OP . IDENTIFIER
    (105) unary_expression -> DEC_OP . array
    (61) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 62

    array                          shift and go to state 61

state 38

    (83) expression -> function_call .

    PLUS            reduce using rule 83 (expression -> function_call .)
    MINUS           reduce using rule 83 (expression -> function_call .)
    MULTIPLY        reduce using rule 83 (expression -> function_call .)
    DIVIDE          reduce using rule 83 (expression -> function_call .)
    L_OP            reduce using rule 83 (expression -> function_call .)
    G_OP            reduce using rule 83 (expression -> function_call .)
    NE_OP           reduce using rule 83 (expression -> function_call .)
    EQ_OP           reduce using rule 83 (expression -> function_call .)
    GE_OP           reduce using rule 83 (expression -> function_call .)
    LE_OP           reduce using rule 83 (expression -> function_call .)
    AND_OP          reduce using rule 83 (expression -> function_call .)
    OR_OP           reduce using rule 83 (expression -> function_call .)
    MODULO          reduce using rule 83 (expression -> function_call .)
    SEMICOLON       reduce using rule 83 (expression -> function_call .)
    COMMA           reduce using rule 83 (expression -> function_call .)
    RIGHT_SQUARE    reduce using rule 83 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 83 (expression -> function_call .)


state 39

    (55) constant -> EXP_NUM .

    SEMICOLON       reduce using rule 55 (constant -> EXP_NUM .)
    PLUS            reduce using rule 55 (constant -> EXP_NUM .)
    MINUS           reduce using rule 55 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 55 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 55 (constant -> EXP_NUM .)
    L_OP            reduce using rule 55 (constant -> EXP_NUM .)
    G_OP            reduce using rule 55 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 55 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 55 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 55 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 55 (constant -> EXP_NUM .)
    MODULO          reduce using rule 55 (constant -> EXP_NUM .)
    COMMA           reduce using rule 55 (constant -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 55 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 55 (constant -> EXP_NUM .)


state 40

    (79) expression -> array .
    (86) assignment -> array . EQUAL expression
    (93) assignment -> array . ADD_ASSIGN expression
    (94) assignment -> array . SUB_ASSIGN expression
    (95) assignment -> array . DIV_ASSIGN expression
    (96) assignment -> array . MUL_ASSIGN expression
    (97) assignment -> array . MOD_ASSIGN expression
    (100) unary_expression -> array . INC_OP
    (101) unary_expression -> array . DEC_OP

    PLUS            reduce using rule 79 (expression -> array .)
    MINUS           reduce using rule 79 (expression -> array .)
    MULTIPLY        reduce using rule 79 (expression -> array .)
    DIVIDE          reduce using rule 79 (expression -> array .)
    L_OP            reduce using rule 79 (expression -> array .)
    G_OP            reduce using rule 79 (expression -> array .)
    NE_OP           reduce using rule 79 (expression -> array .)
    EQ_OP           reduce using rule 79 (expression -> array .)
    GE_OP           reduce using rule 79 (expression -> array .)
    LE_OP           reduce using rule 79 (expression -> array .)
    AND_OP          reduce using rule 79 (expression -> array .)
    OR_OP           reduce using rule 79 (expression -> array .)
    MODULO          reduce using rule 79 (expression -> array .)
    SEMICOLON       reduce using rule 79 (expression -> array .)
    COMMA           reduce using rule 79 (expression -> array .)
    RIGHT_SQUARE    reduce using rule 79 (expression -> array .)
    RIGHT_ROUND     reduce using rule 79 (expression -> array .)
    EQUAL           shift and go to state 67
    ADD_ASSIGN      shift and go to state 70
    SUB_ASSIGN      shift and go to state 63
    DIV_ASSIGN      shift and go to state 69
    MUL_ASSIGN      shift and go to state 68
    MOD_ASSIGN      shift and go to state 64
    INC_OP          shift and go to state 66
    DEC_OP          shift and go to state 65


state 41

    (57) constant -> MINUS . HEX_NUM
    (58) constant -> MINUS . INT_NUM
    (59) constant -> MINUS . REAL_NUM
    (60) constant -> MINUS . EXP_NUM

    HEX_NUM         shift and go to state 74
    INT_NUM         shift and go to state 72
    REAL_NUM        shift and go to state 71
    EXP_NUM         shift and go to state 73


state 42

    (56) constant -> CHARACTER .

    SEMICOLON       reduce using rule 56 (constant -> CHARACTER .)
    PLUS            reduce using rule 56 (constant -> CHARACTER .)
    MINUS           reduce using rule 56 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 56 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 56 (constant -> CHARACTER .)
    L_OP            reduce using rule 56 (constant -> CHARACTER .)
    G_OP            reduce using rule 56 (constant -> CHARACTER .)
    NE_OP           reduce using rule 56 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 56 (constant -> CHARACTER .)
    GE_OP           reduce using rule 56 (constant -> CHARACTER .)
    LE_OP           reduce using rule 56 (constant -> CHARACTER .)
    AND_OP          reduce using rule 56 (constant -> CHARACTER .)
    OR_OP           reduce using rule 56 (constant -> CHARACTER .)
    MODULO          reduce using rule 56 (constant -> CHARACTER .)
    COMMA           reduce using rule 56 (constant -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 56 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 56 (constant -> CHARACTER .)


state 43

    (85) expression -> TILDA . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 75

state 44

    (78) expression -> IDENTIFIER .
    (61) array -> IDENTIFIER . array_index
    (87) assignment -> IDENTIFIER . EQUAL expression
    (88) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (89) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (90) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (91) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (92) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (98) unary_expression -> IDENTIFIER . INC_OP
    (99) unary_expression -> IDENTIFIER . DEC_OP
    (106) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> IDENTIFIER . LEFT_ROUND RIGHT_ROUND
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    PLUS            reduce using rule 78 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 78 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 78 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 78 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 78 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 78 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 78 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 78 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 78 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 78 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 78 (expression -> IDENTIFIER .)
    MODULO          reduce using rule 78 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 78 (expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 78 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 78 (expression -> IDENTIFIER .)
    EQUAL           shift and go to state 81
    ADD_ASSIGN      shift and go to state 83
    SUB_ASSIGN      shift and go to state 76
    DIV_ASSIGN      shift and go to state 84
    MUL_ASSIGN      shift and go to state 82
    MOD_ASSIGN      shift and go to state 77
    INC_OP          shift and go to state 80
    DEC_OP          shift and go to state 79
    LEFT_ROUND      shift and go to state 78
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 45

    (81) expression -> assignment .

    PLUS            reduce using rule 81 (expression -> assignment .)
    MINUS           reduce using rule 81 (expression -> assignment .)
    MULTIPLY        reduce using rule 81 (expression -> assignment .)
    DIVIDE          reduce using rule 81 (expression -> assignment .)
    L_OP            reduce using rule 81 (expression -> assignment .)
    G_OP            reduce using rule 81 (expression -> assignment .)
    NE_OP           reduce using rule 81 (expression -> assignment .)
    EQ_OP           reduce using rule 81 (expression -> assignment .)
    GE_OP           reduce using rule 81 (expression -> assignment .)
    LE_OP           reduce using rule 81 (expression -> assignment .)
    AND_OP          reduce using rule 81 (expression -> assignment .)
    OR_OP           reduce using rule 81 (expression -> assignment .)
    MODULO          reduce using rule 81 (expression -> assignment .)
    SEMICOLON       reduce using rule 81 (expression -> assignment .)
    COMMA           reduce using rule 81 (expression -> assignment .)
    RIGHT_SQUARE    reduce using rule 81 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 81 (expression -> assignment .)


state 46

    (52) constant -> HEX_NUM .

    SEMICOLON       reduce using rule 52 (constant -> HEX_NUM .)
    PLUS            reduce using rule 52 (constant -> HEX_NUM .)
    MINUS           reduce using rule 52 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 52 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 52 (constant -> HEX_NUM .)
    L_OP            reduce using rule 52 (constant -> HEX_NUM .)
    G_OP            reduce using rule 52 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 52 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 52 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 52 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 52 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 52 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 52 (constant -> HEX_NUM .)
    MODULO          reduce using rule 52 (constant -> HEX_NUM .)
    COMMA           reduce using rule 52 (constant -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 52 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 52 (constant -> HEX_NUM .)


state 47

    (77) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 85

state 48

    (102) unary_expression -> INC_OP . IDENTIFIER
    (103) unary_expression -> INC_OP . array
    (61) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 87

    array                          shift and go to state 86

state 49

    (53) constant -> INT_NUM .

    SEMICOLON       reduce using rule 53 (constant -> INT_NUM .)
    PLUS            reduce using rule 53 (constant -> INT_NUM .)
    MINUS           reduce using rule 53 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 53 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 53 (constant -> INT_NUM .)
    L_OP            reduce using rule 53 (constant -> INT_NUM .)
    G_OP            reduce using rule 53 (constant -> INT_NUM .)
    NE_OP           reduce using rule 53 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 53 (constant -> INT_NUM .)
    GE_OP           reduce using rule 53 (constant -> INT_NUM .)
    LE_OP           reduce using rule 53 (constant -> INT_NUM .)
    AND_OP          reduce using rule 53 (constant -> INT_NUM .)
    OR_OP           reduce using rule 53 (constant -> INT_NUM .)
    MODULO          reduce using rule 53 (constant -> INT_NUM .)
    COMMA           reduce using rule 53 (constant -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 53 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 53 (constant -> INT_NUM .)


state 50

    (51) declaration_assignment -> IDENTIFIER EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 51 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 51 (declaration_assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 51

    (54) constant -> REAL_NUM .

    SEMICOLON       reduce using rule 54 (constant -> REAL_NUM .)
    PLUS            reduce using rule 54 (constant -> REAL_NUM .)
    MINUS           reduce using rule 54 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 54 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 54 (constant -> REAL_NUM .)
    L_OP            reduce using rule 54 (constant -> REAL_NUM .)
    G_OP            reduce using rule 54 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 54 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 54 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 54 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 54 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 54 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 54 (constant -> REAL_NUM .)
    MODULO          reduce using rule 54 (constant -> REAL_NUM .)
    COMMA           reduce using rule 54 (constant -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 54 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 54 (constant -> REAL_NUM .)


state 52

    (62) array_index -> LEFT_SQUARE expression . RIGHT_SQUARE
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_SQUARE    shift and go to state 101
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 53

    (19) argument -> type_specifier array_parameter .

    RIGHT_ROUND     reduce using rule 19 (argument -> type_specifier array_parameter .)
    COMMA           reduce using rule 19 (argument -> type_specifier array_parameter .)


state 54

    (20) array_parameter -> array .

    RIGHT_ROUND     reduce using rule 20 (array_parameter -> array .)
    COMMA           reduce using rule 20 (array_parameter -> array .)


state 55

    (18) argument -> type_specifier IDENTIFIER .
    (21) array_parameter -> IDENTIFIER . LEFT_SQUARE RIGHT_SQUARE
    (61) array -> IDENTIFIER . array_index
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 18 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 18 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 102

    array_index                    shift and go to state 28

state 56

    (23) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 23 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND SEMICOLON .)


state 57

    (111) left_curl -> LEFT_CURL .

    IF              reduce using rule 111 (left_curl -> LEFT_CURL .)
    FOR             reduce using rule 111 (left_curl -> LEFT_CURL .)
    WHILE           reduce using rule 111 (left_curl -> LEFT_CURL .)
    RETURN          reduce using rule 111 (left_curl -> LEFT_CURL .)
    CONTINUE        reduce using rule 111 (left_curl -> LEFT_CURL .)
    BREAK           reduce using rule 111 (left_curl -> LEFT_CURL .)
    PRINT           reduce using rule 111 (left_curl -> LEFT_CURL .)
    SEMICOLON       reduce using rule 111 (left_curl -> LEFT_CURL .)
    LEFT_ROUND      reduce using rule 111 (left_curl -> LEFT_CURL .)
    IDENTIFIER      reduce using rule 111 (left_curl -> LEFT_CURL .)
    TILDA           reduce using rule 111 (left_curl -> LEFT_CURL .)
    CHAR            reduce using rule 111 (left_curl -> LEFT_CURL .)
    VOID            reduce using rule 111 (left_curl -> LEFT_CURL .)
    SHORT           reduce using rule 111 (left_curl -> LEFT_CURL .)
    INT             reduce using rule 111 (left_curl -> LEFT_CURL .)
    LONG            reduce using rule 111 (left_curl -> LEFT_CURL .)
    FLOAT           reduce using rule 111 (left_curl -> LEFT_CURL .)
    DOUBLE          reduce using rule 111 (left_curl -> LEFT_CURL .)
    SIGNED          reduce using rule 111 (left_curl -> LEFT_CURL .)
    UNSIGNED        reduce using rule 111 (left_curl -> LEFT_CURL .)
    HEX_NUM         reduce using rule 111 (left_curl -> LEFT_CURL .)
    INT_NUM         reduce using rule 111 (left_curl -> LEFT_CURL .)
    REAL_NUM        reduce using rule 111 (left_curl -> LEFT_CURL .)
    EXP_NUM         reduce using rule 111 (left_curl -> LEFT_CURL .)
    CHARACTER       reduce using rule 111 (left_curl -> LEFT_CURL .)
    MINUS           reduce using rule 111 (left_curl -> LEFT_CURL .)
    INC_OP          reduce using rule 111 (left_curl -> LEFT_CURL .)
    DEC_OP          reduce using rule 111 (left_curl -> LEFT_CURL .)


state 58

    (25) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 115
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 59

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . left_curl statement_list right_curl
    (22) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (111) left_curl -> . LEFT_CURL

    SEMICOLON       shift and go to state 117
    LEFT_CURL       shift and go to state 57

    left_curl                      shift and go to state 118

state 60

    (17) argument_list -> argument_list COMMA . argument
    (18) argument -> . type_specifier IDENTIFIER
    (19) argument -> . type_specifier array_parameter
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3

    type_specifier                 shift and go to state 31
    argument                       shift and go to state 119

state 61

    (105) unary_expression -> DEC_OP array .

    RIGHT_SQUARE    reduce using rule 105 (unary_expression -> DEC_OP array .)
    PLUS            reduce using rule 105 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 105 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 105 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 105 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 105 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 105 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 105 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 105 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 105 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 105 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 105 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 105 (unary_expression -> DEC_OP array .)
    MODULO          reduce using rule 105 (unary_expression -> DEC_OP array .)
    SEMICOLON       reduce using rule 105 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 105 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 105 (unary_expression -> DEC_OP array .)


state 62

    (104) unary_expression -> DEC_OP IDENTIFIER .
    (61) array -> IDENTIFIER . array_index
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_SQUARE    reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    PLUS            reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    MODULO          reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 104 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 63

    (94) assignment -> array SUB_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 120

state 64

    (97) assignment -> array MOD_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 121

state 65

    (101) unary_expression -> array DEC_OP .

    RIGHT_SQUARE    reduce using rule 101 (unary_expression -> array DEC_OP .)
    PLUS            reduce using rule 101 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 101 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 101 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 101 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 101 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 101 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 101 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 101 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 101 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 101 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 101 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 101 (unary_expression -> array DEC_OP .)
    MODULO          reduce using rule 101 (unary_expression -> array DEC_OP .)
    SEMICOLON       reduce using rule 101 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 101 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 101 (unary_expression -> array DEC_OP .)


state 66

    (100) unary_expression -> array INC_OP .

    RIGHT_SQUARE    reduce using rule 100 (unary_expression -> array INC_OP .)
    PLUS            reduce using rule 100 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 100 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 100 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 100 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 100 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 100 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 100 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 100 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 100 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 100 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 100 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 100 (unary_expression -> array INC_OP .)
    MODULO          reduce using rule 100 (unary_expression -> array INC_OP .)
    SEMICOLON       reduce using rule 100 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 100 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 100 (unary_expression -> array INC_OP .)


state 67

    (86) assignment -> array EQUAL . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 122

state 68

    (96) assignment -> array MUL_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 123

state 69

    (95) assignment -> array DIV_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 124

state 70

    (93) assignment -> array ADD_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 125

state 71

    (59) constant -> MINUS REAL_NUM .

    SEMICOLON       reduce using rule 59 (constant -> MINUS REAL_NUM .)
    PLUS            reduce using rule 59 (constant -> MINUS REAL_NUM .)
    MINUS           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    MULTIPLY        reduce using rule 59 (constant -> MINUS REAL_NUM .)
    DIVIDE          reduce using rule 59 (constant -> MINUS REAL_NUM .)
    L_OP            reduce using rule 59 (constant -> MINUS REAL_NUM .)
    G_OP            reduce using rule 59 (constant -> MINUS REAL_NUM .)
    NE_OP           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    EQ_OP           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    GE_OP           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    LE_OP           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    AND_OP          reduce using rule 59 (constant -> MINUS REAL_NUM .)
    OR_OP           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    MODULO          reduce using rule 59 (constant -> MINUS REAL_NUM .)
    COMMA           reduce using rule 59 (constant -> MINUS REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 59 (constant -> MINUS REAL_NUM .)
    RIGHT_ROUND     reduce using rule 59 (constant -> MINUS REAL_NUM .)


state 72

    (58) constant -> MINUS INT_NUM .

    SEMICOLON       reduce using rule 58 (constant -> MINUS INT_NUM .)
    PLUS            reduce using rule 58 (constant -> MINUS INT_NUM .)
    MINUS           reduce using rule 58 (constant -> MINUS INT_NUM .)
    MULTIPLY        reduce using rule 58 (constant -> MINUS INT_NUM .)
    DIVIDE          reduce using rule 58 (constant -> MINUS INT_NUM .)
    L_OP            reduce using rule 58 (constant -> MINUS INT_NUM .)
    G_OP            reduce using rule 58 (constant -> MINUS INT_NUM .)
    NE_OP           reduce using rule 58 (constant -> MINUS INT_NUM .)
    EQ_OP           reduce using rule 58 (constant -> MINUS INT_NUM .)
    GE_OP           reduce using rule 58 (constant -> MINUS INT_NUM .)
    LE_OP           reduce using rule 58 (constant -> MINUS INT_NUM .)
    AND_OP          reduce using rule 58 (constant -> MINUS INT_NUM .)
    OR_OP           reduce using rule 58 (constant -> MINUS INT_NUM .)
    MODULO          reduce using rule 58 (constant -> MINUS INT_NUM .)
    COMMA           reduce using rule 58 (constant -> MINUS INT_NUM .)
    RIGHT_SQUARE    reduce using rule 58 (constant -> MINUS INT_NUM .)
    RIGHT_ROUND     reduce using rule 58 (constant -> MINUS INT_NUM .)


state 73

    (60) constant -> MINUS EXP_NUM .

    SEMICOLON       reduce using rule 60 (constant -> MINUS EXP_NUM .)
    PLUS            reduce using rule 60 (constant -> MINUS EXP_NUM .)
    MINUS           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    MULTIPLY        reduce using rule 60 (constant -> MINUS EXP_NUM .)
    DIVIDE          reduce using rule 60 (constant -> MINUS EXP_NUM .)
    L_OP            reduce using rule 60 (constant -> MINUS EXP_NUM .)
    G_OP            reduce using rule 60 (constant -> MINUS EXP_NUM .)
    NE_OP           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    EQ_OP           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    GE_OP           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    LE_OP           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    AND_OP          reduce using rule 60 (constant -> MINUS EXP_NUM .)
    OR_OP           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    MODULO          reduce using rule 60 (constant -> MINUS EXP_NUM .)
    COMMA           reduce using rule 60 (constant -> MINUS EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 60 (constant -> MINUS EXP_NUM .)
    RIGHT_ROUND     reduce using rule 60 (constant -> MINUS EXP_NUM .)


state 74

    (57) constant -> MINUS HEX_NUM .

    SEMICOLON       reduce using rule 57 (constant -> MINUS HEX_NUM .)
    PLUS            reduce using rule 57 (constant -> MINUS HEX_NUM .)
    MINUS           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    MULTIPLY        reduce using rule 57 (constant -> MINUS HEX_NUM .)
    DIVIDE          reduce using rule 57 (constant -> MINUS HEX_NUM .)
    L_OP            reduce using rule 57 (constant -> MINUS HEX_NUM .)
    G_OP            reduce using rule 57 (constant -> MINUS HEX_NUM .)
    NE_OP           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    EQ_OP           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    GE_OP           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    LE_OP           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    AND_OP          reduce using rule 57 (constant -> MINUS HEX_NUM .)
    OR_OP           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    MODULO          reduce using rule 57 (constant -> MINUS HEX_NUM .)
    COMMA           reduce using rule 57 (constant -> MINUS HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 57 (constant -> MINUS HEX_NUM .)
    RIGHT_ROUND     reduce using rule 57 (constant -> MINUS HEX_NUM .)


state 75

    (85) expression -> TILDA expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 85 (expression -> TILDA expression .)
    MINUS           reduce using rule 85 (expression -> TILDA expression .)
    MULTIPLY        reduce using rule 85 (expression -> TILDA expression .)
    DIVIDE          reduce using rule 85 (expression -> TILDA expression .)
    L_OP            reduce using rule 85 (expression -> TILDA expression .)
    G_OP            reduce using rule 85 (expression -> TILDA expression .)
    NE_OP           reduce using rule 85 (expression -> TILDA expression .)
    EQ_OP           reduce using rule 85 (expression -> TILDA expression .)
    GE_OP           reduce using rule 85 (expression -> TILDA expression .)
    LE_OP           reduce using rule 85 (expression -> TILDA expression .)
    AND_OP          reduce using rule 85 (expression -> TILDA expression .)
    OR_OP           reduce using rule 85 (expression -> TILDA expression .)
    MODULO          reduce using rule 85 (expression -> TILDA expression .)
    SEMICOLON       reduce using rule 85 (expression -> TILDA expression .)
    COMMA           reduce using rule 85 (expression -> TILDA expression .)
    RIGHT_SQUARE    reduce using rule 85 (expression -> TILDA expression .)
    RIGHT_ROUND     reduce using rule 85 (expression -> TILDA expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]
  ! MODULO          [ shift and go to state 97 ]


state 76

    (89) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 126

state 77

    (92) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 127

state 78

    (106) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (107) function_call -> IDENTIFIER LEFT_ROUND . RIGHT_ROUND
    (108) function_call_list -> . function_argument
    (109) function_call_list -> . function_call_list COMMA function_argument
    (110) function_argument -> . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 128
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    function_call_list             shift and go to state 129
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    function_argument              shift and go to state 130
    array                          shift and go to state 40
    expression                     shift and go to state 131

state 79

    (99) unary_expression -> IDENTIFIER DEC_OP .

    RIGHT_SQUARE    reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    PLUS            reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    MODULO          reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    SEMICOLON       reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 99 (unary_expression -> IDENTIFIER DEC_OP .)


state 80

    (98) unary_expression -> IDENTIFIER INC_OP .

    RIGHT_SQUARE    reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    PLUS            reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    MODULO          reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    SEMICOLON       reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 98 (unary_expression -> IDENTIFIER INC_OP .)


state 81

    (87) assignment -> IDENTIFIER EQUAL . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 132

state 82

    (91) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 133

state 83

    (88) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 134

state 84

    (90) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 135

state 85

    (77) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 136
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 86

    (103) unary_expression -> INC_OP array .

    RIGHT_SQUARE    reduce using rule 103 (unary_expression -> INC_OP array .)
    PLUS            reduce using rule 103 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 103 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 103 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 103 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 103 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 103 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 103 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 103 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 103 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 103 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 103 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 103 (unary_expression -> INC_OP array .)
    MODULO          reduce using rule 103 (unary_expression -> INC_OP array .)
    SEMICOLON       reduce using rule 103 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 103 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 103 (unary_expression -> INC_OP array .)


state 87

    (102) unary_expression -> INC_OP IDENTIFIER .
    (61) array -> IDENTIFIER . array_index
    (62) array_index -> . LEFT_SQUARE expression RIGHT_SQUARE

    RIGHT_SQUARE    reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    PLUS            reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    MODULO          reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 102 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 88

    (74) expression -> expression LE_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 137

state 89

    (68) expression -> expression DIVIDE . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 138

state 90

    (70) expression -> expression G_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 139

state 91

    (69) expression -> expression L_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 140

state 92

    (75) expression -> expression AND_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 141

state 93

    (73) expression -> expression GE_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 142

state 94

    (65) expression -> expression PLUS . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 143

state 95

    (72) expression -> expression EQ_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 144

state 96

    (67) expression -> expression MULTIPLY . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 145

state 97

    (84) expression -> expression MODULO . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 146

state 98

    (66) expression -> expression MINUS . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 147

state 99

    (71) expression -> expression NE_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 148

state 100

    (76) expression -> expression OR_OP . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 149

state 101

    (62) array_index -> LEFT_SQUARE expression RIGHT_SQUARE .

    SEMICOLON       reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 62 (array_index -> LEFT_SQUARE expression RIGHT_SQUARE .)


state 102

    (21) array_parameter -> IDENTIFIER LEFT_SQUARE . RIGHT_SQUARE
    (62) array_index -> LEFT_SQUARE . expression RIGHT_SQUARE
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_SQUARE    shift and go to state 150
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 52

state 103

    (36) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 36 (statement -> expression_statement .)
    IF              reduce using rule 36 (statement -> expression_statement .)
    FOR             reduce using rule 36 (statement -> expression_statement .)
    WHILE           reduce using rule 36 (statement -> expression_statement .)
    RETURN          reduce using rule 36 (statement -> expression_statement .)
    CONTINUE        reduce using rule 36 (statement -> expression_statement .)
    BREAK           reduce using rule 36 (statement -> expression_statement .)
    PRINT           reduce using rule 36 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 36 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 36 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 36 (statement -> expression_statement .)
    TILDA           reduce using rule 36 (statement -> expression_statement .)
    CHAR            reduce using rule 36 (statement -> expression_statement .)
    VOID            reduce using rule 36 (statement -> expression_statement .)
    SHORT           reduce using rule 36 (statement -> expression_statement .)
    INT             reduce using rule 36 (statement -> expression_statement .)
    LONG            reduce using rule 36 (statement -> expression_statement .)
    FLOAT           reduce using rule 36 (statement -> expression_statement .)
    DOUBLE          reduce using rule 36 (statement -> expression_statement .)
    SIGNED          reduce using rule 36 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 36 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 36 (statement -> expression_statement .)
    INT_NUM         reduce using rule 36 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 36 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 36 (statement -> expression_statement .)
    CHARACTER       reduce using rule 36 (statement -> expression_statement .)
    MINUS           reduce using rule 36 (statement -> expression_statement .)
    INC_OP          reduce using rule 36 (statement -> expression_statement .)
    DEC_OP          reduce using rule 36 (statement -> expression_statement .)
    ELSE            reduce using rule 36 (statement -> expression_statement .)


state 104

    (39) statement -> RETURN . SEMICOLON
    (40) statement -> RETURN . expression SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 151
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 152

state 105

    (37) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 153


state 106

    (44) statement -> PRINT . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 154


state 107

    (45) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (46) declaration_list -> . declaration
    (47) declaration_list -> . declaration_list COMMA declaration
    (48) declaration -> . IDENTIFIER
    (49) declaration -> . array
    (50) declaration -> . declaration_assignment
    (61) array -> . IDENTIFIER array_index
    (51) declaration_assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 30

    declaration_assignment         shift and go to state 17
    declaration_list               shift and go to state 18
    declaration                    shift and go to state 19
    array                          shift and go to state 20

state 108

    (63) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 63 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 63 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 63 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 63 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 63 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 63 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 63 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 63 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 63 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 63 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 63 (expression_statement -> SEMICOLON .)
    TILDA           reduce using rule 63 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 63 (expression_statement -> SEMICOLON .)
    VOID            reduce using rule 63 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 63 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 63 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 63 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 63 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 63 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 63 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 63 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 63 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 63 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 63 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 63 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 63 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 63 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 63 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 63 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 63 (expression_statement -> SEMICOLON .)


state 109

    (42) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 155


state 110

    (27) statement_list -> statement .

    RIGHT_CURL      reduce using rule 27 (statement_list -> statement .)
    IF              reduce using rule 27 (statement_list -> statement .)
    FOR             reduce using rule 27 (statement_list -> statement .)
    WHILE           reduce using rule 27 (statement_list -> statement .)
    RETURN          reduce using rule 27 (statement_list -> statement .)
    CONTINUE        reduce using rule 27 (statement_list -> statement .)
    BREAK           reduce using rule 27 (statement_list -> statement .)
    PRINT           reduce using rule 27 (statement_list -> statement .)
    SEMICOLON       reduce using rule 27 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 27 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 27 (statement_list -> statement .)
    TILDA           reduce using rule 27 (statement_list -> statement .)
    CHAR            reduce using rule 27 (statement_list -> statement .)
    VOID            reduce using rule 27 (statement_list -> statement .)
    SHORT           reduce using rule 27 (statement_list -> statement .)
    INT             reduce using rule 27 (statement_list -> statement .)
    LONG            reduce using rule 27 (statement_list -> statement .)
    FLOAT           reduce using rule 27 (statement_list -> statement .)
    DOUBLE          reduce using rule 27 (statement_list -> statement .)
    SIGNED          reduce using rule 27 (statement_list -> statement .)
    UNSIGNED        reduce using rule 27 (statement_list -> statement .)
    HEX_NUM         reduce using rule 27 (statement_list -> statement .)
    INT_NUM         reduce using rule 27 (statement_list -> statement .)
    REAL_NUM        reduce using rule 27 (statement_list -> statement .)
    EXP_NUM         reduce using rule 27 (statement_list -> statement .)
    CHARACTER       reduce using rule 27 (statement_list -> statement .)
    MINUS           reduce using rule 27 (statement_list -> statement .)
    INC_OP          reduce using rule 27 (statement_list -> statement .)
    DEC_OP          reduce using rule 27 (statement_list -> statement .)


state 111

    (34) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 156


state 112

    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> IF . LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl

    LEFT_ROUND      shift and go to state 157


state 113

    (43) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 158


state 114

    (41) statement -> declaration_statement .

    RIGHT_CURL      reduce using rule 41 (statement -> declaration_statement .)
    IF              reduce using rule 41 (statement -> declaration_statement .)
    FOR             reduce using rule 41 (statement -> declaration_statement .)
    WHILE           reduce using rule 41 (statement -> declaration_statement .)
    RETURN          reduce using rule 41 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 41 (statement -> declaration_statement .)
    BREAK           reduce using rule 41 (statement -> declaration_statement .)
    PRINT           reduce using rule 41 (statement -> declaration_statement .)
    SEMICOLON       reduce using rule 41 (statement -> declaration_statement .)
    LEFT_ROUND      reduce using rule 41 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 41 (statement -> declaration_statement .)
    TILDA           reduce using rule 41 (statement -> declaration_statement .)
    CHAR            reduce using rule 41 (statement -> declaration_statement .)
    VOID            reduce using rule 41 (statement -> declaration_statement .)
    SHORT           reduce using rule 41 (statement -> declaration_statement .)
    INT             reduce using rule 41 (statement -> declaration_statement .)
    LONG            reduce using rule 41 (statement -> declaration_statement .)
    FLOAT           reduce using rule 41 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 41 (statement -> declaration_statement .)
    SIGNED          reduce using rule 41 (statement -> declaration_statement .)
    UNSIGNED        reduce using rule 41 (statement -> declaration_statement .)
    HEX_NUM         reduce using rule 41 (statement -> declaration_statement .)
    INT_NUM         reduce using rule 41 (statement -> declaration_statement .)
    REAL_NUM        reduce using rule 41 (statement -> declaration_statement .)
    EXP_NUM         reduce using rule 41 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 41 (statement -> declaration_statement .)
    MINUS           reduce using rule 41 (statement -> declaration_statement .)
    INC_OP          reduce using rule 41 (statement -> declaration_statement .)
    DEC_OP          reduce using rule 41 (statement -> declaration_statement .)
    ELSE            reduce using rule 41 (statement -> declaration_statement .)


state 115

    (25) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 161
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 116

    (64) expression_statement -> expression . SEMICOLON
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 117

    (22) function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    CHAR            reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    VOID            reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 22 (function_declaration -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 118

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 163
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 119

    (17) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 17 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 17 (argument_list -> argument_list COMMA argument .)


state 120

    (94) assignment -> array SUB_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 94 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 94 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 94 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 94 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 94 (assignment -> array SUB_ASSIGN expression .) ]


state 121

    (97) assignment -> array MOD_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 97 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 97 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 97 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 97 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 97 (assignment -> array MOD_ASSIGN expression .) ]


state 122

    (86) assignment -> array EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 86 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 86 (assignment -> array EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 86 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 86 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 86 (assignment -> array EQUAL expression .) ]
  ! MODULO          [ reduce using rule 86 (assignment -> array EQUAL expression .) ]


state 123

    (96) assignment -> array MUL_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 96 (assignment -> array MUL_ASSIGN expression .)
    COMMA           reduce using rule 96 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 96 (assignment -> array MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 96 (assignment -> array MUL_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 96 (assignment -> array MUL_ASSIGN expression .) ]


state 124

    (95) assignment -> array DIV_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 95 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 95 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 95 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 95 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 95 (assignment -> array DIV_ASSIGN expression .) ]


state 125

    (93) assignment -> array ADD_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 93 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 93 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 93 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 93 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 93 (assignment -> array ADD_ASSIGN expression .) ]


state 126

    (89) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 89 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 127

    (92) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 92 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 128

    (107) function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .

    SEMICOLON       reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    PLUS            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 107 (function_call -> IDENTIFIER LEFT_ROUND RIGHT_ROUND .)


state 129

    (106) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (109) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 164
    COMMA           shift and go to state 165


state 130

    (108) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 108 (function_call_list -> function_argument .)
    COMMA           reduce using rule 108 (function_call_list -> function_argument .)


state 131

    (110) function_argument -> expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_ROUND     reduce using rule 110 (function_argument -> expression .)
    COMMA           reduce using rule 110 (function_argument -> expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 132

    (87) assignment -> IDENTIFIER EQUAL expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]
  ! MODULO          [ reduce using rule 87 (assignment -> IDENTIFIER EQUAL expression .) ]


state 133

    (91) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 91 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 134

    (88) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 88 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 135

    (90) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MODULO          [ reduce using rule 90 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 136

    (77) expression -> LEFT_ROUND expression RIGHT_ROUND .

    PLUS            reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 77 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 137

    (74) expression -> expression LE_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    L_OP            reduce using rule 74 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 74 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 74 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 74 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 74 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 74 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 74 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 74 (expression -> expression LE_OP expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 74 (expression -> expression LE_OP expression .)
    RIGHT_SQUARE    reduce using rule 74 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 74 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 74 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression LE_OP expression .) ]
  ! MODULO          [ reduce using rule 74 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 138

    (68) expression -> expression DIVIDE expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 68 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 68 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 68 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 68 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 68 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 68 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 68 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 68 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 68 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 68 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 68 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 68 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 68 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 68 (expression -> expression DIVIDE expression .)
    RIGHT_SQUARE    reduce using rule 68 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 68 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]
  ! MODULO          [ shift and go to state 97 ]


state 139

    (70) expression -> expression G_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    L_OP            reduce using rule 70 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 70 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 70 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 70 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 70 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 70 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 70 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 70 (expression -> expression G_OP expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 70 (expression -> expression G_OP expression .)
    RIGHT_SQUARE    reduce using rule 70 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 70 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 70 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression G_OP expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 140

    (69) expression -> expression L_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    L_OP            reduce using rule 69 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 69 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 69 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 69 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 69 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 69 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 69 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 69 (expression -> expression L_OP expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 69 (expression -> expression L_OP expression .)
    RIGHT_SQUARE    reduce using rule 69 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 69 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 69 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression L_OP expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 141

    (75) expression -> expression AND_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    AND_OP          reduce using rule 75 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 75 (expression -> expression AND_OP expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 75 (expression -> expression AND_OP expression .)
    RIGHT_SQUARE    reduce using rule 75 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 75 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! MODULO          [ reduce using rule 75 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 142

    (73) expression -> expression GE_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    L_OP            reduce using rule 73 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 73 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 73 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 73 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 73 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 73 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 73 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 73 (expression -> expression GE_OP expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 73 (expression -> expression GE_OP expression .)
    RIGHT_SQUARE    reduce using rule 73 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 73 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression GE_OP expression .) ]
  ! MODULO          [ reduce using rule 73 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 143

    (65) expression -> expression PLUS expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 65 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 65 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 65 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 65 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 65 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 65 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 65 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 65 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 65 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 65 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 65 (expression -> expression PLUS expression .)
    RIGHT_SQUARE    reduce using rule 65 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 65 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! MULTIPLY        [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 65 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 144

    (72) expression -> expression EQ_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    NE_OP           reduce using rule 72 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 72 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 72 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 72 (expression -> expression EQ_OP expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 72 (expression -> expression EQ_OP expression .)
    RIGHT_SQUARE    reduce using rule 72 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 72 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! MODULO          [ reduce using rule 72 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 145

    (67) expression -> expression MULTIPLY expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 67 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 67 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 67 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 67 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 67 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 67 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 67 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 67 (expression -> expression MULTIPLY expression .)
    RIGHT_SQUARE    reduce using rule 67 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 67 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]
  ! MODULO          [ shift and go to state 97 ]


state 146

    (84) expression -> expression MODULO expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 84 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 84 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 84 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 84 (expression -> expression MODULO expression .)
    L_OP            reduce using rule 84 (expression -> expression MODULO expression .)
    G_OP            reduce using rule 84 (expression -> expression MODULO expression .)
    NE_OP           reduce using rule 84 (expression -> expression MODULO expression .)
    EQ_OP           reduce using rule 84 (expression -> expression MODULO expression .)
    GE_OP           reduce using rule 84 (expression -> expression MODULO expression .)
    LE_OP           reduce using rule 84 (expression -> expression MODULO expression .)
    AND_OP          reduce using rule 84 (expression -> expression MODULO expression .)
    OR_OP           reduce using rule 84 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 84 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 84 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 84 (expression -> expression MODULO expression .)
    RIGHT_SQUARE    reduce using rule 84 (expression -> expression MODULO expression .)
    RIGHT_ROUND     reduce using rule 84 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! MULTIPLY        [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]
  ! MODULO          [ shift and go to state 97 ]


state 147

    (66) expression -> expression MINUS expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    PLUS            reduce using rule 66 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 66 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 66 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 66 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 66 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 66 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 66 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 66 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 66 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 66 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 66 (expression -> expression MINUS expression .)
    RIGHT_SQUARE    reduce using rule 66 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 66 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    MODULO          shift and go to state 97

  ! MULTIPLY        [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 66 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 98 ]
  ! L_OP            [ shift and go to state 91 ]
  ! G_OP            [ shift and go to state 90 ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! GE_OP           [ shift and go to state 93 ]
  ! LE_OP           [ shift and go to state 88 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 148

    (71) expression -> expression NE_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    NE_OP           reduce using rule 71 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 71 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 71 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 71 (expression -> expression NE_OP expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 71 (expression -> expression NE_OP expression .)
    RIGHT_SQUARE    reduce using rule 71 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 71 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! MODULO          [ reduce using rule 71 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 99 ]
  ! EQ_OP           [ shift and go to state 95 ]
  ! AND_OP          [ shift and go to state 92 ]
  ! OR_OP           [ shift and go to state 100 ]


state 149

    (76) expression -> expression OR_OP expression .
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    OR_OP           reduce using rule 76 (expression -> expression OR_OP expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 76 (expression -> expression OR_OP expression .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 76 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    MODULO          shift and go to state 97

  ! PLUS            [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! MODULO          [ reduce using rule 76 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 100 ]


state 150

    (21) array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .

    RIGHT_ROUND     reduce using rule 21 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 21 (array_parameter -> IDENTIFIER LEFT_SQUARE RIGHT_SQUARE .)


state 151

    (39) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 39 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 39 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    PRINT           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> RETURN SEMICOLON .)
    TILDA           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    VOID            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 39 (statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 39 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 39 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> RETURN SEMICOLON .)


state 152

    (40) statement -> RETURN expression . SEMICOLON
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    SEMICOLON       shift and go to state 166
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 153

    (37) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 167

state 154

    (44) statement -> PRINT IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 168


state 155

    (42) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    TILDA           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 42 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 42 (statement -> CONTINUE SEMICOLON .)


state 156

    (34) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 169
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 157

    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (30) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (31) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> IF LEFT_ROUND . expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 170

state 158

    (43) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 43 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 43 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 43 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 43 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 43 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    PRINT           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 43 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 43 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (statement -> BREAK SEMICOLON .)
    TILDA           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 43 (statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 43 (statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 43 (statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 43 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 43 (statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 43 (statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 43 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 43 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 43 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 43 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 43 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 43 (statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 43 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 43 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 43 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 43 (statement -> BREAK SEMICOLON .)


state 159

    (112) right_curl -> RIGHT_CURL .

    RIGHT_CURL      reduce using rule 112 (right_curl -> RIGHT_CURL .)
    IF              reduce using rule 112 (right_curl -> RIGHT_CURL .)
    FOR             reduce using rule 112 (right_curl -> RIGHT_CURL .)
    WHILE           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    RETURN          reduce using rule 112 (right_curl -> RIGHT_CURL .)
    CONTINUE        reduce using rule 112 (right_curl -> RIGHT_CURL .)
    BREAK           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    PRINT           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    SEMICOLON       reduce using rule 112 (right_curl -> RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 112 (right_curl -> RIGHT_CURL .)
    IDENTIFIER      reduce using rule 112 (right_curl -> RIGHT_CURL .)
    TILDA           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    CHAR            reduce using rule 112 (right_curl -> RIGHT_CURL .)
    VOID            reduce using rule 112 (right_curl -> RIGHT_CURL .)
    SHORT           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    INT             reduce using rule 112 (right_curl -> RIGHT_CURL .)
    LONG            reduce using rule 112 (right_curl -> RIGHT_CURL .)
    FLOAT           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    DOUBLE          reduce using rule 112 (right_curl -> RIGHT_CURL .)
    SIGNED          reduce using rule 112 (right_curl -> RIGHT_CURL .)
    UNSIGNED        reduce using rule 112 (right_curl -> RIGHT_CURL .)
    HEX_NUM         reduce using rule 112 (right_curl -> RIGHT_CURL .)
    INT_NUM         reduce using rule 112 (right_curl -> RIGHT_CURL .)
    REAL_NUM        reduce using rule 112 (right_curl -> RIGHT_CURL .)
    EXP_NUM         reduce using rule 112 (right_curl -> RIGHT_CURL .)
    CHARACTER       reduce using rule 112 (right_curl -> RIGHT_CURL .)
    MINUS           reduce using rule 112 (right_curl -> RIGHT_CURL .)
    INC_OP          reduce using rule 112 (right_curl -> RIGHT_CURL .)
    DEC_OP          reduce using rule 112 (right_curl -> RIGHT_CURL .)
    ELSE            reduce using rule 112 (right_curl -> RIGHT_CURL .)
    $end            reduce using rule 112 (right_curl -> RIGHT_CURL .)


state 160

    (26) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 26 (statement_list -> statement_list statement .)
    IF              reduce using rule 26 (statement_list -> statement_list statement .)
    FOR             reduce using rule 26 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 26 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 26 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 26 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 26 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 26 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 26 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 26 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 26 (statement_list -> statement_list statement .)
    TILDA           reduce using rule 26 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 26 (statement_list -> statement_list statement .)
    VOID            reduce using rule 26 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 26 (statement_list -> statement_list statement .)
    INT             reduce using rule 26 (statement_list -> statement_list statement .)
    LONG            reduce using rule 26 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 26 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 26 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 26 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 26 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 26 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 26 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 26 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 26 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 26 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 26 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 26 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 26 (statement_list -> statement_list statement .)


state 161

    (25) function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 25 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND RIGHT_ROUND left_curl statement_list right_curl .)


state 162

    (64) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    TILDA           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 64 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 64 (expression_statement -> expression SEMICOLON .)


state 163

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    right_curl                     shift and go to state 171
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 164

    (106) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    SEMICOLON       reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    PLUS            reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MODULO          reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 106 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 165

    (109) function_call_list -> function_call_list COMMA . function_argument
    (110) function_argument -> . expression
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    function_argument              shift and go to state 172
    array                          shift and go to state 40
    expression                     shift and go to state 131

state 166

    (40) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    TILDA           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 40 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 40 (statement -> RETURN expression SEMICOLON .)


state 167

    (37) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 173
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 168

    (44) statement -> PRINT IDENTIFIER SEMICOLON .

    RIGHT_CURL      reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IF              reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LEFT_ROUND      reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    TILDA           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT             reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    SIGNED          reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    UNSIGNED        reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    HEX_NUM         reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INT_NUM         reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    REAL_NUM        reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    EXP_NUM         reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 44 (statement -> PRINT IDENTIFIER SEMICOLON .)


state 169

    (34) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 174
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 170

    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (30) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (31) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> IF LEFT_ROUND expression . RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 175
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 171

    (24) function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .

    CHAR            reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)
    $end            reduce using rule 24 (function_definition -> type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND left_curl statement_list right_curl .)


state 172

    (109) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 109 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 109 (function_call_list -> function_call_list COMMA function_argument .)


state 173

    (37) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (38) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (111) left_curl -> . LEFT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 57
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 176
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 177
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 174

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    array                          shift and go to state 40
    expression                     shift and go to state 178

state 175

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE statement
    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE left_curl statement_list right_curl
    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND . left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (111) left_curl -> . LEFT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 57
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 179
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 180
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 176

    (37) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 181
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 177

    (38) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 38 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 178

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (65) expression -> expression . PLUS expression
    (66) expression -> expression . MINUS expression
    (67) expression -> expression . MULTIPLY expression
    (68) expression -> expression . DIVIDE expression
    (69) expression -> expression . L_OP expression
    (70) expression -> expression . G_OP expression
    (71) expression -> expression . NE_OP expression
    (72) expression -> expression . EQ_OP expression
    (73) expression -> expression . GE_OP expression
    (74) expression -> expression . LE_OP expression
    (75) expression -> expression . AND_OP expression
    (76) expression -> expression . OR_OP expression
    (84) expression -> expression . MODULO expression

    RIGHT_ROUND     shift and go to state 182
    PLUS            shift and go to state 94
    MINUS           shift and go to state 98
    MULTIPLY        shift and go to state 96
    DIVIDE          shift and go to state 89
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    NE_OP           shift and go to state 99
    EQ_OP           shift and go to state 95
    GE_OP           shift and go to state 93
    LE_OP           shift and go to state 88
    AND_OP          shift and go to state 92
    OR_OP           shift and go to state 100
    MODULO          shift and go to state 97


state 179

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE statement
    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl . statement_list right_curl ELSE left_curl statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 183
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 180

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    VOID            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 184

  ! ELSE            [ reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 181

    (37) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 185
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 182

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . left_curl statement_list right_curl
    (35) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (111) left_curl -> . LEFT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    LEFT_CURL       shift and go to state 57
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 186
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 187
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 183

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE statement
    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list . right_curl ELSE left_curl statement_list right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 188
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 184

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (111) left_curl -> . LEFT_CURL
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    LEFT_CURL       shift and go to state 57
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 189
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 190
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 185

    (37) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 37 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)


state 186

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 191
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 187

    (35) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PRINT           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    TILDA           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    VOID            reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LONG            reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 35 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 188

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .
    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE statement
    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl . ELSE left_curl statement_list right_curl

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            shift and go to state 192

  ! ELSE            [ reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl .) ]


state 189

    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 193
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 190

    (30) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PRINT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    TILDA           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    VOID            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SHORT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LONG            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DOUBLE          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SIGNED          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    UNSIGNED        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 30 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 191

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 194
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 192

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . statement
    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE . left_curl statement_list right_curl
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (111) left_curl -> . LEFT_CURL
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    LEFT_CURL       shift and go to state 57
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    left_curl                      shift and go to state 195
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 196
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 193

    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 197
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 194

    (34) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IF              reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FOR             reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    WHILE           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    RETURN          reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    BREAK           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    PRINT           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    TILDA           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHAR            reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    VOID            reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SHORT           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT             reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    LONG            reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    FLOAT           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    SIGNED          reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    MINUS           reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    INC_OP          reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)
    ELSE            reduce using rule 34 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl .)


state 195

    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl . statement_list right_curl
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 110
    statement_list                 shift and go to state 198
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 196

    (31) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .

    RIGHT_CURL      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IF              reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FOR             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    WHILE           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    RETURN          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CONTINUE        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    BREAK           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    PRINT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SEMICOLON       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LEFT_ROUND      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    IDENTIFIER      reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    TILDA           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHAR            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    VOID            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SHORT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT             reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    LONG            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    FLOAT           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DOUBLE          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    SIGNED          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    UNSIGNED        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    HEX_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INT_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    REAL_NUM        reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    EXP_NUM         reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    CHARACTER       reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    MINUS           reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    INC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    DEC_OP          reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)
    ELSE            reduce using rule 31 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement .)


state 197

    (32) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SHORT           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    LONG            reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    SIGNED          reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 32 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl .)


state 198

    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list . right_curl
    (26) statement_list -> statement_list . statement
    (112) right_curl -> . RIGHT_CURL
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (30) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (31) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE statement
    (32) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE left_curl statement_list right_curl
    (33) statement -> . IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl
    (34) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND left_curl statement_list right_curl
    (35) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (36) statement -> . expression_statement
    (37) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl
    (38) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (39) statement -> . RETURN SEMICOLON
    (40) statement -> . RETURN expression SEMICOLON
    (41) statement -> . declaration_statement
    (42) statement -> . CONTINUE SEMICOLON
    (43) statement -> . BREAK SEMICOLON
    (44) statement -> . PRINT IDENTIFIER SEMICOLON
    (63) expression_statement -> . SEMICOLON
    (64) expression_statement -> . expression SEMICOLON
    (45) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (65) expression -> . expression PLUS expression
    (66) expression -> . expression MINUS expression
    (67) expression -> . expression MULTIPLY expression
    (68) expression -> . expression DIVIDE expression
    (69) expression -> . expression L_OP expression
    (70) expression -> . expression G_OP expression
    (71) expression -> . expression NE_OP expression
    (72) expression -> . expression EQ_OP expression
    (73) expression -> . expression GE_OP expression
    (74) expression -> . expression LE_OP expression
    (75) expression -> . expression AND_OP expression
    (76) expression -> . expression OR_OP expression
    (77) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (78) expression -> . IDENTIFIER
    (79) expression -> . array
    (80) expression -> . constant
    (81) expression -> . assignment
    (82) expression -> . unary_expression
    (83) expression -> . function_call
    (84) expression -> . expression MODULO expression
    (85) expression -> . TILDA expression
    (7) type_specifier -> . CHAR
    (8) type_specifier -> . VOID
    (9) type_specifier -> . SHORT
    (10) type_specifier -> . INT
    (11) type_specifier -> . LONG
    (12) type_specifier -> . FLOAT
    (13) type_specifier -> . DOUBLE
    (14) type_specifier -> . SIGNED
    (15) type_specifier -> . UNSIGNED
    (61) array -> . IDENTIFIER array_index
    (52) constant -> . HEX_NUM
    (53) constant -> . INT_NUM
    (54) constant -> . REAL_NUM
    (55) constant -> . EXP_NUM
    (56) constant -> . CHARACTER
    (57) constant -> . MINUS HEX_NUM
    (58) constant -> . MINUS INT_NUM
    (59) constant -> . MINUS REAL_NUM
    (60) constant -> . MINUS EXP_NUM
    (86) assignment -> . array EQUAL expression
    (87) assignment -> . IDENTIFIER EQUAL expression
    (88) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (89) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (90) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (91) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (92) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (93) assignment -> . array ADD_ASSIGN expression
    (94) assignment -> . array SUB_ASSIGN expression
    (95) assignment -> . array DIV_ASSIGN expression
    (96) assignment -> . array MUL_ASSIGN expression
    (97) assignment -> . array MOD_ASSIGN expression
    (98) unary_expression -> . IDENTIFIER INC_OP
    (99) unary_expression -> . IDENTIFIER DEC_OP
    (100) unary_expression -> . array INC_OP
    (101) unary_expression -> . array DEC_OP
    (102) unary_expression -> . INC_OP IDENTIFIER
    (103) unary_expression -> . INC_OP array
    (104) unary_expression -> . DEC_OP IDENTIFIER
    (105) unary_expression -> . DEC_OP array
    (106) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (107) function_call -> . IDENTIFIER LEFT_ROUND RIGHT_ROUND

    RIGHT_CURL      shift and go to state 159
    IF              shift and go to state 112
    FOR             shift and go to state 111
    WHILE           shift and go to state 105
    RETURN          shift and go to state 104
    CONTINUE        shift and go to state 109
    BREAK           shift and go to state 113
    PRINT           shift and go to state 106
    SEMICOLON       shift and go to state 108
    LEFT_ROUND      shift and go to state 47
    IDENTIFIER      shift and go to state 44
    TILDA           shift and go to state 43
    CHAR            shift and go to state 4
    VOID            shift and go to state 2
    SHORT           shift and go to state 1
    INT             shift and go to state 12
    LONG            shift and go to state 6
    FLOAT           shift and go to state 14
    DOUBLE          shift and go to state 13
    SIGNED          shift and go to state 15
    UNSIGNED        shift and go to state 3
    HEX_NUM         shift and go to state 46
    INT_NUM         shift and go to state 49
    REAL_NUM        shift and go to state 51
    EXP_NUM         shift and go to state 39
    CHARACTER       shift and go to state 42
    MINUS           shift and go to state 41
    INC_OP          shift and go to state 48
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 103
    type_specifier                 shift and go to state 107
    constant                       shift and go to state 35
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 45
    function_call                  shift and go to state 38
    right_curl                     shift and go to state 199
    declaration_statement          shift and go to state 114
    statement                      shift and go to state 160
    array                          shift and go to state 40
    expression                     shift and go to state 116

state 199

    (33) statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .

    RIGHT_CURL      reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IF              reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FOR             reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    WHILE           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    RETURN          reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CONTINUE        reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    BREAK           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    PRINT           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SEMICOLON       reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LEFT_ROUND      reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    IDENTIFIER      reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    TILDA           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHAR            reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    VOID            reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SHORT           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT             reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    LONG            reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    FLOAT           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DOUBLE          reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    SIGNED          reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    UNSIGNED        reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    HEX_NUM         reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INT_NUM         reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    REAL_NUM        reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    EXP_NUM         reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    CHARACTER       reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    MINUS           reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    INC_OP          reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    DEC_OP          reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)
    ELSE            reduce using rule 33 (statement -> IF LEFT_ROUND expression RIGHT_ROUND left_curl statement_list right_curl ELSE left_curl statement_list right_curl .)

