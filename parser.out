Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCLAMATION
    COMMENT
    POWER
    ELLIPSIS
    MODULO
    GOTO
    ENUM
    LEFT_OP
    COMMENTS
    OR_ASSIGN
    STATIC
    SIZEOF
    HEADER
    COLON
    TILDA
    UNION
    AMPERSAND
    XOR_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    EXTERN
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    VOLATILE
    DO
    CONST
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    STRUCT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> function_declaration
Rule 5     function -> function_definition
Rule 6     function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
Rule 7     return_type_specifier -> type_specifier
Rule 8     return_type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> SHORT
Rule 11    type_specifier -> INT
Rule 12    type_specifier -> LONG
Rule 13    type_specifier -> FLOAT
Rule 14    type_specifier -> DOUBLE
Rule 15    type_specifier -> SIGNED
Rule 16    type_specifier -> UNSIGNED
Rule 17    argument_list -> argument
Rule 18    argument_list -> argument_list COMMA argument
Rule 19    argument -> type_specifier IDENTIFIER
Rule 20    argument -> type_specifier array
Rule 21    function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 22    statement_list -> statement_list statement
Rule 23    statement_list -> statement
Rule 24    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 25    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 26    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 27    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
Rule 28    statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 29    statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
Rule 30    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 31    statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 32    statement -> expression_statement
Rule 33    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
Rule 34    statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 35    statement -> CONTINUE SEMICOLON
Rule 36    statement -> BREAK SEMICOLON
Rule 37    statement -> RETURN SEMICOLON
Rule 38    statement -> RETURN expression SEMICOLON
Rule 39    statement -> type_specifier declaration_list SEMICOLON
Rule 40    declaration_list -> declaration
Rule 41    declaration_list -> declaration_list COMMA declaration
Rule 42    declaration -> IDENTIFIER
Rule 43    declaration -> array
Rule 44    declaration -> equal_or_initialise
Rule 45    constant -> HEX_NUM
Rule 46    constant -> REAL_NUM
Rule 47    constant -> INT_NUM
Rule 48    constant -> CHARACTER
Rule 49    constant -> STRING
Rule 50    constant -> EXP_NUM
Rule 51    array -> IDENTIFIER array_index
Rule 52    array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
Rule 53    array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE
Rule 54    expression_statement -> SEMICOLON
Rule 55    expression_statement -> expression SEMICOLON
Rule 56    expression -> expression PLUS expression
Rule 57    expression -> expression MINUS expression
Rule 58    expression -> expression MULTIPLY expression
Rule 59    expression -> expression DIVIDE expression
Rule 60    expression -> expression L_OP expression
Rule 61    expression -> expression G_OP expression
Rule 62    expression -> expression NE_OP expression
Rule 63    expression -> expression EQ_OP expression
Rule 64    expression -> expression GE_OP expression
Rule 65    expression -> expression LE_OP expression
Rule 66    expression -> expression AND_OP expression
Rule 67    expression -> expression OR_OP expression
Rule 68    expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 69    expression -> IDENTIFIER
Rule 70    expression -> array
Rule 71    expression -> constant
Rule 72    expression -> assignment
Rule 73    expression -> unary_expression
Rule 74    expression -> function_call
Rule 75    assignment -> equal_or_initialise
Rule 76    equal_or_initialise -> IDENTIFIER EQUAL expression
Rule 77    assignment -> array EQUAL expression
Rule 78    assignment -> IDENTIFIER ADD_ASSIGN expression
Rule 79    assignment -> IDENTIFIER SUB_ASSIGN expression
Rule 80    assignment -> IDENTIFIER DIV_ASSIGN expression
Rule 81    assignment -> IDENTIFIER MUL_ASSIGN expression
Rule 82    assignment -> IDENTIFIER MOD_ASSIGN expression
Rule 83    assignment -> array ADD_ASSIGN expression
Rule 84    assignment -> array SUB_ASSIGN expression
Rule 85    assignment -> array DIV_ASSIGN expression
Rule 86    assignment -> array MOD_ASSIGN expression
Rule 87    unary_expression -> IDENTIFIER INC_OP
Rule 88    unary_expression -> IDENTIFIER DEC_OP
Rule 89    unary_expression -> array INC_OP
Rule 90    unary_expression -> array DEC_OP
Rule 91    unary_expression -> INC_OP IDENTIFIER
Rule 92    unary_expression -> INC_OP array
Rule 93    unary_expression -> DEC_OP IDENTIFIER
Rule 94    unary_expression -> DEC_OP array
Rule 95    function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
Rule 96    function_call_list -> function_argument
Rule 97    function_call_list -> function_call_list COMMA function_argument
Rule 98    function_argument -> IDENTIFIER
Rule 99    function_argument -> array
Rule 100   function_argument -> constant

Terminals, with rules where they appear

ADD_ASSIGN           : 78 83
AMPERSAND            : 
AND_ASSIGN           : 
AND_OP               : 66
AUTO                 : 
BREAK                : 36
CASE                 : 
CHAR                 : 9
CHARACTER            : 48
COLON                : 
COMMA                : 18 41 97
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 35
DEC_OP               : 88 90 93 94
DEFAULT              : 
DIVIDE               : 59
DIV_ASSIGN           : 80 85
DO                   : 
DOT                  : 
DOUBLE               : 14
ELLIPSIS             : 
ELSE                 : 26 27 28 29
ENUM                 : 
EQUAL                : 76 77
EQ_OP                : 63
EXCLAMATION          : 
EXP_NUM              : 50
EXTERN               : 
FLOAT                : 13
FOR                  : 30 31
GE_OP                : 64
GOTO                 : 
G_OP                 : 61
HASH                 : 
HEADER               : 
HEX_NUM              : 45
IDENTIFIER           : 6 19 21 42 51 69 76 78 79 80 81 82 87 88 91 93 95 98
IF                   : 24 25 26 27 28 29
INC_OP               : 87 89 91 92
INT                  : 11
INT_NUM              : 47 52 53
LEFT_ASSIGN          : 
LEFT_CURL            : 21 24 27 28 29 29 30 33
LEFT_OP              : 
LEFT_ROUND           : 6 21 24 25 26 27 28 29 30 31 33 34 68 95
LEFT_SQUARE          : 52 53
LE_OP                : 65
LONG                 : 12
L_OP                 : 60
MINUS                : 57
MODULO               : 
MOD_ASSIGN           : 82 86
MULTIPLY             : 58
MUL_ASSIGN           : 81
NE_OP                : 62
OR_ASSIGN            : 
OR_OP                : 67
PIPE                 : 
PLUS                 : 56
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 46
REGISTER             : 
RETURN               : 37 38
RIGHT_ASSIGN         : 
RIGHT_CURL           : 21 24 27 28 29 29 30 33
RIGHT_OP             : 
RIGHT_ROUND          : 6 21 24 25 26 27 28 29 30 31 33 34 68 95
RIGHT_SQUARE         : 52 53
SEMICOLON            : 6 35 36 37 38 39 54 55
SHORT                : 10
SIGNED               : 15
SIZEOF               : 
STATIC               : 
STRING               : 49
STRUCT               : 
SUB_ASSIGN           : 79 84
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 16
VOID                 : 8
VOLATILE             : 
WHILE                : 33 34
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

argument             : 17 18
argument_list        : 6 18 21
array                : 20 43 70 77 83 84 85 86 89 90 92 94 99
array_index          : 51 52
assignment           : 72
constant             : 71 100
declaration          : 40 41
declaration_list     : 39 41
equal_or_initialise  : 44 75
expression           : 24 25 26 27 28 29 30 31 33 34 38 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 76 77 78 79 80 81 82 83 84 85 86
expression_statement : 30 30 31 31 32
function             : 2 3
function_argument    : 96 97
function_call        : 74
function_call_list   : 95 97
function_declaration : 4
function_definition  : 5
function_list        : 1 2
program              : 0
return_type_specifier : 6 21
statement            : 22 23 25 26 26 27 28 31 34
statement_list       : 21 22 24 27 28 29 29 30 33
type_specifier       : 7 19 20 39
unary_expression     : 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 9
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    function_list                  shift and go to state 12
    type_specifier                 shift and go to state 5
    program                        shift and go to state 8

state 1

    (6) function_declaration -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier . IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    IDENTIFIER      shift and go to state 17


state 2

    (10) type_specifier -> SHORT .

    IDENTIFIER      reduce using rule 10 (type_specifier -> SHORT .)


state 3

    (8) return_type_specifier -> VOID .

    IDENTIFIER      reduce using rule 8 (return_type_specifier -> VOID .)


state 4

    (9) type_specifier -> CHAR .

    IDENTIFIER      reduce using rule 9 (type_specifier -> CHAR .)


state 5

    (7) return_type_specifier -> type_specifier .

    IDENTIFIER      reduce using rule 7 (return_type_specifier -> type_specifier .)


state 6

    (16) type_specifier -> UNSIGNED .

    IDENTIFIER      reduce using rule 16 (type_specifier -> UNSIGNED .)


state 7

    (12) type_specifier -> LONG .

    IDENTIFIER      reduce using rule 12 (type_specifier -> LONG .)


state 8

    (0) S' -> program .



state 9

    (3) function_list -> function .

    VOID            reduce using rule 3 (function_list -> function .)
    CHAR            reduce using rule 3 (function_list -> function .)
    SHORT           reduce using rule 3 (function_list -> function .)
    INT             reduce using rule 3 (function_list -> function .)
    LONG            reduce using rule 3 (function_list -> function .)
    FLOAT           reduce using rule 3 (function_list -> function .)
    DOUBLE          reduce using rule 3 (function_list -> function .)
    SIGNED          reduce using rule 3 (function_list -> function .)
    UNSIGNED        reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 10

    (5) function -> function_definition .

    VOID            reduce using rule 5 (function -> function_definition .)
    CHAR            reduce using rule 5 (function -> function_definition .)
    SHORT           reduce using rule 5 (function -> function_definition .)
    INT             reduce using rule 5 (function -> function_definition .)
    LONG            reduce using rule 5 (function -> function_definition .)
    FLOAT           reduce using rule 5 (function -> function_definition .)
    DOUBLE          reduce using rule 5 (function -> function_definition .)
    SIGNED          reduce using rule 5 (function -> function_definition .)
    UNSIGNED        reduce using rule 5 (function -> function_definition .)
    $end            reduce using rule 5 (function -> function_definition .)


state 11

    (4) function -> function_declaration .

    VOID            reduce using rule 4 (function -> function_declaration .)
    CHAR            reduce using rule 4 (function -> function_declaration .)
    SHORT           reduce using rule 4 (function -> function_declaration .)
    INT             reduce using rule 4 (function -> function_declaration .)
    LONG            reduce using rule 4 (function -> function_declaration .)
    FLOAT           reduce using rule 4 (function -> function_declaration .)
    DOUBLE          reduce using rule 4 (function -> function_declaration .)
    SIGNED          reduce using rule 4 (function -> function_declaration .)
    UNSIGNED        reduce using rule 4 (function -> function_declaration .)
    $end            reduce using rule 4 (function -> function_declaration .)


state 12

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . function_declaration
    (5) function -> . function_definition
    (6) function_declaration -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> . return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (7) return_type_specifier -> . type_specifier
    (8) return_type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    $end            reduce using rule 1 (program -> function_list .)
    VOID            shift and go to state 3
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    function                       shift and go to state 18
    return_type_specifier          shift and go to state 1
    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    type_specifier                 shift and go to state 5

state 13

    (11) type_specifier -> INT .

    IDENTIFIER      reduce using rule 11 (type_specifier -> INT .)


state 14

    (14) type_specifier -> DOUBLE .

    IDENTIFIER      reduce using rule 14 (type_specifier -> DOUBLE .)


state 15

    (13) type_specifier -> FLOAT .

    IDENTIFIER      reduce using rule 13 (type_specifier -> FLOAT .)


state 16

    (15) type_specifier -> SIGNED .

    IDENTIFIER      reduce using rule 15 (type_specifier -> SIGNED .)


state 17

    (6) function_declaration -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER . LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 19


state 18

    (2) function_list -> function_list function .

    VOID            reduce using rule 2 (function_list -> function_list function .)
    CHAR            reduce using rule 2 (function_list -> function_list function .)
    SHORT           reduce using rule 2 (function_list -> function_list function .)
    INT             reduce using rule 2 (function_list -> function_list function .)
    LONG            reduce using rule 2 (function_list -> function_list function .)
    FLOAT           reduce using rule 2 (function_list -> function_list function .)
    DOUBLE          reduce using rule 2 (function_list -> function_list function .)
    SIGNED          reduce using rule 2 (function_list -> function_list function .)
    UNSIGNED        reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 19

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND . argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (17) argument_list -> . argument
    (18) argument_list -> . argument_list COMMA argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 21
    argument_list                  shift and go to state 22

state 20

    (19) argument -> type_specifier . IDENTIFIER
    (20) argument -> type_specifier . array
    (51) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 23

    array                          shift and go to state 24

state 21

    (17) argument_list -> argument .

    RIGHT_ROUND     reduce using rule 17 (argument_list -> argument .)
    COMMA           reduce using rule 17 (argument_list -> argument .)


state 22

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (18) argument_list -> argument_list . COMMA argument

    RIGHT_ROUND     shift and go to state 25
    COMMA           shift and go to state 26


state 23

    (19) argument -> type_specifier IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    COMMA           reduce using rule 19 (argument -> type_specifier IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 24

    (20) argument -> type_specifier array .

    RIGHT_ROUND     reduce using rule 20 (argument -> type_specifier array .)
    COMMA           reduce using rule 20 (argument -> type_specifier array .)


state 25

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . SEMICOLON
    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL

    SEMICOLON       shift and go to state 29
    LEFT_CURL       shift and go to state 30


state 26

    (18) argument_list -> argument_list COMMA . argument
    (19) argument -> . type_specifier IDENTIFIER
    (20) argument -> . type_specifier array
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED

    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6

    type_specifier                 shift and go to state 20
    argument                       shift and go to state 31

state 27

    (53) array_index -> LEFT_SQUARE . INT_NUM RIGHT_SQUARE

    INT_NUM         shift and go to state 32


state 28

    (51) array -> IDENTIFIER array_index .
    (52) array_index -> array_index . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    EQUAL           reduce using rule 51 (array -> IDENTIFIER array_index .)
    ADD_ASSIGN      reduce using rule 51 (array -> IDENTIFIER array_index .)
    SUB_ASSIGN      reduce using rule 51 (array -> IDENTIFIER array_index .)
    DIV_ASSIGN      reduce using rule 51 (array -> IDENTIFIER array_index .)
    MOD_ASSIGN      reduce using rule 51 (array -> IDENTIFIER array_index .)
    INC_OP          reduce using rule 51 (array -> IDENTIFIER array_index .)
    DEC_OP          reduce using rule 51 (array -> IDENTIFIER array_index .)
    SEMICOLON       reduce using rule 51 (array -> IDENTIFIER array_index .)
    PLUS            reduce using rule 51 (array -> IDENTIFIER array_index .)
    MINUS           reduce using rule 51 (array -> IDENTIFIER array_index .)
    MULTIPLY        reduce using rule 51 (array -> IDENTIFIER array_index .)
    DIVIDE          reduce using rule 51 (array -> IDENTIFIER array_index .)
    L_OP            reduce using rule 51 (array -> IDENTIFIER array_index .)
    G_OP            reduce using rule 51 (array -> IDENTIFIER array_index .)
    NE_OP           reduce using rule 51 (array -> IDENTIFIER array_index .)
    EQ_OP           reduce using rule 51 (array -> IDENTIFIER array_index .)
    GE_OP           reduce using rule 51 (array -> IDENTIFIER array_index .)
    LE_OP           reduce using rule 51 (array -> IDENTIFIER array_index .)
    AND_OP          reduce using rule 51 (array -> IDENTIFIER array_index .)
    OR_OP           reduce using rule 51 (array -> IDENTIFIER array_index .)
    RIGHT_ROUND     reduce using rule 51 (array -> IDENTIFIER array_index .)
    COMMA           reduce using rule 51 (array -> IDENTIFIER array_index .)
    LEFT_SQUARE     shift and go to state 33


state 29

    (6) function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .

    VOID            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    CHAR            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SHORT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    INT             reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    LONG            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    FLOAT           reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    DOUBLE          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    SIGNED          reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    UNSIGNED        reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)
    $end            reduce using rule 6 (function_declaration -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND SEMICOLON .)


state 30

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    equal_or_initialise            shift and go to state 53
    statement                      shift and go to state 48
    statement_list                 shift and go to state 60
    array                          shift and go to state 43
    expression                     shift and go to state 61

state 31

    (18) argument_list -> argument_list COMMA argument .

    RIGHT_ROUND     reduce using rule 18 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 18 (argument_list -> argument_list COMMA argument .)


state 32

    (53) array_index -> LEFT_SQUARE INT_NUM . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 62


state 33

    (52) array_index -> array_index LEFT_SQUARE . INT_NUM RIGHT_SQUARE

    INT_NUM         shift and go to state 63


state 34

    (32) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    WHILE           reduce using rule 32 (statement -> expression_statement .)
    CONTINUE        reduce using rule 32 (statement -> expression_statement .)
    BREAK           reduce using rule 32 (statement -> expression_statement .)
    RETURN          reduce using rule 32 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 32 (statement -> expression_statement .)
    CHAR            reduce using rule 32 (statement -> expression_statement .)
    SHORT           reduce using rule 32 (statement -> expression_statement .)
    INT             reduce using rule 32 (statement -> expression_statement .)
    LONG            reduce using rule 32 (statement -> expression_statement .)
    FLOAT           reduce using rule 32 (statement -> expression_statement .)
    DOUBLE          reduce using rule 32 (statement -> expression_statement .)
    SIGNED          reduce using rule 32 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 32 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 32 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 32 (statement -> expression_statement .)
    HEX_NUM         reduce using rule 32 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 32 (statement -> expression_statement .)
    INT_NUM         reduce using rule 32 (statement -> expression_statement .)
    CHARACTER       reduce using rule 32 (statement -> expression_statement .)
    STRING          reduce using rule 32 (statement -> expression_statement .)
    EXP_NUM         reduce using rule 32 (statement -> expression_statement .)
    INC_OP          reduce using rule 32 (statement -> expression_statement .)
    DEC_OP          reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 35

    (37) statement -> RETURN . SEMICOLON
    (38) statement -> RETURN . expression SEMICOLON
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 64
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 65
    equal_or_initialise            shift and go to state 53

state 36

    (73) expression -> unary_expression .

    SEMICOLON       reduce using rule 73 (expression -> unary_expression .)
    PLUS            reduce using rule 73 (expression -> unary_expression .)
    MINUS           reduce using rule 73 (expression -> unary_expression .)
    MULTIPLY        reduce using rule 73 (expression -> unary_expression .)
    DIVIDE          reduce using rule 73 (expression -> unary_expression .)
    L_OP            reduce using rule 73 (expression -> unary_expression .)
    G_OP            reduce using rule 73 (expression -> unary_expression .)
    NE_OP           reduce using rule 73 (expression -> unary_expression .)
    EQ_OP           reduce using rule 73 (expression -> unary_expression .)
    GE_OP           reduce using rule 73 (expression -> unary_expression .)
    LE_OP           reduce using rule 73 (expression -> unary_expression .)
    AND_OP          reduce using rule 73 (expression -> unary_expression .)
    OR_OP           reduce using rule 73 (expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 73 (expression -> unary_expression .)
    COMMA           reduce using rule 73 (expression -> unary_expression .)


state 37

    (93) unary_expression -> DEC_OP . IDENTIFIER
    (94) unary_expression -> DEC_OP . array
    (51) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 67

    array                          shift and go to state 66

state 38

    (74) expression -> function_call .

    SEMICOLON       reduce using rule 74 (expression -> function_call .)
    PLUS            reduce using rule 74 (expression -> function_call .)
    MINUS           reduce using rule 74 (expression -> function_call .)
    MULTIPLY        reduce using rule 74 (expression -> function_call .)
    DIVIDE          reduce using rule 74 (expression -> function_call .)
    L_OP            reduce using rule 74 (expression -> function_call .)
    G_OP            reduce using rule 74 (expression -> function_call .)
    NE_OP           reduce using rule 74 (expression -> function_call .)
    EQ_OP           reduce using rule 74 (expression -> function_call .)
    GE_OP           reduce using rule 74 (expression -> function_call .)
    LE_OP           reduce using rule 74 (expression -> function_call .)
    AND_OP          reduce using rule 74 (expression -> function_call .)
    OR_OP           reduce using rule 74 (expression -> function_call .)
    RIGHT_ROUND     reduce using rule 74 (expression -> function_call .)
    COMMA           reduce using rule 74 (expression -> function_call .)


state 39

    (91) unary_expression -> INC_OP . IDENTIFIER
    (92) unary_expression -> INC_OP . array
    (51) array -> . IDENTIFIER array_index

    IDENTIFIER      shift and go to state 69

    array                          shift and go to state 68

state 40

    (33) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 70


state 41

    (50) constant -> EXP_NUM .

    PLUS            reduce using rule 50 (constant -> EXP_NUM .)
    MINUS           reduce using rule 50 (constant -> EXP_NUM .)
    MULTIPLY        reduce using rule 50 (constant -> EXP_NUM .)
    DIVIDE          reduce using rule 50 (constant -> EXP_NUM .)
    L_OP            reduce using rule 50 (constant -> EXP_NUM .)
    G_OP            reduce using rule 50 (constant -> EXP_NUM .)
    NE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    EQ_OP           reduce using rule 50 (constant -> EXP_NUM .)
    GE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    LE_OP           reduce using rule 50 (constant -> EXP_NUM .)
    AND_OP          reduce using rule 50 (constant -> EXP_NUM .)
    OR_OP           reduce using rule 50 (constant -> EXP_NUM .)
    SEMICOLON       reduce using rule 50 (constant -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 50 (constant -> EXP_NUM .)
    COMMA           reduce using rule 50 (constant -> EXP_NUM .)


state 42

    (71) expression -> constant .

    SEMICOLON       reduce using rule 71 (expression -> constant .)
    PLUS            reduce using rule 71 (expression -> constant .)
    MINUS           reduce using rule 71 (expression -> constant .)
    MULTIPLY        reduce using rule 71 (expression -> constant .)
    DIVIDE          reduce using rule 71 (expression -> constant .)
    L_OP            reduce using rule 71 (expression -> constant .)
    G_OP            reduce using rule 71 (expression -> constant .)
    NE_OP           reduce using rule 71 (expression -> constant .)
    EQ_OP           reduce using rule 71 (expression -> constant .)
    GE_OP           reduce using rule 71 (expression -> constant .)
    LE_OP           reduce using rule 71 (expression -> constant .)
    AND_OP          reduce using rule 71 (expression -> constant .)
    OR_OP           reduce using rule 71 (expression -> constant .)
    RIGHT_ROUND     reduce using rule 71 (expression -> constant .)
    COMMA           reduce using rule 71 (expression -> constant .)


state 43

    (70) expression -> array .
    (77) assignment -> array . EQUAL expression
    (83) assignment -> array . ADD_ASSIGN expression
    (84) assignment -> array . SUB_ASSIGN expression
    (85) assignment -> array . DIV_ASSIGN expression
    (86) assignment -> array . MOD_ASSIGN expression
    (89) unary_expression -> array . INC_OP
    (90) unary_expression -> array . DEC_OP

    SEMICOLON       reduce using rule 70 (expression -> array .)
    PLUS            reduce using rule 70 (expression -> array .)
    MINUS           reduce using rule 70 (expression -> array .)
    MULTIPLY        reduce using rule 70 (expression -> array .)
    DIVIDE          reduce using rule 70 (expression -> array .)
    L_OP            reduce using rule 70 (expression -> array .)
    G_OP            reduce using rule 70 (expression -> array .)
    NE_OP           reduce using rule 70 (expression -> array .)
    EQ_OP           reduce using rule 70 (expression -> array .)
    GE_OP           reduce using rule 70 (expression -> array .)
    LE_OP           reduce using rule 70 (expression -> array .)
    AND_OP          reduce using rule 70 (expression -> array .)
    OR_OP           reduce using rule 70 (expression -> array .)
    RIGHT_ROUND     reduce using rule 70 (expression -> array .)
    COMMA           reduce using rule 70 (expression -> array .)
    EQUAL           shift and go to state 75
    ADD_ASSIGN      shift and go to state 77
    SUB_ASSIGN      shift and go to state 71
    DIV_ASSIGN      shift and go to state 76
    MOD_ASSIGN      shift and go to state 72
    INC_OP          shift and go to state 74
    DEC_OP          shift and go to state 73


state 44

    (49) constant -> STRING .

    PLUS            reduce using rule 49 (constant -> STRING .)
    MINUS           reduce using rule 49 (constant -> STRING .)
    MULTIPLY        reduce using rule 49 (constant -> STRING .)
    DIVIDE          reduce using rule 49 (constant -> STRING .)
    L_OP            reduce using rule 49 (constant -> STRING .)
    G_OP            reduce using rule 49 (constant -> STRING .)
    NE_OP           reduce using rule 49 (constant -> STRING .)
    EQ_OP           reduce using rule 49 (constant -> STRING .)
    GE_OP           reduce using rule 49 (constant -> STRING .)
    LE_OP           reduce using rule 49 (constant -> STRING .)
    AND_OP          reduce using rule 49 (constant -> STRING .)
    OR_OP           reduce using rule 49 (constant -> STRING .)
    SEMICOLON       reduce using rule 49 (constant -> STRING .)
    RIGHT_ROUND     reduce using rule 49 (constant -> STRING .)
    COMMA           reduce using rule 49 (constant -> STRING .)


state 45

    (39) statement -> type_specifier . declaration_list SEMICOLON
    (40) declaration_list -> . declaration
    (41) declaration_list -> . declaration_list COMMA declaration
    (42) declaration -> . IDENTIFIER
    (43) declaration -> . array
    (44) declaration -> . equal_or_initialise
    (51) array -> . IDENTIFIER array_index
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 82

    declaration_list               shift and go to state 78
    declaration                    shift and go to state 80
    array                          shift and go to state 81
    equal_or_initialise            shift and go to state 79

state 46

    (54) expression_statement -> SEMICOLON .

    RIGHT_CURL      reduce using rule 54 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 54 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 54 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 54 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 54 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 54 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 54 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 54 (expression_statement -> SEMICOLON .)
    CHAR            reduce using rule 54 (expression_statement -> SEMICOLON .)
    SHORT           reduce using rule 54 (expression_statement -> SEMICOLON .)
    INT             reduce using rule 54 (expression_statement -> SEMICOLON .)
    LONG            reduce using rule 54 (expression_statement -> SEMICOLON .)
    FLOAT           reduce using rule 54 (expression_statement -> SEMICOLON .)
    DOUBLE          reduce using rule 54 (expression_statement -> SEMICOLON .)
    SIGNED          reduce using rule 54 (expression_statement -> SEMICOLON .)
    UNSIGNED        reduce using rule 54 (expression_statement -> SEMICOLON .)
    LEFT_ROUND      reduce using rule 54 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 54 (expression_statement -> SEMICOLON .)
    HEX_NUM         reduce using rule 54 (expression_statement -> SEMICOLON .)
    REAL_NUM        reduce using rule 54 (expression_statement -> SEMICOLON .)
    INT_NUM         reduce using rule 54 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 54 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 54 (expression_statement -> SEMICOLON .)
    EXP_NUM         reduce using rule 54 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 54 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 54 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 54 (expression_statement -> SEMICOLON .)


state 47

    (48) constant -> CHARACTER .

    PLUS            reduce using rule 48 (constant -> CHARACTER .)
    MINUS           reduce using rule 48 (constant -> CHARACTER .)
    MULTIPLY        reduce using rule 48 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 48 (constant -> CHARACTER .)
    L_OP            reduce using rule 48 (constant -> CHARACTER .)
    G_OP            reduce using rule 48 (constant -> CHARACTER .)
    NE_OP           reduce using rule 48 (constant -> CHARACTER .)
    EQ_OP           reduce using rule 48 (constant -> CHARACTER .)
    GE_OP           reduce using rule 48 (constant -> CHARACTER .)
    LE_OP           reduce using rule 48 (constant -> CHARACTER .)
    AND_OP          reduce using rule 48 (constant -> CHARACTER .)
    OR_OP           reduce using rule 48 (constant -> CHARACTER .)
    SEMICOLON       reduce using rule 48 (constant -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 48 (constant -> CHARACTER .)
    COMMA           reduce using rule 48 (constant -> CHARACTER .)


state 48

    (23) statement_list -> statement .

    RIGHT_CURL      reduce using rule 23 (statement_list -> statement .)
    IF              reduce using rule 23 (statement_list -> statement .)
    FOR             reduce using rule 23 (statement_list -> statement .)
    WHILE           reduce using rule 23 (statement_list -> statement .)
    CONTINUE        reduce using rule 23 (statement_list -> statement .)
    BREAK           reduce using rule 23 (statement_list -> statement .)
    RETURN          reduce using rule 23 (statement_list -> statement .)
    SEMICOLON       reduce using rule 23 (statement_list -> statement .)
    CHAR            reduce using rule 23 (statement_list -> statement .)
    SHORT           reduce using rule 23 (statement_list -> statement .)
    INT             reduce using rule 23 (statement_list -> statement .)
    LONG            reduce using rule 23 (statement_list -> statement .)
    FLOAT           reduce using rule 23 (statement_list -> statement .)
    DOUBLE          reduce using rule 23 (statement_list -> statement .)
    SIGNED          reduce using rule 23 (statement_list -> statement .)
    UNSIGNED        reduce using rule 23 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 23 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 23 (statement_list -> statement .)
    HEX_NUM         reduce using rule 23 (statement_list -> statement .)
    REAL_NUM        reduce using rule 23 (statement_list -> statement .)
    INT_NUM         reduce using rule 23 (statement_list -> statement .)
    CHARACTER       reduce using rule 23 (statement_list -> statement .)
    STRING          reduce using rule 23 (statement_list -> statement .)
    EXP_NUM         reduce using rule 23 (statement_list -> statement .)
    INC_OP          reduce using rule 23 (statement_list -> statement .)
    DEC_OP          reduce using rule 23 (statement_list -> statement .)


state 49

    (46) constant -> REAL_NUM .

    PLUS            reduce using rule 46 (constant -> REAL_NUM .)
    MINUS           reduce using rule 46 (constant -> REAL_NUM .)
    MULTIPLY        reduce using rule 46 (constant -> REAL_NUM .)
    DIVIDE          reduce using rule 46 (constant -> REAL_NUM .)
    L_OP            reduce using rule 46 (constant -> REAL_NUM .)
    G_OP            reduce using rule 46 (constant -> REAL_NUM .)
    NE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    EQ_OP           reduce using rule 46 (constant -> REAL_NUM .)
    GE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    LE_OP           reduce using rule 46 (constant -> REAL_NUM .)
    AND_OP          reduce using rule 46 (constant -> REAL_NUM .)
    OR_OP           reduce using rule 46 (constant -> REAL_NUM .)
    SEMICOLON       reduce using rule 46 (constant -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 46 (constant -> REAL_NUM .)
    COMMA           reduce using rule 46 (constant -> REAL_NUM .)


state 50

    (69) expression -> IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (78) assignment -> IDENTIFIER . ADD_ASSIGN expression
    (79) assignment -> IDENTIFIER . SUB_ASSIGN expression
    (80) assignment -> IDENTIFIER . DIV_ASSIGN expression
    (81) assignment -> IDENTIFIER . MUL_ASSIGN expression
    (82) assignment -> IDENTIFIER . MOD_ASSIGN expression
    (87) unary_expression -> IDENTIFIER . INC_OP
    (88) unary_expression -> IDENTIFIER . DEC_OP
    (95) function_call -> IDENTIFIER . LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> IDENTIFIER . EQUAL expression
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 69 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 69 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 69 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 69 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 69 (expression -> IDENTIFIER .)
    L_OP            reduce using rule 69 (expression -> IDENTIFIER .)
    G_OP            reduce using rule 69 (expression -> IDENTIFIER .)
    NE_OP           reduce using rule 69 (expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 69 (expression -> IDENTIFIER .)
    GE_OP           reduce using rule 69 (expression -> IDENTIFIER .)
    LE_OP           reduce using rule 69 (expression -> IDENTIFIER .)
    AND_OP          reduce using rule 69 (expression -> IDENTIFIER .)
    OR_OP           reduce using rule 69 (expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 69 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 69 (expression -> IDENTIFIER .)
    ADD_ASSIGN      shift and go to state 91
    SUB_ASSIGN      shift and go to state 83
    DIV_ASSIGN      shift and go to state 90
    MUL_ASSIGN      shift and go to state 89
    MOD_ASSIGN      shift and go to state 84
    INC_OP          shift and go to state 87
    DEC_OP          shift and go to state 86
    LEFT_ROUND      shift and go to state 85
    EQUAL           shift and go to state 88
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 51

    (30) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 92


state 52

    (72) expression -> assignment .

    SEMICOLON       reduce using rule 72 (expression -> assignment .)
    PLUS            reduce using rule 72 (expression -> assignment .)
    MINUS           reduce using rule 72 (expression -> assignment .)
    MULTIPLY        reduce using rule 72 (expression -> assignment .)
    DIVIDE          reduce using rule 72 (expression -> assignment .)
    L_OP            reduce using rule 72 (expression -> assignment .)
    G_OP            reduce using rule 72 (expression -> assignment .)
    NE_OP           reduce using rule 72 (expression -> assignment .)
    EQ_OP           reduce using rule 72 (expression -> assignment .)
    GE_OP           reduce using rule 72 (expression -> assignment .)
    LE_OP           reduce using rule 72 (expression -> assignment .)
    AND_OP          reduce using rule 72 (expression -> assignment .)
    OR_OP           reduce using rule 72 (expression -> assignment .)
    RIGHT_ROUND     reduce using rule 72 (expression -> assignment .)
    COMMA           reduce using rule 72 (expression -> assignment .)


state 53

    (75) assignment -> equal_or_initialise .

    PLUS            reduce using rule 75 (assignment -> equal_or_initialise .)
    MINUS           reduce using rule 75 (assignment -> equal_or_initialise .)
    MULTIPLY        reduce using rule 75 (assignment -> equal_or_initialise .)
    DIVIDE          reduce using rule 75 (assignment -> equal_or_initialise .)
    L_OP            reduce using rule 75 (assignment -> equal_or_initialise .)
    G_OP            reduce using rule 75 (assignment -> equal_or_initialise .)
    NE_OP           reduce using rule 75 (assignment -> equal_or_initialise .)
    EQ_OP           reduce using rule 75 (assignment -> equal_or_initialise .)
    GE_OP           reduce using rule 75 (assignment -> equal_or_initialise .)
    LE_OP           reduce using rule 75 (assignment -> equal_or_initialise .)
    AND_OP          reduce using rule 75 (assignment -> equal_or_initialise .)
    OR_OP           reduce using rule 75 (assignment -> equal_or_initialise .)
    SEMICOLON       reduce using rule 75 (assignment -> equal_or_initialise .)
    RIGHT_ROUND     reduce using rule 75 (assignment -> equal_or_initialise .)
    COMMA           reduce using rule 75 (assignment -> equal_or_initialise .)


state 54

    (45) constant -> HEX_NUM .

    PLUS            reduce using rule 45 (constant -> HEX_NUM .)
    MINUS           reduce using rule 45 (constant -> HEX_NUM .)
    MULTIPLY        reduce using rule 45 (constant -> HEX_NUM .)
    DIVIDE          reduce using rule 45 (constant -> HEX_NUM .)
    L_OP            reduce using rule 45 (constant -> HEX_NUM .)
    G_OP            reduce using rule 45 (constant -> HEX_NUM .)
    NE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    EQ_OP           reduce using rule 45 (constant -> HEX_NUM .)
    GE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    LE_OP           reduce using rule 45 (constant -> HEX_NUM .)
    AND_OP          reduce using rule 45 (constant -> HEX_NUM .)
    OR_OP           reduce using rule 45 (constant -> HEX_NUM .)
    SEMICOLON       reduce using rule 45 (constant -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 45 (constant -> HEX_NUM .)
    COMMA           reduce using rule 45 (constant -> HEX_NUM .)


state 55

    (24) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF . LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL

    LEFT_ROUND      shift and go to state 93


state 56

    (68) expression -> LEFT_ROUND . expression RIGHT_ROUND
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 94
    equal_or_initialise            shift and go to state 53

state 57

    (36) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 95


state 58

    (47) constant -> INT_NUM .

    PLUS            reduce using rule 47 (constant -> INT_NUM .)
    MINUS           reduce using rule 47 (constant -> INT_NUM .)
    MULTIPLY        reduce using rule 47 (constant -> INT_NUM .)
    DIVIDE          reduce using rule 47 (constant -> INT_NUM .)
    L_OP            reduce using rule 47 (constant -> INT_NUM .)
    G_OP            reduce using rule 47 (constant -> INT_NUM .)
    NE_OP           reduce using rule 47 (constant -> INT_NUM .)
    EQ_OP           reduce using rule 47 (constant -> INT_NUM .)
    GE_OP           reduce using rule 47 (constant -> INT_NUM .)
    LE_OP           reduce using rule 47 (constant -> INT_NUM .)
    AND_OP          reduce using rule 47 (constant -> INT_NUM .)
    OR_OP           reduce using rule 47 (constant -> INT_NUM .)
    SEMICOLON       reduce using rule 47 (constant -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 47 (constant -> INT_NUM .)
    COMMA           reduce using rule 47 (constant -> INT_NUM .)


state 59

    (35) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 96


state 60

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 97
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    equal_or_initialise            shift and go to state 53
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61

state 61

    (55) expression_statement -> expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 101
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 62

    (53) array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    COMMA           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    PLUS            reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MINUS           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIVIDE          reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    L_OP            reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    G_OP            reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    NE_OP           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQ_OP           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    GE_OP           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    LE_OP           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    AND_OP          reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    OR_OP           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQUAL           reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    INC_OP          reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DEC_OP          reduce using rule 53 (array_index -> LEFT_SQUARE INT_NUM RIGHT_SQUARE .)


state 63

    (52) array_index -> array_index LEFT_SQUARE INT_NUM . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 112


state 64

    (37) statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IF              reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT             reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LONG            reduce using rule 37 (statement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    SIGNED          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    UNSIGNED        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> RETURN SEMICOLON .)
    HEX_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 37 (statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    EXP_NUM         reduce using rule 37 (statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 37 (statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> RETURN SEMICOLON .)


state 65

    (38) statement -> RETURN expression . SEMICOLON
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       shift and go to state 113
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 66

    (94) unary_expression -> DEC_OP array .

    SEMICOLON       reduce using rule 94 (unary_expression -> DEC_OP array .)
    PLUS            reduce using rule 94 (unary_expression -> DEC_OP array .)
    MINUS           reduce using rule 94 (unary_expression -> DEC_OP array .)
    MULTIPLY        reduce using rule 94 (unary_expression -> DEC_OP array .)
    DIVIDE          reduce using rule 94 (unary_expression -> DEC_OP array .)
    L_OP            reduce using rule 94 (unary_expression -> DEC_OP array .)
    G_OP            reduce using rule 94 (unary_expression -> DEC_OP array .)
    NE_OP           reduce using rule 94 (unary_expression -> DEC_OP array .)
    EQ_OP           reduce using rule 94 (unary_expression -> DEC_OP array .)
    GE_OP           reduce using rule 94 (unary_expression -> DEC_OP array .)
    LE_OP           reduce using rule 94 (unary_expression -> DEC_OP array .)
    AND_OP          reduce using rule 94 (unary_expression -> DEC_OP array .)
    OR_OP           reduce using rule 94 (unary_expression -> DEC_OP array .)
    RIGHT_ROUND     reduce using rule 94 (unary_expression -> DEC_OP array .)
    COMMA           reduce using rule 94 (unary_expression -> DEC_OP array .)


state 67

    (93) unary_expression -> DEC_OP IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    PLUS            reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    MINUS           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    L_OP            reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    G_OP            reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    NE_OP           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    GE_OP           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    LE_OP           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    AND_OP          reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    OR_OP           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    COMMA           reduce using rule 93 (unary_expression -> DEC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 68

    (92) unary_expression -> INC_OP array .

    SEMICOLON       reduce using rule 92 (unary_expression -> INC_OP array .)
    PLUS            reduce using rule 92 (unary_expression -> INC_OP array .)
    MINUS           reduce using rule 92 (unary_expression -> INC_OP array .)
    MULTIPLY        reduce using rule 92 (unary_expression -> INC_OP array .)
    DIVIDE          reduce using rule 92 (unary_expression -> INC_OP array .)
    L_OP            reduce using rule 92 (unary_expression -> INC_OP array .)
    G_OP            reduce using rule 92 (unary_expression -> INC_OP array .)
    NE_OP           reduce using rule 92 (unary_expression -> INC_OP array .)
    EQ_OP           reduce using rule 92 (unary_expression -> INC_OP array .)
    GE_OP           reduce using rule 92 (unary_expression -> INC_OP array .)
    LE_OP           reduce using rule 92 (unary_expression -> INC_OP array .)
    AND_OP          reduce using rule 92 (unary_expression -> INC_OP array .)
    OR_OP           reduce using rule 92 (unary_expression -> INC_OP array .)
    RIGHT_ROUND     reduce using rule 92 (unary_expression -> INC_OP array .)
    COMMA           reduce using rule 92 (unary_expression -> INC_OP array .)


state 69

    (91) unary_expression -> INC_OP IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    PLUS            reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    MINUS           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    DIVIDE          reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    L_OP            reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    G_OP            reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    NE_OP           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    EQ_OP           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    GE_OP           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    LE_OP           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    AND_OP          reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    OR_OP           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    COMMA           reduce using rule 91 (unary_expression -> INC_OP IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 70

    (33) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 114
    equal_or_initialise            shift and go to state 53

state 71

    (84) assignment -> array SUB_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 115
    equal_or_initialise            shift and go to state 53

state 72

    (86) assignment -> array MOD_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 116
    equal_or_initialise            shift and go to state 53

state 73

    (90) unary_expression -> array DEC_OP .

    SEMICOLON       reduce using rule 90 (unary_expression -> array DEC_OP .)
    PLUS            reduce using rule 90 (unary_expression -> array DEC_OP .)
    MINUS           reduce using rule 90 (unary_expression -> array DEC_OP .)
    MULTIPLY        reduce using rule 90 (unary_expression -> array DEC_OP .)
    DIVIDE          reduce using rule 90 (unary_expression -> array DEC_OP .)
    L_OP            reduce using rule 90 (unary_expression -> array DEC_OP .)
    G_OP            reduce using rule 90 (unary_expression -> array DEC_OP .)
    NE_OP           reduce using rule 90 (unary_expression -> array DEC_OP .)
    EQ_OP           reduce using rule 90 (unary_expression -> array DEC_OP .)
    GE_OP           reduce using rule 90 (unary_expression -> array DEC_OP .)
    LE_OP           reduce using rule 90 (unary_expression -> array DEC_OP .)
    AND_OP          reduce using rule 90 (unary_expression -> array DEC_OP .)
    OR_OP           reduce using rule 90 (unary_expression -> array DEC_OP .)
    RIGHT_ROUND     reduce using rule 90 (unary_expression -> array DEC_OP .)
    COMMA           reduce using rule 90 (unary_expression -> array DEC_OP .)


state 74

    (89) unary_expression -> array INC_OP .

    SEMICOLON       reduce using rule 89 (unary_expression -> array INC_OP .)
    PLUS            reduce using rule 89 (unary_expression -> array INC_OP .)
    MINUS           reduce using rule 89 (unary_expression -> array INC_OP .)
    MULTIPLY        reduce using rule 89 (unary_expression -> array INC_OP .)
    DIVIDE          reduce using rule 89 (unary_expression -> array INC_OP .)
    L_OP            reduce using rule 89 (unary_expression -> array INC_OP .)
    G_OP            reduce using rule 89 (unary_expression -> array INC_OP .)
    NE_OP           reduce using rule 89 (unary_expression -> array INC_OP .)
    EQ_OP           reduce using rule 89 (unary_expression -> array INC_OP .)
    GE_OP           reduce using rule 89 (unary_expression -> array INC_OP .)
    LE_OP           reduce using rule 89 (unary_expression -> array INC_OP .)
    AND_OP          reduce using rule 89 (unary_expression -> array INC_OP .)
    OR_OP           reduce using rule 89 (unary_expression -> array INC_OP .)
    RIGHT_ROUND     reduce using rule 89 (unary_expression -> array INC_OP .)
    COMMA           reduce using rule 89 (unary_expression -> array INC_OP .)


state 75

    (77) assignment -> array EQUAL . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 117
    equal_or_initialise            shift and go to state 53

state 76

    (85) assignment -> array DIV_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 118
    equal_or_initialise            shift and go to state 53

state 77

    (83) assignment -> array ADD_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 119
    equal_or_initialise            shift and go to state 53

state 78

    (39) statement -> type_specifier declaration_list . SEMICOLON
    (41) declaration_list -> declaration_list . COMMA declaration

    SEMICOLON       shift and go to state 121
    COMMA           shift and go to state 120


state 79

    (44) declaration -> equal_or_initialise .

    SEMICOLON       reduce using rule 44 (declaration -> equal_or_initialise .)
    COMMA           reduce using rule 44 (declaration -> equal_or_initialise .)


state 80

    (40) declaration_list -> declaration .

    SEMICOLON       reduce using rule 40 (declaration_list -> declaration .)
    COMMA           reduce using rule 40 (declaration_list -> declaration .)


state 81

    (43) declaration -> array .

    SEMICOLON       reduce using rule 43 (declaration -> array .)
    COMMA           reduce using rule 43 (declaration -> array .)


state 82

    (42) declaration -> IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (76) equal_or_initialise -> IDENTIFIER . EQUAL expression
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    SEMICOLON       reduce using rule 42 (declaration -> IDENTIFIER .)
    COMMA           reduce using rule 42 (declaration -> IDENTIFIER .)
    EQUAL           shift and go to state 88
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 83

    (79) assignment -> IDENTIFIER SUB_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 122
    equal_or_initialise            shift and go to state 53

state 84

    (82) assignment -> IDENTIFIER MOD_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 123
    equal_or_initialise            shift and go to state 53

state 85

    (95) function_call -> IDENTIFIER LEFT_ROUND . function_call_list RIGHT_ROUND
    (96) function_call_list -> . function_argument
    (97) function_call_list -> . function_call_list COMMA function_argument
    (98) function_argument -> . IDENTIFIER
    (99) function_argument -> . array
    (100) function_argument -> . constant
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM

    IDENTIFIER      shift and go to state 128
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41

    function_call_list             shift and go to state 124
    array                          shift and go to state 127
    function_argument              shift and go to state 125
    constant                       shift and go to state 126

state 86

    (88) unary_expression -> IDENTIFIER DEC_OP .

    SEMICOLON       reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    PLUS            reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    MINUS           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    MULTIPLY        reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    DIVIDE          reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    L_OP            reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    G_OP            reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    NE_OP           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    EQ_OP           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    GE_OP           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    LE_OP           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    AND_OP          reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    OR_OP           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    RIGHT_ROUND     reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)
    COMMA           reduce using rule 88 (unary_expression -> IDENTIFIER DEC_OP .)


state 87

    (87) unary_expression -> IDENTIFIER INC_OP .

    SEMICOLON       reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    PLUS            reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    MINUS           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    MULTIPLY        reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    DIVIDE          reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    L_OP            reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    G_OP            reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    NE_OP           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    EQ_OP           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    GE_OP           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    LE_OP           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    AND_OP          reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    OR_OP           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    RIGHT_ROUND     reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)
    COMMA           reduce using rule 87 (unary_expression -> IDENTIFIER INC_OP .)


state 88

    (76) equal_or_initialise -> IDENTIFIER EQUAL . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 129
    equal_or_initialise            shift and go to state 53

state 89

    (81) assignment -> IDENTIFIER MUL_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 130
    equal_or_initialise            shift and go to state 53

state 90

    (80) assignment -> IDENTIFIER DIV_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 131
    equal_or_initialise            shift and go to state 53

state 91

    (78) assignment -> IDENTIFIER ADD_ASSIGN . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 132
    equal_or_initialise            shift and go to state 53

state 92

    (30) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 46
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 133
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 93

    (24) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 134
    equal_or_initialise            shift and go to state 53

state 94

    (68) expression -> LEFT_ROUND expression . RIGHT_ROUND
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 135
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 95

    (36) statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 36 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 36 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INT             reduce using rule 36 (statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 36 (statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 36 (statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    SIGNED          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    UNSIGNED        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (statement -> BREAK SEMICOLON .)
    HEX_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 36 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    EXP_NUM         reduce using rule 36 (statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 36 (statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 36 (statement -> BREAK SEMICOLON .)


state 96

    (35) statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    SIGNED          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    UNSIGNED        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    HEX_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    EXP_NUM         reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 35 (statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 35 (statement -> CONTINUE SEMICOLON .)


state 97

    (21) function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    VOID            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    $end            reduce using rule 21 (function_definition -> return_type_specifier IDENTIFIER LEFT_ROUND argument_list RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 98

    (22) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 22 (statement_list -> statement_list statement .)
    IF              reduce using rule 22 (statement_list -> statement_list statement .)
    FOR             reduce using rule 22 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 22 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 22 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 22 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 22 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 22 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 22 (statement_list -> statement_list statement .)
    SHORT           reduce using rule 22 (statement_list -> statement_list statement .)
    INT             reduce using rule 22 (statement_list -> statement_list statement .)
    LONG            reduce using rule 22 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 22 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 22 (statement_list -> statement_list statement .)
    SIGNED          reduce using rule 22 (statement_list -> statement_list statement .)
    UNSIGNED        reduce using rule 22 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 22 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 22 (statement_list -> statement_list statement .)
    HEX_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 22 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 22 (statement_list -> statement_list statement .)
    STRING          reduce using rule 22 (statement_list -> statement_list statement .)
    EXP_NUM         reduce using rule 22 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 22 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 22 (statement_list -> statement_list statement .)


state 99

    (65) expression -> expression LE_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 136
    equal_or_initialise            shift and go to state 53

state 100

    (59) expression -> expression DIVIDE . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 137
    equal_or_initialise            shift and go to state 53

state 101

    (55) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    SHORT           reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    LONG            reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    SIGNED          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    UNSIGNED        reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    HEX_NUM         reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    EXP_NUM         reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 55 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 55 (expression_statement -> expression SEMICOLON .)


state 102

    (61) expression -> expression G_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 138
    equal_or_initialise            shift and go to state 53

state 103

    (60) expression -> expression L_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 139
    equal_or_initialise            shift and go to state 53

state 104

    (66) expression -> expression AND_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 140
    equal_or_initialise            shift and go to state 53

state 105

    (64) expression -> expression GE_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 141
    equal_or_initialise            shift and go to state 53

state 106

    (56) expression -> expression PLUS . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 142
    equal_or_initialise            shift and go to state 53

state 107

    (63) expression -> expression EQ_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 143
    equal_or_initialise            shift and go to state 53

state 108

    (58) expression -> expression MULTIPLY . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 144
    equal_or_initialise            shift and go to state 53

state 109

    (57) expression -> expression MINUS . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 145
    equal_or_initialise            shift and go to state 53

state 110

    (62) expression -> expression NE_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 146
    equal_or_initialise            shift and go to state 53

state 111

    (67) expression -> expression OR_OP . expression
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 147
    equal_or_initialise            shift and go to state 53

state 112

    (52) array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    COMMA           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    PLUS            reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MINUS           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIVIDE          reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    L_OP            reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    G_OP            reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    NE_OP           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQ_OP           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    GE_OP           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    LE_OP           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    AND_OP          reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    OR_OP           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    EQUAL           reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    INC_OP          reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)
    DEC_OP          reduce using rule 52 (array_index -> array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE .)


state 113

    (38) statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SHORT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LONG            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    SIGNED          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    UNSIGNED        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    HEX_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    EXP_NUM         reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 38 (statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 38 (statement -> RETURN expression SEMICOLON .)


state 114

    (33) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 148
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 115

    (84) assignment -> array SUB_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 84 (assignment -> array SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 84 (assignment -> array SUB_ASSIGN expression .)
    COMMA           reduce using rule 84 (assignment -> array SUB_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 84 (assignment -> array SUB_ASSIGN expression .) ]


state 116

    (86) assignment -> array MOD_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 86 (assignment -> array MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 86 (assignment -> array MOD_ASSIGN expression .)
    COMMA           reduce using rule 86 (assignment -> array MOD_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 86 (assignment -> array MOD_ASSIGN expression .) ]


state 117

    (77) assignment -> array EQUAL expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 77 (assignment -> array EQUAL expression .)
    RIGHT_ROUND     reduce using rule 77 (assignment -> array EQUAL expression .)
    COMMA           reduce using rule 77 (assignment -> array EQUAL expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! MINUS           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! L_OP            [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! G_OP            [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 77 (assignment -> array EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 77 (assignment -> array EQUAL expression .) ]


state 118

    (85) assignment -> array DIV_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 85 (assignment -> array DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 85 (assignment -> array DIV_ASSIGN expression .)
    COMMA           reduce using rule 85 (assignment -> array DIV_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 85 (assignment -> array DIV_ASSIGN expression .) ]


state 119

    (83) assignment -> array ADD_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 83 (assignment -> array ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 83 (assignment -> array ADD_ASSIGN expression .)
    COMMA           reduce using rule 83 (assignment -> array ADD_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 83 (assignment -> array ADD_ASSIGN expression .) ]


state 120

    (41) declaration_list -> declaration_list COMMA . declaration
    (42) declaration -> . IDENTIFIER
    (43) declaration -> . array
    (44) declaration -> . equal_or_initialise
    (51) array -> . IDENTIFIER array_index
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 82

    declaration                    shift and go to state 149
    array                          shift and go to state 81
    equal_or_initialise            shift and go to state 79

state 121

    (39) statement -> type_specifier declaration_list SEMICOLON .

    RIGHT_CURL      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    IF              reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    FOR             reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    WHILE           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CONTINUE        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    BREAK           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    RETURN          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SEMICOLON       reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CHAR            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SHORT           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INT             reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    LONG            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    DOUBLE          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    SIGNED          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    UNSIGNED        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    LEFT_ROUND      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    HEX_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    REAL_NUM        reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INT_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    STRING          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    EXP_NUM         reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    INC_OP          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    DEC_OP          reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)
    ELSE            reduce using rule 39 (statement -> type_specifier declaration_list SEMICOLON .)


state 122

    (79) assignment -> IDENTIFIER SUB_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    COMMA           reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 79 (assignment -> IDENTIFIER SUB_ASSIGN expression .) ]


state 123

    (82) assignment -> IDENTIFIER MOD_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    COMMA           reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 82 (assignment -> IDENTIFIER MOD_ASSIGN expression .) ]


state 124

    (95) function_call -> IDENTIFIER LEFT_ROUND function_call_list . RIGHT_ROUND
    (97) function_call_list -> function_call_list . COMMA function_argument

    RIGHT_ROUND     shift and go to state 150
    COMMA           shift and go to state 151


state 125

    (96) function_call_list -> function_argument .

    RIGHT_ROUND     reduce using rule 96 (function_call_list -> function_argument .)
    COMMA           reduce using rule 96 (function_call_list -> function_argument .)


state 126

    (100) function_argument -> constant .

    RIGHT_ROUND     reduce using rule 100 (function_argument -> constant .)
    COMMA           reduce using rule 100 (function_argument -> constant .)


state 127

    (99) function_argument -> array .

    RIGHT_ROUND     reduce using rule 99 (function_argument -> array .)
    COMMA           reduce using rule 99 (function_argument -> array .)


state 128

    (98) function_argument -> IDENTIFIER .
    (51) array -> IDENTIFIER . array_index
    (52) array_index -> . array_index LEFT_SQUARE INT_NUM RIGHT_SQUARE
    (53) array_index -> . LEFT_SQUARE INT_NUM RIGHT_SQUARE

    RIGHT_ROUND     reduce using rule 98 (function_argument -> IDENTIFIER .)
    COMMA           reduce using rule 98 (function_argument -> IDENTIFIER .)
    LEFT_SQUARE     shift and go to state 27

    array_index                    shift and go to state 28

state 129

    (76) equal_or_initialise -> IDENTIFIER EQUAL expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    RIGHT_ROUND     reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    COMMA           reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! MINUS           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! L_OP            [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! G_OP            [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! NE_OP           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! EQ_OP           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! GE_OP           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! LE_OP           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! AND_OP          [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]
  ! OR_OP           [ reduce using rule 76 (equal_or_initialise -> IDENTIFIER EQUAL expression .) ]


state 130

    (81) assignment -> IDENTIFIER MUL_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    COMMA           reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 81 (assignment -> IDENTIFIER MUL_ASSIGN expression .) ]


state 131

    (80) assignment -> IDENTIFIER DIV_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    COMMA           reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 80 (assignment -> IDENTIFIER DIV_ASSIGN expression .) ]


state 132

    (78) assignment -> IDENTIFIER ADD_ASSIGN expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    COMMA           reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111

  ! PLUS            [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! DIVIDE          [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! L_OP            [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! G_OP            [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! NE_OP           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! EQ_OP           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! GE_OP           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! LE_OP           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! AND_OP          [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]
  ! OR_OP           [ reduce using rule 78 (assignment -> IDENTIFIER ADD_ASSIGN expression .) ]


state 133

    (30) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    SEMICOLON       shift and go to state 46
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 152
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 134

    (24) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (26) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 153
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 135

    (68) expression -> LEFT_ROUND expression RIGHT_ROUND .

    SEMICOLON       reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PLUS            reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 68 (expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 136

    (65) expression -> expression LE_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 65 (expression -> expression LE_OP expression .)
    L_OP            reduce using rule 65 (expression -> expression LE_OP expression .)
    G_OP            reduce using rule 65 (expression -> expression LE_OP expression .)
    NE_OP           reduce using rule 65 (expression -> expression LE_OP expression .)
    EQ_OP           reduce using rule 65 (expression -> expression LE_OP expression .)
    GE_OP           reduce using rule 65 (expression -> expression LE_OP expression .)
    LE_OP           reduce using rule 65 (expression -> expression LE_OP expression .)
    AND_OP          reduce using rule 65 (expression -> expression LE_OP expression .)
    OR_OP           reduce using rule 65 (expression -> expression LE_OP expression .)
    RIGHT_ROUND     reduce using rule 65 (expression -> expression LE_OP expression .)
    COMMA           reduce using rule 65 (expression -> expression LE_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! PLUS            [ reduce using rule 65 (expression -> expression LE_OP expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 65 (expression -> expression LE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression LE_OP expression .) ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 137

    (59) expression -> expression DIVIDE expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 59 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 59 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 59 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 59 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 59 (expression -> expression DIVIDE expression .)
    L_OP            reduce using rule 59 (expression -> expression DIVIDE expression .)
    G_OP            reduce using rule 59 (expression -> expression DIVIDE expression .)
    NE_OP           reduce using rule 59 (expression -> expression DIVIDE expression .)
    EQ_OP           reduce using rule 59 (expression -> expression DIVIDE expression .)
    GE_OP           reduce using rule 59 (expression -> expression DIVIDE expression .)
    LE_OP           reduce using rule 59 (expression -> expression DIVIDE expression .)
    AND_OP          reduce using rule 59 (expression -> expression DIVIDE expression .)
    OR_OP           reduce using rule 59 (expression -> expression DIVIDE expression .)
    RIGHT_ROUND     reduce using rule 59 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 59 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 109 ]
  ! MULTIPLY        [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 138

    (61) expression -> expression G_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 61 (expression -> expression G_OP expression .)
    L_OP            reduce using rule 61 (expression -> expression G_OP expression .)
    G_OP            reduce using rule 61 (expression -> expression G_OP expression .)
    NE_OP           reduce using rule 61 (expression -> expression G_OP expression .)
    EQ_OP           reduce using rule 61 (expression -> expression G_OP expression .)
    GE_OP           reduce using rule 61 (expression -> expression G_OP expression .)
    LE_OP           reduce using rule 61 (expression -> expression G_OP expression .)
    AND_OP          reduce using rule 61 (expression -> expression G_OP expression .)
    OR_OP           reduce using rule 61 (expression -> expression G_OP expression .)
    RIGHT_ROUND     reduce using rule 61 (expression -> expression G_OP expression .)
    COMMA           reduce using rule 61 (expression -> expression G_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! PLUS            [ reduce using rule 61 (expression -> expression G_OP expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression G_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 61 (expression -> expression G_OP expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression G_OP expression .) ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 139

    (60) expression -> expression L_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 60 (expression -> expression L_OP expression .)
    L_OP            reduce using rule 60 (expression -> expression L_OP expression .)
    G_OP            reduce using rule 60 (expression -> expression L_OP expression .)
    NE_OP           reduce using rule 60 (expression -> expression L_OP expression .)
    EQ_OP           reduce using rule 60 (expression -> expression L_OP expression .)
    GE_OP           reduce using rule 60 (expression -> expression L_OP expression .)
    LE_OP           reduce using rule 60 (expression -> expression L_OP expression .)
    AND_OP          reduce using rule 60 (expression -> expression L_OP expression .)
    OR_OP           reduce using rule 60 (expression -> expression L_OP expression .)
    RIGHT_ROUND     reduce using rule 60 (expression -> expression L_OP expression .)
    COMMA           reduce using rule 60 (expression -> expression L_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! PLUS            [ reduce using rule 60 (expression -> expression L_OP expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression L_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression L_OP expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression L_OP expression .) ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 140

    (66) expression -> expression AND_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 66 (expression -> expression AND_OP expression .)
    AND_OP          reduce using rule 66 (expression -> expression AND_OP expression .)
    OR_OP           reduce using rule 66 (expression -> expression AND_OP expression .)
    RIGHT_ROUND     reduce using rule 66 (expression -> expression AND_OP expression .)
    COMMA           reduce using rule 66 (expression -> expression AND_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99

  ! PLUS            [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! L_OP            [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! G_OP            [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! NE_OP           [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! EQ_OP           [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! GE_OP           [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! LE_OP           [ reduce using rule 66 (expression -> expression AND_OP expression .) ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 141

    (64) expression -> expression GE_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 64 (expression -> expression GE_OP expression .)
    L_OP            reduce using rule 64 (expression -> expression GE_OP expression .)
    G_OP            reduce using rule 64 (expression -> expression GE_OP expression .)
    NE_OP           reduce using rule 64 (expression -> expression GE_OP expression .)
    EQ_OP           reduce using rule 64 (expression -> expression GE_OP expression .)
    GE_OP           reduce using rule 64 (expression -> expression GE_OP expression .)
    LE_OP           reduce using rule 64 (expression -> expression GE_OP expression .)
    AND_OP          reduce using rule 64 (expression -> expression GE_OP expression .)
    OR_OP           reduce using rule 64 (expression -> expression GE_OP expression .)
    RIGHT_ROUND     reduce using rule 64 (expression -> expression GE_OP expression .)
    COMMA           reduce using rule 64 (expression -> expression GE_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! PLUS            [ reduce using rule 64 (expression -> expression GE_OP expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression GE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression GE_OP expression .) ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 142

    (56) expression -> expression PLUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 56 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 56 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 56 (expression -> expression PLUS expression .)
    L_OP            reduce using rule 56 (expression -> expression PLUS expression .)
    G_OP            reduce using rule 56 (expression -> expression PLUS expression .)
    NE_OP           reduce using rule 56 (expression -> expression PLUS expression .)
    EQ_OP           reduce using rule 56 (expression -> expression PLUS expression .)
    GE_OP           reduce using rule 56 (expression -> expression PLUS expression .)
    LE_OP           reduce using rule 56 (expression -> expression PLUS expression .)
    AND_OP          reduce using rule 56 (expression -> expression PLUS expression .)
    OR_OP           reduce using rule 56 (expression -> expression PLUS expression .)
    RIGHT_ROUND     reduce using rule 56 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 56 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! MULTIPLY        [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 109 ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 143

    (63) expression -> expression EQ_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 63 (expression -> expression EQ_OP expression .)
    NE_OP           reduce using rule 63 (expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 63 (expression -> expression EQ_OP expression .)
    AND_OP          reduce using rule 63 (expression -> expression EQ_OP expression .)
    OR_OP           reduce using rule 63 (expression -> expression EQ_OP expression .)
    RIGHT_ROUND     reduce using rule 63 (expression -> expression EQ_OP expression .)
    COMMA           reduce using rule 63 (expression -> expression EQ_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99

  ! PLUS            [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! L_OP            [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! G_OP            [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! GE_OP           [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! LE_OP           [ reduce using rule 63 (expression -> expression EQ_OP expression .) ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 144

    (58) expression -> expression MULTIPLY expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 58 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 58 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 58 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 58 (expression -> expression MULTIPLY expression .)
    L_OP            reduce using rule 58 (expression -> expression MULTIPLY expression .)
    G_OP            reduce using rule 58 (expression -> expression MULTIPLY expression .)
    NE_OP           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    EQ_OP           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    GE_OP           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    LE_OP           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    AND_OP          reduce using rule 58 (expression -> expression MULTIPLY expression .)
    OR_OP           reduce using rule 58 (expression -> expression MULTIPLY expression .)
    RIGHT_ROUND     reduce using rule 58 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 58 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 109 ]
  ! MULTIPLY        [ shift and go to state 108 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 145

    (57) expression -> expression MINUS expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 57 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 57 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 57 (expression -> expression MINUS expression .)
    L_OP            reduce using rule 57 (expression -> expression MINUS expression .)
    G_OP            reduce using rule 57 (expression -> expression MINUS expression .)
    NE_OP           reduce using rule 57 (expression -> expression MINUS expression .)
    EQ_OP           reduce using rule 57 (expression -> expression MINUS expression .)
    GE_OP           reduce using rule 57 (expression -> expression MINUS expression .)
    LE_OP           reduce using rule 57 (expression -> expression MINUS expression .)
    AND_OP          reduce using rule 57 (expression -> expression MINUS expression .)
    OR_OP           reduce using rule 57 (expression -> expression MINUS expression .)
    RIGHT_ROUND     reduce using rule 57 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 57 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100

  ! MULTIPLY        [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 109 ]
  ! L_OP            [ shift and go to state 103 ]
  ! G_OP            [ shift and go to state 102 ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! GE_OP           [ shift and go to state 105 ]
  ! LE_OP           [ shift and go to state 99 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 146

    (62) expression -> expression NE_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 62 (expression -> expression NE_OP expression .)
    NE_OP           reduce using rule 62 (expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 62 (expression -> expression NE_OP expression .)
    AND_OP          reduce using rule 62 (expression -> expression NE_OP expression .)
    OR_OP           reduce using rule 62 (expression -> expression NE_OP expression .)
    RIGHT_ROUND     reduce using rule 62 (expression -> expression NE_OP expression .)
    COMMA           reduce using rule 62 (expression -> expression NE_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99

  ! PLUS            [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! L_OP            [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! G_OP            [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! GE_OP           [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! LE_OP           [ reduce using rule 62 (expression -> expression NE_OP expression .) ]
  ! NE_OP           [ shift and go to state 110 ]
  ! EQ_OP           [ shift and go to state 107 ]
  ! AND_OP          [ shift and go to state 104 ]
  ! OR_OP           [ shift and go to state 111 ]


state 147

    (67) expression -> expression OR_OP expression .
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    SEMICOLON       reduce using rule 67 (expression -> expression OR_OP expression .)
    OR_OP           reduce using rule 67 (expression -> expression OR_OP expression .)
    RIGHT_ROUND     reduce using rule 67 (expression -> expression OR_OP expression .)
    COMMA           reduce using rule 67 (expression -> expression OR_OP expression .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104

  ! PLUS            [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! L_OP            [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! G_OP            [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! NE_OP           [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! EQ_OP           [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! GE_OP           [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! LE_OP           [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! AND_OP          [ reduce using rule 67 (expression -> expression OR_OP expression .) ]
  ! OR_OP           [ shift and go to state 111 ]


state 148

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 155
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 154
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 149

    (41) declaration_list -> declaration_list COMMA declaration .

    SEMICOLON       reduce using rule 41 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 41 (declaration_list -> declaration_list COMMA declaration .)


state 150

    (95) function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .

    SEMICOLON       reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    PLUS            reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MINUS           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    L_OP            reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    G_OP            reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    NE_OP           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    GE_OP           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    LE_OP           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    AND_OP          reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    OR_OP           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)
    COMMA           reduce using rule 95 (function_call -> IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND .)


state 151

    (97) function_call_list -> function_call_list COMMA . function_argument
    (98) function_argument -> . IDENTIFIER
    (99) function_argument -> . array
    (100) function_argument -> . constant
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM

    IDENTIFIER      shift and go to state 128
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41

    array                          shift and go to state 127
    function_argument              shift and go to state 156
    constant                       shift and go to state 126

state 152

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    array                          shift and go to state 43
    expression                     shift and go to state 157
    equal_or_initialise            shift and go to state 53

state 153

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 159
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 158
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 154

    (34) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 34 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 155

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 48
    statement_list                 shift and go to state 160
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 156

    (97) function_call_list -> function_call_list COMMA function_argument .

    RIGHT_ROUND     reduce using rule 97 (function_call_list -> function_call_list COMMA function_argument .)
    COMMA           reduce using rule 97 (function_call_list -> function_call_list COMMA function_argument .)


state 157

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement
    (56) expression -> expression . PLUS expression
    (57) expression -> expression . MINUS expression
    (58) expression -> expression . MULTIPLY expression
    (59) expression -> expression . DIVIDE expression
    (60) expression -> expression . L_OP expression
    (61) expression -> expression . G_OP expression
    (62) expression -> expression . NE_OP expression
    (63) expression -> expression . EQ_OP expression
    (64) expression -> expression . GE_OP expression
    (65) expression -> expression . LE_OP expression
    (66) expression -> expression . AND_OP expression
    (67) expression -> expression . OR_OP expression

    RIGHT_ROUND     shift and go to state 161
    PLUS            shift and go to state 106
    MINUS           shift and go to state 109
    MULTIPLY        shift and go to state 108
    DIVIDE          shift and go to state 100
    L_OP            shift and go to state 103
    G_OP            shift and go to state 102
    NE_OP           shift and go to state 110
    EQ_OP           shift and go to state 107
    GE_OP           shift and go to state 105
    LE_OP           shift and go to state 99
    AND_OP          shift and go to state 104
    OR_OP           shift and go to state 111


state 158

    (25) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT             reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LONG            reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 162

  ! ELSE            [ reduce using rule 25 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 159

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 48
    statement_list                 shift and go to state 163
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 160

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 164
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 161

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 166
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 165
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 162

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 168
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 167
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 163

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 169
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 164

    (33) statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 33 (statement -> WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 165

    (31) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SEMICOLON       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHAR            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SHORT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT             reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LONG            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FLOAT           reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DOUBLE          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    SIGNED          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    UNSIGNED        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    HEX_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRING          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXP_NUM         reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    DEC_OP          reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 31 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 166

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 48
    statement_list                 shift and go to state 170
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 167

    (26) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SEMICOLON       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHAR            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SHORT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT             reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LONG            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FLOAT           reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DOUBLE          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    SIGNED          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    UNSIGNED        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    HEX_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRING          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXP_NUM         reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    DEC_OP          reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 26 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)


state 168

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 48
    statement_list                 shift and go to state 171
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 169

    (24) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .
    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL . ELSE LEFT_CURL statement_list RIGHT_CURL

    RIGHT_CURL      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            shift and go to state 172

  ! ELSE            [ reduce using rule 24 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .) ]


state 170

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 173
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 171

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 174
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 172

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . statement
    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE . LEFT_CURL statement_list RIGHT_CURL
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    LEFT_CURL       shift and go to state 176
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 175
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 173

    (30) statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 30 (statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL .)


state 174

    (28) statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 28 (statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL .)


state 175

    (27) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .

    RIGHT_CURL      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IF              reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FOR             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    WHILE           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CONTINUE        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    BREAK           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    RETURN          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SEMICOLON       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHAR            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SHORT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT             reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LONG            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    FLOAT           reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DOUBLE          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    SIGNED          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    UNSIGNED        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    LEFT_ROUND      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    IDENTIFIER      reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    HEX_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    REAL_NUM        reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INT_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    CHARACTER       reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    STRING          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    EXP_NUM         reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    INC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    DEC_OP          reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)
    ELSE            reduce using rule 27 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement .)


state 176

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL . statement_list RIGHT_CURL
    (22) statement_list -> . statement_list statement
    (23) statement_list -> . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 48
    statement_list                 shift and go to state 177
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 177

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list . RIGHT_CURL
    (22) statement_list -> statement_list . statement
    (24) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (25) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (26) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (27) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE statement
    (28) statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE LEFT_CURL statement_list RIGHT_CURL
    (29) statement -> . IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL
    (30) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (31) statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (32) statement -> . expression_statement
    (33) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL
    (34) statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (35) statement -> . CONTINUE SEMICOLON
    (36) statement -> . BREAK SEMICOLON
    (37) statement -> . RETURN SEMICOLON
    (38) statement -> . RETURN expression SEMICOLON
    (39) statement -> . type_specifier declaration_list SEMICOLON
    (54) expression_statement -> . SEMICOLON
    (55) expression_statement -> . expression SEMICOLON
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . INT
    (12) type_specifier -> . LONG
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . DOUBLE
    (15) type_specifier -> . SIGNED
    (16) type_specifier -> . UNSIGNED
    (56) expression -> . expression PLUS expression
    (57) expression -> . expression MINUS expression
    (58) expression -> . expression MULTIPLY expression
    (59) expression -> . expression DIVIDE expression
    (60) expression -> . expression L_OP expression
    (61) expression -> . expression G_OP expression
    (62) expression -> . expression NE_OP expression
    (63) expression -> . expression EQ_OP expression
    (64) expression -> . expression GE_OP expression
    (65) expression -> . expression LE_OP expression
    (66) expression -> . expression AND_OP expression
    (67) expression -> . expression OR_OP expression
    (68) expression -> . LEFT_ROUND expression RIGHT_ROUND
    (69) expression -> . IDENTIFIER
    (70) expression -> . array
    (71) expression -> . constant
    (72) expression -> . assignment
    (73) expression -> . unary_expression
    (74) expression -> . function_call
    (51) array -> . IDENTIFIER array_index
    (45) constant -> . HEX_NUM
    (46) constant -> . REAL_NUM
    (47) constant -> . INT_NUM
    (48) constant -> . CHARACTER
    (49) constant -> . STRING
    (50) constant -> . EXP_NUM
    (75) assignment -> . equal_or_initialise
    (77) assignment -> . array EQUAL expression
    (78) assignment -> . IDENTIFIER ADD_ASSIGN expression
    (79) assignment -> . IDENTIFIER SUB_ASSIGN expression
    (80) assignment -> . IDENTIFIER DIV_ASSIGN expression
    (81) assignment -> . IDENTIFIER MUL_ASSIGN expression
    (82) assignment -> . IDENTIFIER MOD_ASSIGN expression
    (83) assignment -> . array ADD_ASSIGN expression
    (84) assignment -> . array SUB_ASSIGN expression
    (85) assignment -> . array DIV_ASSIGN expression
    (86) assignment -> . array MOD_ASSIGN expression
    (87) unary_expression -> . IDENTIFIER INC_OP
    (88) unary_expression -> . IDENTIFIER DEC_OP
    (89) unary_expression -> . array INC_OP
    (90) unary_expression -> . array DEC_OP
    (91) unary_expression -> . INC_OP IDENTIFIER
    (92) unary_expression -> . INC_OP array
    (93) unary_expression -> . DEC_OP IDENTIFIER
    (94) unary_expression -> . DEC_OP array
    (95) function_call -> . IDENTIFIER LEFT_ROUND function_call_list RIGHT_ROUND
    (76) equal_or_initialise -> . IDENTIFIER EQUAL expression

    RIGHT_CURL      shift and go to state 178
    IF              shift and go to state 55
    FOR             shift and go to state 51
    WHILE           shift and go to state 40
    CONTINUE        shift and go to state 59
    BREAK           shift and go to state 57
    RETURN          shift and go to state 35
    SEMICOLON       shift and go to state 46
    CHAR            shift and go to state 4
    SHORT           shift and go to state 2
    INT             shift and go to state 13
    LONG            shift and go to state 7
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 14
    SIGNED          shift and go to state 16
    UNSIGNED        shift and go to state 6
    LEFT_ROUND      shift and go to state 56
    IDENTIFIER      shift and go to state 50
    HEX_NUM         shift and go to state 54
    REAL_NUM        shift and go to state 49
    INT_NUM         shift and go to state 58
    CHARACTER       shift and go to state 47
    STRING          shift and go to state 44
    EXP_NUM         shift and go to state 41
    INC_OP          shift and go to state 39
    DEC_OP          shift and go to state 37

    expression_statement           shift and go to state 34
    type_specifier                 shift and go to state 45
    constant                       shift and go to state 42
    unary_expression               shift and go to state 36
    assignment                     shift and go to state 52
    function_call                  shift and go to state 38
    statement                      shift and go to state 98
    array                          shift and go to state 43
    expression                     shift and go to state 61
    equal_or_initialise            shift and go to state 53

state 178

    (29) statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IF              reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FOR             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    WHILE           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    BREAK           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    RETURN          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SEMICOLON       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHAR            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SHORT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT             reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LONG            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    FLOAT           reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DOUBLE          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    SIGNED          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    HEX_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    STRING          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    EXP_NUM         reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    INC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    DEC_OP          reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)
    ELSE            reduce using rule 29 (statement -> IF LEFT_ROUND expression RIGHT_ROUND LEFT_CURL statement_list RIGHT_CURL ELSE LEFT_CURL statement_list RIGHT_CURL .)

