Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID
    DIV_ASSIGN
    COMMENT
    POWER
    LONG
    GOTO
    ENUM
    LEFT_OP
    DOUBLE
    COMMENTS
    INC_OP
    SHORT
    DEC_OP
    OR_ASSIGN
    SIZEOF
    UNSIGNED
    OR_OP
    HEADER
    COLON
    TILDA
    UNION
    XOR_ASSIGN
    SIGNED
    MUL_ASSIGN
    RIGHT_OP
    RIGHT_ASSIGN
    DEFAULT
    DOT
    CASE
    REGISTER
    PIPE
    SWITCH
    AND_ASSIGN
    HASH
    MOD_ASSIGN
    VOLATILE
    DO
    CONST
    EXP_NUM
    QUESTION
    PTR_OP
    TYPEDEF
    AUTO
    AND_OP
    HEX_NUM
    STRUCT
    FLOAT
    LEFT_ASSIGN

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     function_definition -> type_specifier declarator compound_statement
Rule 6     function_definition -> STATIC type_specifier declarator compound_statement
Rule 7     declaration -> type_specifier declarator SEMICOLON
Rule 8     declaration -> EXTERN type_specifier declarator SEMICOLON
Rule 9     declaration_list_opt -> empty
Rule 10    declaration_list_opt -> declaration_list
Rule 11    declaration_list -> declaration
Rule 12    declaration_list -> declaration_list declaration
Rule 13    type_specifier -> INT
Rule 14    type_specifier -> CHAR
Rule 15    declarator -> direct_declarator
Rule 16    declarator -> MULTIPLY declarator
Rule 17    direct_declarator -> IDENTIFIER
Rule 18    direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
Rule 19    direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND
Rule 20    parameter_type_list -> parameter_list
Rule 21    parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 22    parameter_list -> parameter_declaration
Rule 23    parameter_list -> parameter_list COMMA parameter_declaration
Rule 24    parameter_declaration -> type_specifier declarator
Rule 25    compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
Rule 26    compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL
Rule 27    expression_statement -> expression SEMICOLON
Rule 28    expression -> equality_expression
Rule 29    expression -> equality_expression EQUAL expression
Rule 30    expression -> equality_expression ADD_ASSIGN expression
Rule 31    expression -> equality_expression SUB_ASSIGN expression
Rule 32    equality_expression -> relational_expression
Rule 33    equality_expression -> equality_expression EQ_OP relational_expression
Rule 34    equality_expression -> equality_expression NE_OP relational_expression
Rule 35    relational_expression -> additive_expression
Rule 36    relational_expression -> relational_expression L_OP additive_expression
Rule 37    relational_expression -> relational_expression G_OP additive_expression
Rule 38    relational_expression -> relational_expression LE_OP additive_expression
Rule 39    relational_expression -> relational_expression GE_OP additive_expression
Rule 40    postfix_expression -> primary_expression
Rule 41    postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
Rule 42    postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND
Rule 43    postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
Rule 44    argument_expression_list -> expression
Rule 45    argument_expression_list -> argument_expression_list COMMA expression
Rule 46    unary_expression -> postfix_expression
Rule 47    unary_expression -> MINUS unary_expression
Rule 48    unary_expression -> PLUS unary_expression
Rule 49    unary_expression -> EXCLAMATION unary_expression
Rule 50    unary_expression -> MULTIPLY unary_expression
Rule 51    unary_expression -> AMPERSAND unary_expression
Rule 52    mult_expression -> unary_expression
Rule 53    mult_expression -> mult_expression MULTIPLY unary_expression
Rule 54    mult_expression -> mult_expression DIVIDE unary_expression
Rule 55    mult_expression -> mult_expression MODULO unary_expression
Rule 56    additive_expression -> mult_expression
Rule 57    additive_expression -> additive_expression PLUS mult_expression
Rule 58    additive_expression -> additive_expression MINUS mult_expression
Rule 59    primary_expression -> IDENTIFIER
Rule 60    primary_expression -> INT_NUM
Rule 61    primary_expression -> REAL_NUM
Rule 62    primary_expression -> CHARACTER
Rule 63    primary_expression -> string_literal
Rule 64    primary_expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 65    string_literal -> STRING
Rule 66    string_literal -> string_literal STRING
Rule 67    statement -> compound_statement
Rule 68    statement -> expression_statement
Rule 69    statement -> selection_statement
Rule 70    statement -> iteration_statement
Rule 71    statement -> jump_statement
Rule 72    jump_statement -> RETURN SEMICOLON
Rule 73    jump_statement -> RETURN expression SEMICOLON
Rule 74    jump_statement -> BREAK SEMICOLON
Rule 75    jump_statement -> CONTINUE SEMICOLON
Rule 76    iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 77    iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 78    selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 79    selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 80    statement_list -> statement
Rule 81    statement_list -> statement_list statement
Rule 82    empty -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 30
AMPERSAND            : 51
AND_ASSIGN           : 
AND_OP               : 
AUTO                 : 
BREAK                : 74
CASE                 : 
CHAR                 : 14
CHARACTER            : 62
COLON                : 
COMMA                : 21 23 45
COMMENT              : 
COMMENTS             : 
CONST                : 
CONTINUE             : 75
DEC_OP               : 
DEFAULT              : 
DIVIDE               : 54
DIV_ASSIGN           : 
DO                   : 
DOT                  : 
DOUBLE               : 
ELLIPSIS             : 21
ELSE                 : 79
ENUM                 : 
EQUAL                : 29
EQ_OP                : 33
EXCLAMATION          : 49
EXP_NUM              : 
EXTERN               : 8
FLOAT                : 
FOR                  : 77
GE_OP                : 39
GOTO                 : 
G_OP                 : 37
HASH                 : 
HEADER               : 
HEX_NUM              : 
IDENTIFIER           : 17 59
IF                   : 78 79
INC_OP               : 
INT                  : 13
INT_NUM              : 60
LEFT_ASSIGN          : 
LEFT_CURL            : 25 26
LEFT_OP              : 
LEFT_ROUND           : 18 19 41 42 64 76 77 78 79
LEFT_SQUARE          : 43
LE_OP                : 38
LONG                 : 
L_OP                 : 36
MINUS                : 47 58
MODULO               : 55
MOD_ASSIGN           : 
MULTIPLY             : 16 50 53
MUL_ASSIGN           : 
NE_OP                : 34
OR_ASSIGN            : 
OR_OP                : 
PIPE                 : 
PLUS                 : 48 57
POWER                : 
PTR_OP               : 
QUESTION             : 
REAL_NUM             : 61
REGISTER             : 
RETURN               : 72 73
RIGHT_ASSIGN         : 
RIGHT_CURL           : 25 26
RIGHT_OP             : 
RIGHT_ROUND          : 18 19 41 42 64 76 77 78 79
RIGHT_SQUARE         : 43
SEMICOLON            : 7 8 27 72 73 74 75
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 6
STRING               : 65 66
STRUCT               : 
SUB_ASSIGN           : 31
SWITCH               : 
TILDA                : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 76
XOR_ASSIGN           : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 35 36 37 38 39 57 58
argument_expression_list : 41 45
compound_statement   : 5 6 67
declaration          : 4 11 12
declaration_list     : 10 12
declaration_list_opt : 25 26
declarator           : 5 6 7 8 16 24
direct_declarator    : 15 18 19
empty                : 9
equality_expression  : 28 29 30 31 33 34
expression           : 27 29 30 31 43 44 45 64 73 76 77 78 79
expression_statement : 68 77 77
external_declaration : 1 2
function_definition  : 3
iteration_statement  : 70
jump_statement       : 71
mult_expression      : 53 54 55 56 57 58
parameter_declaration : 22 23
parameter_list       : 20 21 23
parameter_type_list  : 18
postfix_expression   : 41 42 43 46
primary_expression   : 40
relational_expression : 32 33 34 36 37 38 39
selection_statement  : 69
statement            : 76 77 78 79 79 80 81
statement_list       : 25 81
string_literal       : 63 66
translation_unit     : 2 0
type_specifier       : 5 6 7 8 24
unary_expression     : 47 48 49 50 51 52 53 54 55

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    STATIC          shift and go to state 7
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    external_declaration           shift and go to state 1
    function_definition            shift and go to state 2
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 6
    translation_unit               shift and go to state 9

state 1

    (1) translation_unit -> external_declaration .

    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 2

    (3) external_declaration -> function_definition .

    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 3

    (13) type_specifier -> INT .

    MULTIPLY        reduce using rule 13 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 13 (type_specifier -> INT .)


state 4

    (4) external_declaration -> declaration .

    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (14) type_specifier -> CHAR .

    MULTIPLY        reduce using rule 14 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 14 (type_specifier -> CHAR .)


state 6

    (5) function_definition -> type_specifier . declarator compound_statement
    (7) declaration -> type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 11

state 7

    (6) function_definition -> STATIC . type_specifier declarator compound_statement
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    INT             shift and go to state 3
    CHAR            shift and go to state 5

    type_specifier                 shift and go to state 14

state 8

    (8) declaration -> EXTERN . type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    INT             shift and go to state 3
    CHAR            shift and go to state 5

    type_specifier                 shift and go to state 15

state 9

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) function_definition -> . type_specifier declarator compound_statement
    (6) function_definition -> . STATIC type_specifier declarator compound_statement
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    STATIC          shift and go to state 7
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    external_declaration           shift and go to state 16
    function_definition            shift and go to state 2
    declaration                    shift and go to state 4
    type_specifier                 shift and go to state 6

state 10

    (15) declarator -> direct_declarator .
    (18) direct_declarator -> direct_declarator . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> direct_declarator . LEFT_ROUND RIGHT_ROUND

    SEMICOLON       reduce using rule 15 (declarator -> direct_declarator .)
    LEFT_CURL       reduce using rule 15 (declarator -> direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> direct_declarator .)
    RIGHT_ROUND     reduce using rule 15 (declarator -> direct_declarator .)
    LEFT_ROUND      shift and go to state 17


state 11

    (5) function_definition -> type_specifier declarator . compound_statement
    (7) declaration -> type_specifier declarator . SEMICOLON
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL

    SEMICOLON       shift and go to state 18
    LEFT_CURL       shift and go to state 20

    compound_statement             shift and go to state 19

state 12

    (16) declarator -> MULTIPLY . declarator
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 21

state 13

    (17) direct_declarator -> IDENTIFIER .

    LEFT_ROUND      reduce using rule 17 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 17 (direct_declarator -> IDENTIFIER .)
    LEFT_CURL       reduce using rule 17 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 17 (direct_declarator -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 17 (direct_declarator -> IDENTIFIER .)


state 14

    (6) function_definition -> STATIC type_specifier . declarator compound_statement
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 22

state 15

    (8) declaration -> EXTERN type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 23

state 16

    (2) translation_unit -> translation_unit external_declaration .

    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 17

    (18) direct_declarator -> direct_declarator LEFT_ROUND . parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> direct_declarator LEFT_ROUND . RIGHT_ROUND
    (20) parameter_type_list -> . parameter_list
    (21) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (22) parameter_list -> . parameter_declaration
    (23) parameter_list -> . parameter_list COMMA parameter_declaration
    (24) parameter_declaration -> . type_specifier declarator
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    RIGHT_ROUND     shift and go to state 28
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    type_specifier                 shift and go to state 24
    parameter_list                 shift and go to state 25
    parameter_type_list            shift and go to state 26
    parameter_declaration          shift and go to state 27

state 18

    (7) declaration -> type_specifier declarator SEMICOLON .

    STATIC          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    EXTERN          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    INT             reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    $end            reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    RIGHT_CURL      reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    LEFT_CURL       reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    IF              reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    MULTIPLY        reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    IDENTIFIER      reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    INT_NUM         reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    REAL_NUM        reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    LEFT_ROUND      reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 7 (declaration -> type_specifier declarator SEMICOLON .)


state 19

    (5) function_definition -> type_specifier declarator compound_statement .

    STATIC          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 5 (function_definition -> type_specifier declarator compound_statement .)


state 20

    (25) compound_statement -> LEFT_CURL . declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> LEFT_CURL . declaration_list_opt RIGHT_CURL
    (9) declaration_list_opt -> . empty
    (10) declaration_list_opt -> . declaration_list
    (82) empty -> .
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    RIGHT_CURL      reduce using rule 82 (empty -> .)
    LEFT_CURL       reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    RETURN          reduce using rule 82 (empty -> .)
    BREAK           reduce using rule 82 (empty -> .)
    CONTINUE        reduce using rule 82 (empty -> .)
    MINUS           reduce using rule 82 (empty -> .)
    PLUS            reduce using rule 82 (empty -> .)
    EXCLAMATION     reduce using rule 82 (empty -> .)
    MULTIPLY        reduce using rule 82 (empty -> .)
    AMPERSAND       reduce using rule 82 (empty -> .)
    IDENTIFIER      reduce using rule 82 (empty -> .)
    INT_NUM         reduce using rule 82 (empty -> .)
    REAL_NUM        reduce using rule 82 (empty -> .)
    CHARACTER       reduce using rule 82 (empty -> .)
    LEFT_ROUND      reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    declaration_list_opt           shift and go to state 29
    type_specifier                 shift and go to state 30
    declaration_list               shift and go to state 31
    declaration                    shift and go to state 32
    empty                          shift and go to state 33

state 21

    (16) declarator -> MULTIPLY declarator .

    SEMICOLON       reduce using rule 16 (declarator -> MULTIPLY declarator .)
    LEFT_CURL       reduce using rule 16 (declarator -> MULTIPLY declarator .)
    COMMA           reduce using rule 16 (declarator -> MULTIPLY declarator .)
    RIGHT_ROUND     reduce using rule 16 (declarator -> MULTIPLY declarator .)


state 22

    (6) function_definition -> STATIC type_specifier declarator . compound_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL

    LEFT_CURL       shift and go to state 20

    compound_statement             shift and go to state 34

state 23

    (8) declaration -> EXTERN type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 35


state 24

    (24) parameter_declaration -> type_specifier . declarator
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 36

state 25

    (20) parameter_type_list -> parameter_list .
    (21) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (23) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_ROUND     reduce using rule 20 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 37


state 26

    (18) direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 38


state 27

    (22) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 22 (parameter_list -> parameter_declaration .)
    RIGHT_ROUND     reduce using rule 22 (parameter_list -> parameter_declaration .)


state 28

    (19) direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .

    LEFT_ROUND      reduce using rule 19 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 19 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    LEFT_CURL       reduce using rule 19 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 19 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 19 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)


state 29

    (25) compound_statement -> LEFT_CURL declaration_list_opt . statement_list RIGHT_CURL
    (26) compound_statement -> LEFT_CURL declaration_list_opt . RIGHT_CURL
    (80) statement_list -> . statement
    (81) statement_list -> . statement_list statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    RIGHT_CURL      shift and go to state 43
    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    jump_statement                 shift and go to state 65
    statement                      shift and go to state 55
    statement_list                 shift and go to state 70
    iteration_statement            shift and go to state 46
    primary_expression             shift and go to state 62
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54

state 30

    (7) declaration -> type_specifier . declarator SEMICOLON
    (15) declarator -> . direct_declarator
    (16) declarator -> . MULTIPLY declarator
    (17) direct_declarator -> . IDENTIFIER
    (18) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (19) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 12
    IDENTIFIER      shift and go to state 13

    direct_declarator              shift and go to state 10
    declarator                     shift and go to state 73

state 31

    (10) declaration_list_opt -> declaration_list .
    (12) declaration_list -> declaration_list . declaration
    (7) declaration -> . type_specifier declarator SEMICOLON
    (8) declaration -> . EXTERN type_specifier declarator SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    RIGHT_CURL      reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LEFT_CURL       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 10 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 10 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CONTINUE        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 10 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXCLAMATION     reduce using rule 10 (declaration_list_opt -> declaration_list .)
    MULTIPLY        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    AMPERSAND       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    IDENTIFIER      reduce using rule 10 (declaration_list_opt -> declaration_list .)
    INT_NUM         reduce using rule 10 (declaration_list_opt -> declaration_list .)
    REAL_NUM        reduce using rule 10 (declaration_list_opt -> declaration_list .)
    CHARACTER       reduce using rule 10 (declaration_list_opt -> declaration_list .)
    LEFT_ROUND      reduce using rule 10 (declaration_list_opt -> declaration_list .)
    STRING          reduce using rule 10 (declaration_list_opt -> declaration_list .)
    EXTERN          shift and go to state 8
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    declaration                    shift and go to state 74
    type_specifier                 shift and go to state 30

state 32

    (11) declaration_list -> declaration .

    EXTERN          reduce using rule 11 (declaration_list -> declaration .)
    INT             reduce using rule 11 (declaration_list -> declaration .)
    CHAR            reduce using rule 11 (declaration_list -> declaration .)
    RIGHT_CURL      reduce using rule 11 (declaration_list -> declaration .)
    LEFT_CURL       reduce using rule 11 (declaration_list -> declaration .)
    IF              reduce using rule 11 (declaration_list -> declaration .)
    WHILE           reduce using rule 11 (declaration_list -> declaration .)
    FOR             reduce using rule 11 (declaration_list -> declaration .)
    RETURN          reduce using rule 11 (declaration_list -> declaration .)
    BREAK           reduce using rule 11 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 11 (declaration_list -> declaration .)
    MINUS           reduce using rule 11 (declaration_list -> declaration .)
    PLUS            reduce using rule 11 (declaration_list -> declaration .)
    EXCLAMATION     reduce using rule 11 (declaration_list -> declaration .)
    MULTIPLY        reduce using rule 11 (declaration_list -> declaration .)
    AMPERSAND       reduce using rule 11 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 11 (declaration_list -> declaration .)
    INT_NUM         reduce using rule 11 (declaration_list -> declaration .)
    REAL_NUM        reduce using rule 11 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 11 (declaration_list -> declaration .)
    LEFT_ROUND      reduce using rule 11 (declaration_list -> declaration .)
    STRING          reduce using rule 11 (declaration_list -> declaration .)


state 33

    (9) declaration_list_opt -> empty .

    RIGHT_CURL      reduce using rule 9 (declaration_list_opt -> empty .)
    LEFT_CURL       reduce using rule 9 (declaration_list_opt -> empty .)
    IF              reduce using rule 9 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 9 (declaration_list_opt -> empty .)
    FOR             reduce using rule 9 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 9 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 9 (declaration_list_opt -> empty .)
    CONTINUE        reduce using rule 9 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 9 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 9 (declaration_list_opt -> empty .)
    EXCLAMATION     reduce using rule 9 (declaration_list_opt -> empty .)
    MULTIPLY        reduce using rule 9 (declaration_list_opt -> empty .)
    AMPERSAND       reduce using rule 9 (declaration_list_opt -> empty .)
    IDENTIFIER      reduce using rule 9 (declaration_list_opt -> empty .)
    INT_NUM         reduce using rule 9 (declaration_list_opt -> empty .)
    REAL_NUM        reduce using rule 9 (declaration_list_opt -> empty .)
    CHARACTER       reduce using rule 9 (declaration_list_opt -> empty .)
    LEFT_ROUND      reduce using rule 9 (declaration_list_opt -> empty .)
    STRING          reduce using rule 9 (declaration_list_opt -> empty .)


state 34

    (6) function_definition -> STATIC type_specifier declarator compound_statement .

    STATIC          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)
    $end            reduce using rule 6 (function_definition -> STATIC type_specifier declarator compound_statement .)


state 35

    (8) declaration -> EXTERN type_specifier declarator SEMICOLON .

    STATIC          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    EXTERN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INT             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHAR            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    $end            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RIGHT_CURL      reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LEFT_CURL       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    IF              reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    WHILE           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    RETURN          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    BREAK           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CONTINUE        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    MINUS           reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    PLUS            reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    EXCLAMATION     reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    MULTIPLY        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    AMPERSAND       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    IDENTIFIER      reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    INT_NUM         reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    REAL_NUM        reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    CHARACTER       reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    LEFT_ROUND      reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)
    STRING          reduce using rule 8 (declaration -> EXTERN type_specifier declarator SEMICOLON .)


state 36

    (24) parameter_declaration -> type_specifier declarator .

    COMMA           reduce using rule 24 (parameter_declaration -> type_specifier declarator .)
    RIGHT_ROUND     reduce using rule 24 (parameter_declaration -> type_specifier declarator .)


state 37

    (21) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (23) parameter_list -> parameter_list COMMA . parameter_declaration
    (24) parameter_declaration -> . type_specifier declarator
    (13) type_specifier -> . INT
    (14) type_specifier -> . CHAR

    ELLIPSIS        shift and go to state 76
    INT             shift and go to state 3
    CHAR            shift and go to state 5

    parameter_declaration          shift and go to state 75
    type_specifier                 shift and go to state 24

state 38

    (18) direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .

    LEFT_ROUND      reduce using rule 18 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 18 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    LEFT_CURL       reduce using rule 18 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    COMMA           reduce using rule 18 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 18 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)


state 39

    (68) statement -> expression_statement .

    RIGHT_CURL      reduce using rule 68 (statement -> expression_statement .)
    LEFT_CURL       reduce using rule 68 (statement -> expression_statement .)
    IF              reduce using rule 68 (statement -> expression_statement .)
    WHILE           reduce using rule 68 (statement -> expression_statement .)
    FOR             reduce using rule 68 (statement -> expression_statement .)
    RETURN          reduce using rule 68 (statement -> expression_statement .)
    BREAK           reduce using rule 68 (statement -> expression_statement .)
    CONTINUE        reduce using rule 68 (statement -> expression_statement .)
    MINUS           reduce using rule 68 (statement -> expression_statement .)
    PLUS            reduce using rule 68 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 68 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 68 (statement -> expression_statement .)
    AMPERSAND       reduce using rule 68 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 68 (statement -> expression_statement .)
    INT_NUM         reduce using rule 68 (statement -> expression_statement .)
    REAL_NUM        reduce using rule 68 (statement -> expression_statement .)
    CHARACTER       reduce using rule 68 (statement -> expression_statement .)
    LEFT_ROUND      reduce using rule 68 (statement -> expression_statement .)
    STRING          reduce using rule 68 (statement -> expression_statement .)
    ELSE            reduce using rule 68 (statement -> expression_statement .)


state 40

    (49) unary_expression -> EXCLAMATION . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 41

    (72) jump_statement -> RETURN . SEMICOLON
    (73) jump_statement -> RETURN . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    SEMICOLON       shift and go to state 78
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 79
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 42

    (52) mult_expression -> unary_expression .

    MULTIPLY        reduce using rule 52 (mult_expression -> unary_expression .)
    DIVIDE          reduce using rule 52 (mult_expression -> unary_expression .)
    MODULO          reduce using rule 52 (mult_expression -> unary_expression .)
    PLUS            reduce using rule 52 (mult_expression -> unary_expression .)
    MINUS           reduce using rule 52 (mult_expression -> unary_expression .)
    L_OP            reduce using rule 52 (mult_expression -> unary_expression .)
    G_OP            reduce using rule 52 (mult_expression -> unary_expression .)
    LE_OP           reduce using rule 52 (mult_expression -> unary_expression .)
    GE_OP           reduce using rule 52 (mult_expression -> unary_expression .)
    EQUAL           reduce using rule 52 (mult_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 52 (mult_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 52 (mult_expression -> unary_expression .)
    EQ_OP           reduce using rule 52 (mult_expression -> unary_expression .)
    NE_OP           reduce using rule 52 (mult_expression -> unary_expression .)
    SEMICOLON       reduce using rule 52 (mult_expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 52 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 52 (mult_expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 52 (mult_expression -> unary_expression .)


state 43

    (26) compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .

    RIGHT_CURL      reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    LEFT_CURL       reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    IF              reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    WHILE           reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    FOR             reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    RETURN          reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    BREAK           reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    CONTINUE        reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    MINUS           reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    PLUS            reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    EXCLAMATION     reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    MULTIPLY        reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    AMPERSAND       reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    IDENTIFIER      reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    INT_NUM         reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    REAL_NUM        reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    CHARACTER       reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    STRING          reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    ELSE            reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    STATIC          reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    EXTERN          reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    INT             reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    CHAR            reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)
    $end            reduce using rule 26 (compound_statement -> LEFT_CURL declaration_list_opt RIGHT_CURL .)


state 44

    (76) iteration_statement -> WHILE . LEFT_ROUND expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 80


state 45

    (50) unary_expression -> MULTIPLY . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 81
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 46

    (70) statement -> iteration_statement .

    RIGHT_CURL      reduce using rule 70 (statement -> iteration_statement .)
    LEFT_CURL       reduce using rule 70 (statement -> iteration_statement .)
    IF              reduce using rule 70 (statement -> iteration_statement .)
    WHILE           reduce using rule 70 (statement -> iteration_statement .)
    FOR             reduce using rule 70 (statement -> iteration_statement .)
    RETURN          reduce using rule 70 (statement -> iteration_statement .)
    BREAK           reduce using rule 70 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 70 (statement -> iteration_statement .)
    MINUS           reduce using rule 70 (statement -> iteration_statement .)
    PLUS            reduce using rule 70 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 70 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 70 (statement -> iteration_statement .)
    AMPERSAND       reduce using rule 70 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 70 (statement -> iteration_statement .)
    INT_NUM         reduce using rule 70 (statement -> iteration_statement .)
    REAL_NUM        reduce using rule 70 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 70 (statement -> iteration_statement .)
    LEFT_ROUND      reduce using rule 70 (statement -> iteration_statement .)
    STRING          reduce using rule 70 (statement -> iteration_statement .)
    ELSE            reduce using rule 70 (statement -> iteration_statement .)


state 47

    (47) unary_expression -> MINUS . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 82
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 48

    (35) relational_expression -> additive_expression .
    (57) additive_expression -> additive_expression . PLUS mult_expression
    (58) additive_expression -> additive_expression . MINUS mult_expression

    L_OP            reduce using rule 35 (relational_expression -> additive_expression .)
    G_OP            reduce using rule 35 (relational_expression -> additive_expression .)
    LE_OP           reduce using rule 35 (relational_expression -> additive_expression .)
    GE_OP           reduce using rule 35 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 35 (relational_expression -> additive_expression .)
    ADD_ASSIGN      reduce using rule 35 (relational_expression -> additive_expression .)
    SUB_ASSIGN      reduce using rule 35 (relational_expression -> additive_expression .)
    EQ_OP           reduce using rule 35 (relational_expression -> additive_expression .)
    NE_OP           reduce using rule 35 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 35 (relational_expression -> additive_expression .)
    RIGHT_ROUND     reduce using rule 35 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 35 (relational_expression -> additive_expression .)
    RIGHT_SQUARE    reduce using rule 35 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 49

    (63) primary_expression -> string_literal .
    (66) string_literal -> string_literal . STRING

    LEFT_ROUND      reduce using rule 63 (primary_expression -> string_literal .)
    LEFT_SQUARE     reduce using rule 63 (primary_expression -> string_literal .)
    MULTIPLY        reduce using rule 63 (primary_expression -> string_literal .)
    DIVIDE          reduce using rule 63 (primary_expression -> string_literal .)
    MODULO          reduce using rule 63 (primary_expression -> string_literal .)
    PLUS            reduce using rule 63 (primary_expression -> string_literal .)
    MINUS           reduce using rule 63 (primary_expression -> string_literal .)
    L_OP            reduce using rule 63 (primary_expression -> string_literal .)
    G_OP            reduce using rule 63 (primary_expression -> string_literal .)
    LE_OP           reduce using rule 63 (primary_expression -> string_literal .)
    GE_OP           reduce using rule 63 (primary_expression -> string_literal .)
    EQUAL           reduce using rule 63 (primary_expression -> string_literal .)
    ADD_ASSIGN      reduce using rule 63 (primary_expression -> string_literal .)
    SUB_ASSIGN      reduce using rule 63 (primary_expression -> string_literal .)
    EQ_OP           reduce using rule 63 (primary_expression -> string_literal .)
    NE_OP           reduce using rule 63 (primary_expression -> string_literal .)
    SEMICOLON       reduce using rule 63 (primary_expression -> string_literal .)
    RIGHT_ROUND     reduce using rule 63 (primary_expression -> string_literal .)
    COMMA           reduce using rule 63 (primary_expression -> string_literal .)
    RIGHT_SQUARE    reduce using rule 63 (primary_expression -> string_literal .)
    STRING          shift and go to state 85


state 50

    (67) statement -> compound_statement .

    RIGHT_CURL      reduce using rule 67 (statement -> compound_statement .)
    LEFT_CURL       reduce using rule 67 (statement -> compound_statement .)
    IF              reduce using rule 67 (statement -> compound_statement .)
    WHILE           reduce using rule 67 (statement -> compound_statement .)
    FOR             reduce using rule 67 (statement -> compound_statement .)
    RETURN          reduce using rule 67 (statement -> compound_statement .)
    BREAK           reduce using rule 67 (statement -> compound_statement .)
    CONTINUE        reduce using rule 67 (statement -> compound_statement .)
    MINUS           reduce using rule 67 (statement -> compound_statement .)
    PLUS            reduce using rule 67 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 67 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 67 (statement -> compound_statement .)
    AMPERSAND       reduce using rule 67 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 67 (statement -> compound_statement .)
    INT_NUM         reduce using rule 67 (statement -> compound_statement .)
    REAL_NUM        reduce using rule 67 (statement -> compound_statement .)
    CHARACTER       reduce using rule 67 (statement -> compound_statement .)
    LEFT_ROUND      reduce using rule 67 (statement -> compound_statement .)
    STRING          reduce using rule 67 (statement -> compound_statement .)
    ELSE            reduce using rule 67 (statement -> compound_statement .)


state 51

    (69) statement -> selection_statement .

    RIGHT_CURL      reduce using rule 69 (statement -> selection_statement .)
    LEFT_CURL       reduce using rule 69 (statement -> selection_statement .)
    IF              reduce using rule 69 (statement -> selection_statement .)
    WHILE           reduce using rule 69 (statement -> selection_statement .)
    FOR             reduce using rule 69 (statement -> selection_statement .)
    RETURN          reduce using rule 69 (statement -> selection_statement .)
    BREAK           reduce using rule 69 (statement -> selection_statement .)
    CONTINUE        reduce using rule 69 (statement -> selection_statement .)
    MINUS           reduce using rule 69 (statement -> selection_statement .)
    PLUS            reduce using rule 69 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 69 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 69 (statement -> selection_statement .)
    AMPERSAND       reduce using rule 69 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 69 (statement -> selection_statement .)
    INT_NUM         reduce using rule 69 (statement -> selection_statement .)
    REAL_NUM        reduce using rule 69 (statement -> selection_statement .)
    CHARACTER       reduce using rule 69 (statement -> selection_statement .)
    LEFT_ROUND      reduce using rule 69 (statement -> selection_statement .)
    STRING          reduce using rule 69 (statement -> selection_statement .)
    ELSE            reduce using rule 69 (statement -> selection_statement .)


state 52

    (46) unary_expression -> postfix_expression .
    (41) postfix_expression -> postfix_expression . LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> postfix_expression . LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> postfix_expression . LEFT_SQUARE expression RIGHT_SQUARE

    MULTIPLY        reduce using rule 46 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 46 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 46 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 46 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 46 (unary_expression -> postfix_expression .)
    L_OP            reduce using rule 46 (unary_expression -> postfix_expression .)
    G_OP            reduce using rule 46 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 46 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 46 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 46 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 46 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 46 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 46 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 46 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 46 (unary_expression -> postfix_expression .)
    RIGHT_ROUND     reduce using rule 46 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 46 (unary_expression -> postfix_expression .)
    RIGHT_SQUARE    reduce using rule 46 (unary_expression -> postfix_expression .)
    LEFT_ROUND      shift and go to state 86
    LEFT_SQUARE     shift and go to state 87


state 53

    (48) unary_expression -> PLUS . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 88
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 54

    (32) equality_expression -> relational_expression .
    (36) relational_expression -> relational_expression . L_OP additive_expression
    (37) relational_expression -> relational_expression . G_OP additive_expression
    (38) relational_expression -> relational_expression . LE_OP additive_expression
    (39) relational_expression -> relational_expression . GE_OP additive_expression

    EQUAL           reduce using rule 32 (equality_expression -> relational_expression .)
    ADD_ASSIGN      reduce using rule 32 (equality_expression -> relational_expression .)
    SUB_ASSIGN      reduce using rule 32 (equality_expression -> relational_expression .)
    EQ_OP           reduce using rule 32 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 32 (equality_expression -> relational_expression .)
    RIGHT_ROUND     reduce using rule 32 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 32 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 32 (equality_expression -> relational_expression .)
    RIGHT_SQUARE    reduce using rule 32 (equality_expression -> relational_expression .)
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    LE_OP           shift and go to state 89
    GE_OP           shift and go to state 92


state 55

    (80) statement_list -> statement .

    RIGHT_CURL      reduce using rule 80 (statement_list -> statement .)
    LEFT_CURL       reduce using rule 80 (statement_list -> statement .)
    IF              reduce using rule 80 (statement_list -> statement .)
    WHILE           reduce using rule 80 (statement_list -> statement .)
    FOR             reduce using rule 80 (statement_list -> statement .)
    RETURN          reduce using rule 80 (statement_list -> statement .)
    BREAK           reduce using rule 80 (statement_list -> statement .)
    CONTINUE        reduce using rule 80 (statement_list -> statement .)
    MINUS           reduce using rule 80 (statement_list -> statement .)
    PLUS            reduce using rule 80 (statement_list -> statement .)
    EXCLAMATION     reduce using rule 80 (statement_list -> statement .)
    MULTIPLY        reduce using rule 80 (statement_list -> statement .)
    AMPERSAND       reduce using rule 80 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 80 (statement_list -> statement .)
    INT_NUM         reduce using rule 80 (statement_list -> statement .)
    REAL_NUM        reduce using rule 80 (statement_list -> statement .)
    CHARACTER       reduce using rule 80 (statement_list -> statement .)
    LEFT_ROUND      reduce using rule 80 (statement_list -> statement .)
    STRING          reduce using rule 80 (statement_list -> statement .)


state 56

    (65) string_literal -> STRING .

    STRING          reduce using rule 65 (string_literal -> STRING .)
    LEFT_ROUND      reduce using rule 65 (string_literal -> STRING .)
    LEFT_SQUARE     reduce using rule 65 (string_literal -> STRING .)
    MULTIPLY        reduce using rule 65 (string_literal -> STRING .)
    DIVIDE          reduce using rule 65 (string_literal -> STRING .)
    MODULO          reduce using rule 65 (string_literal -> STRING .)
    PLUS            reduce using rule 65 (string_literal -> STRING .)
    MINUS           reduce using rule 65 (string_literal -> STRING .)
    L_OP            reduce using rule 65 (string_literal -> STRING .)
    G_OP            reduce using rule 65 (string_literal -> STRING .)
    LE_OP           reduce using rule 65 (string_literal -> STRING .)
    GE_OP           reduce using rule 65 (string_literal -> STRING .)
    EQUAL           reduce using rule 65 (string_literal -> STRING .)
    ADD_ASSIGN      reduce using rule 65 (string_literal -> STRING .)
    SUB_ASSIGN      reduce using rule 65 (string_literal -> STRING .)
    EQ_OP           reduce using rule 65 (string_literal -> STRING .)
    NE_OP           reduce using rule 65 (string_literal -> STRING .)
    RIGHT_ROUND     reduce using rule 65 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 65 (string_literal -> STRING .)
    COMMA           reduce using rule 65 (string_literal -> STRING .)
    RIGHT_SQUARE    reduce using rule 65 (string_literal -> STRING .)


state 57

    (59) primary_expression -> IDENTIFIER .

    LEFT_ROUND      reduce using rule 59 (primary_expression -> IDENTIFIER .)
    LEFT_SQUARE     reduce using rule 59 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 59 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 59 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 59 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 59 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    L_OP            reduce using rule 59 (primary_expression -> IDENTIFIER .)
    G_OP            reduce using rule 59 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 59 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 59 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 59 (primary_expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 59 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 59 (primary_expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 59 (primary_expression -> IDENTIFIER .)


state 58

    (77) iteration_statement -> FOR . LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement

    LEFT_ROUND      shift and go to state 93


state 59

    (62) primary_expression -> CHARACTER .

    LEFT_ROUND      reduce using rule 62 (primary_expression -> CHARACTER .)
    LEFT_SQUARE     reduce using rule 62 (primary_expression -> CHARACTER .)
    MULTIPLY        reduce using rule 62 (primary_expression -> CHARACTER .)
    DIVIDE          reduce using rule 62 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 62 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 62 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 62 (primary_expression -> CHARACTER .)
    L_OP            reduce using rule 62 (primary_expression -> CHARACTER .)
    G_OP            reduce using rule 62 (primary_expression -> CHARACTER .)
    LE_OP           reduce using rule 62 (primary_expression -> CHARACTER .)
    GE_OP           reduce using rule 62 (primary_expression -> CHARACTER .)
    EQUAL           reduce using rule 62 (primary_expression -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 62 (primary_expression -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 62 (primary_expression -> CHARACTER .)
    EQ_OP           reduce using rule 62 (primary_expression -> CHARACTER .)
    NE_OP           reduce using rule 62 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 62 (primary_expression -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 62 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 62 (primary_expression -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 62 (primary_expression -> CHARACTER .)


state 60

    (56) additive_expression -> mult_expression .
    (53) mult_expression -> mult_expression . MULTIPLY unary_expression
    (54) mult_expression -> mult_expression . DIVIDE unary_expression
    (55) mult_expression -> mult_expression . MODULO unary_expression

    PLUS            reduce using rule 56 (additive_expression -> mult_expression .)
    MINUS           reduce using rule 56 (additive_expression -> mult_expression .)
    L_OP            reduce using rule 56 (additive_expression -> mult_expression .)
    G_OP            reduce using rule 56 (additive_expression -> mult_expression .)
    LE_OP           reduce using rule 56 (additive_expression -> mult_expression .)
    GE_OP           reduce using rule 56 (additive_expression -> mult_expression .)
    EQUAL           reduce using rule 56 (additive_expression -> mult_expression .)
    ADD_ASSIGN      reduce using rule 56 (additive_expression -> mult_expression .)
    SUB_ASSIGN      reduce using rule 56 (additive_expression -> mult_expression .)
    EQ_OP           reduce using rule 56 (additive_expression -> mult_expression .)
    NE_OP           reduce using rule 56 (additive_expression -> mult_expression .)
    SEMICOLON       reduce using rule 56 (additive_expression -> mult_expression .)
    RIGHT_ROUND     reduce using rule 56 (additive_expression -> mult_expression .)
    COMMA           reduce using rule 56 (additive_expression -> mult_expression .)
    RIGHT_SQUARE    reduce using rule 56 (additive_expression -> mult_expression .)
    MULTIPLY        shift and go to state 94
    DIVIDE          shift and go to state 96
    MODULO          shift and go to state 95


state 61

    (51) unary_expression -> AMPERSAND . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 97
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 62

    (40) postfix_expression -> primary_expression .

    LEFT_ROUND      reduce using rule 40 (postfix_expression -> primary_expression .)
    LEFT_SQUARE     reduce using rule 40 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 40 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 40 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 40 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 40 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 40 (postfix_expression -> primary_expression .)
    L_OP            reduce using rule 40 (postfix_expression -> primary_expression .)
    G_OP            reduce using rule 40 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 40 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 40 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 40 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 40 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 40 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 40 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 40 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 40 (postfix_expression -> primary_expression .)
    RIGHT_ROUND     reduce using rule 40 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 40 (postfix_expression -> primary_expression .)
    RIGHT_SQUARE    reduce using rule 40 (postfix_expression -> primary_expression .)


state 63

    (28) expression -> equality_expression .
    (29) expression -> equality_expression . EQUAL expression
    (30) expression -> equality_expression . ADD_ASSIGN expression
    (31) expression -> equality_expression . SUB_ASSIGN expression
    (33) equality_expression -> equality_expression . EQ_OP relational_expression
    (34) equality_expression -> equality_expression . NE_OP relational_expression

    SEMICOLON       reduce using rule 28 (expression -> equality_expression .)
    RIGHT_ROUND     reduce using rule 28 (expression -> equality_expression .)
    COMMA           reduce using rule 28 (expression -> equality_expression .)
    RIGHT_SQUARE    reduce using rule 28 (expression -> equality_expression .)
    EQUAL           shift and go to state 99
    ADD_ASSIGN      shift and go to state 102
    SUB_ASSIGN      shift and go to state 98
    EQ_OP           shift and go to state 101
    NE_OP           shift and go to state 100


state 64

    (78) selection_statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> IF . LEFT_ROUND expression RIGHT_ROUND statement ELSE statement

    LEFT_ROUND      shift and go to state 103


state 65

    (71) statement -> jump_statement .

    RIGHT_CURL      reduce using rule 71 (statement -> jump_statement .)
    LEFT_CURL       reduce using rule 71 (statement -> jump_statement .)
    IF              reduce using rule 71 (statement -> jump_statement .)
    WHILE           reduce using rule 71 (statement -> jump_statement .)
    FOR             reduce using rule 71 (statement -> jump_statement .)
    RETURN          reduce using rule 71 (statement -> jump_statement .)
    BREAK           reduce using rule 71 (statement -> jump_statement .)
    CONTINUE        reduce using rule 71 (statement -> jump_statement .)
    MINUS           reduce using rule 71 (statement -> jump_statement .)
    PLUS            reduce using rule 71 (statement -> jump_statement .)
    EXCLAMATION     reduce using rule 71 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 71 (statement -> jump_statement .)
    AMPERSAND       reduce using rule 71 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 71 (statement -> jump_statement .)
    INT_NUM         reduce using rule 71 (statement -> jump_statement .)
    REAL_NUM        reduce using rule 71 (statement -> jump_statement .)
    CHARACTER       reduce using rule 71 (statement -> jump_statement .)
    LEFT_ROUND      reduce using rule 71 (statement -> jump_statement .)
    STRING          reduce using rule 71 (statement -> jump_statement .)
    ELSE            reduce using rule 71 (statement -> jump_statement .)


state 66

    (64) primary_expression -> LEFT_ROUND . expression RIGHT_ROUND
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 104
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 67

    (74) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 105


state 68

    (60) primary_expression -> INT_NUM .

    LEFT_ROUND      reduce using rule 60 (primary_expression -> INT_NUM .)
    LEFT_SQUARE     reduce using rule 60 (primary_expression -> INT_NUM .)
    MULTIPLY        reduce using rule 60 (primary_expression -> INT_NUM .)
    DIVIDE          reduce using rule 60 (primary_expression -> INT_NUM .)
    MODULO          reduce using rule 60 (primary_expression -> INT_NUM .)
    PLUS            reduce using rule 60 (primary_expression -> INT_NUM .)
    MINUS           reduce using rule 60 (primary_expression -> INT_NUM .)
    L_OP            reduce using rule 60 (primary_expression -> INT_NUM .)
    G_OP            reduce using rule 60 (primary_expression -> INT_NUM .)
    LE_OP           reduce using rule 60 (primary_expression -> INT_NUM .)
    GE_OP           reduce using rule 60 (primary_expression -> INT_NUM .)
    EQUAL           reduce using rule 60 (primary_expression -> INT_NUM .)
    ADD_ASSIGN      reduce using rule 60 (primary_expression -> INT_NUM .)
    SUB_ASSIGN      reduce using rule 60 (primary_expression -> INT_NUM .)
    EQ_OP           reduce using rule 60 (primary_expression -> INT_NUM .)
    NE_OP           reduce using rule 60 (primary_expression -> INT_NUM .)
    SEMICOLON       reduce using rule 60 (primary_expression -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 60 (primary_expression -> INT_NUM .)
    COMMA           reduce using rule 60 (primary_expression -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 60 (primary_expression -> INT_NUM .)


state 69

    (75) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 106


state 70

    (25) compound_statement -> LEFT_CURL declaration_list_opt statement_list . RIGHT_CURL
    (81) statement_list -> statement_list . statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    RIGHT_CURL      shift and go to state 107
    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    jump_statement                 shift and go to state 65
    statement                      shift and go to state 108
    iteration_statement            shift and go to state 46
    primary_expression             shift and go to state 62
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54

state 71

    (27) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 109


state 72

    (61) primary_expression -> REAL_NUM .

    LEFT_ROUND      reduce using rule 61 (primary_expression -> REAL_NUM .)
    LEFT_SQUARE     reduce using rule 61 (primary_expression -> REAL_NUM .)
    MULTIPLY        reduce using rule 61 (primary_expression -> REAL_NUM .)
    DIVIDE          reduce using rule 61 (primary_expression -> REAL_NUM .)
    MODULO          reduce using rule 61 (primary_expression -> REAL_NUM .)
    PLUS            reduce using rule 61 (primary_expression -> REAL_NUM .)
    MINUS           reduce using rule 61 (primary_expression -> REAL_NUM .)
    L_OP            reduce using rule 61 (primary_expression -> REAL_NUM .)
    G_OP            reduce using rule 61 (primary_expression -> REAL_NUM .)
    LE_OP           reduce using rule 61 (primary_expression -> REAL_NUM .)
    GE_OP           reduce using rule 61 (primary_expression -> REAL_NUM .)
    EQUAL           reduce using rule 61 (primary_expression -> REAL_NUM .)
    ADD_ASSIGN      reduce using rule 61 (primary_expression -> REAL_NUM .)
    SUB_ASSIGN      reduce using rule 61 (primary_expression -> REAL_NUM .)
    EQ_OP           reduce using rule 61 (primary_expression -> REAL_NUM .)
    NE_OP           reduce using rule 61 (primary_expression -> REAL_NUM .)
    SEMICOLON       reduce using rule 61 (primary_expression -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 61 (primary_expression -> REAL_NUM .)
    COMMA           reduce using rule 61 (primary_expression -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 61 (primary_expression -> REAL_NUM .)


state 73

    (7) declaration -> type_specifier declarator . SEMICOLON

    SEMICOLON       shift and go to state 18


state 74

    (12) declaration_list -> declaration_list declaration .

    EXTERN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RIGHT_CURL      reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LEFT_CURL       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    EXCLAMATION     reduce using rule 12 (declaration_list -> declaration_list declaration .)
    MULTIPLY        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    AMPERSAND       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT_NUM         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    REAL_NUM        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LEFT_ROUND      reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 75

    (23) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 23 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RIGHT_ROUND     reduce using rule 23 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 76

    (21) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RIGHT_ROUND     reduce using rule 21 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 77

    (49) unary_expression -> EXCLAMATION unary_expression .

    MULTIPLY        reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    L_OP            reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    G_OP            reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    LE_OP           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    GE_OP           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    ADD_ASSIGN      reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    SUB_ASSIGN      reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    EQ_OP           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    NE_OP           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    SEMICOLON       reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    RIGHT_ROUND     reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)
    RIGHT_SQUARE    reduce using rule 49 (unary_expression -> EXCLAMATION unary_expression .)


state 78

    (72) jump_statement -> RETURN SEMICOLON .

    RIGHT_CURL      reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    LEFT_CURL       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    MULTIPLY        reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    INT_NUM         reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    REAL_NUM        reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    LEFT_ROUND      reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)


state 79

    (73) jump_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 110


state 80

    (76) iteration_statement -> WHILE LEFT_ROUND . expression RIGHT_ROUND statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    mult_expression                shift and go to state 60
    expression                     shift and go to state 111
    primary_expression             shift and go to state 62
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 81

    (50) unary_expression -> MULTIPLY unary_expression .

    MULTIPLY        reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    MODULO          reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    L_OP            reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    G_OP            reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    LE_OP           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    GE_OP           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    EQUAL           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    ADD_ASSIGN      reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    SUB_ASSIGN      reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    EQ_OP           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    NE_OP           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    SEMICOLON       reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    RIGHT_ROUND     reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)
    RIGHT_SQUARE    reduce using rule 50 (unary_expression -> MULTIPLY unary_expression .)


state 82

    (47) unary_expression -> MINUS unary_expression .

    MULTIPLY        reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    L_OP            reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    G_OP            reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    LE_OP           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    GE_OP           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    ADD_ASSIGN      reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    SUB_ASSIGN      reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    EQ_OP           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    NE_OP           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    RIGHT_ROUND     reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 47 (unary_expression -> MINUS unary_expression .)
    RIGHT_SQUARE    reduce using rule 47 (unary_expression -> MINUS unary_expression .)


state 83

    (57) additive_expression -> additive_expression PLUS . mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 112

state 84

    (58) additive_expression -> additive_expression MINUS . mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 113

state 85

    (66) string_literal -> string_literal STRING .

    STRING          reduce using rule 66 (string_literal -> string_literal STRING .)
    LEFT_ROUND      reduce using rule 66 (string_literal -> string_literal STRING .)
    LEFT_SQUARE     reduce using rule 66 (string_literal -> string_literal STRING .)
    MULTIPLY        reduce using rule 66 (string_literal -> string_literal STRING .)
    DIVIDE          reduce using rule 66 (string_literal -> string_literal STRING .)
    MODULO          reduce using rule 66 (string_literal -> string_literal STRING .)
    PLUS            reduce using rule 66 (string_literal -> string_literal STRING .)
    MINUS           reduce using rule 66 (string_literal -> string_literal STRING .)
    L_OP            reduce using rule 66 (string_literal -> string_literal STRING .)
    G_OP            reduce using rule 66 (string_literal -> string_literal STRING .)
    LE_OP           reduce using rule 66 (string_literal -> string_literal STRING .)
    GE_OP           reduce using rule 66 (string_literal -> string_literal STRING .)
    EQUAL           reduce using rule 66 (string_literal -> string_literal STRING .)
    ADD_ASSIGN      reduce using rule 66 (string_literal -> string_literal STRING .)
    SUB_ASSIGN      reduce using rule 66 (string_literal -> string_literal STRING .)
    EQ_OP           reduce using rule 66 (string_literal -> string_literal STRING .)
    NE_OP           reduce using rule 66 (string_literal -> string_literal STRING .)
    RIGHT_ROUND     reduce using rule 66 (string_literal -> string_literal STRING .)
    SEMICOLON       reduce using rule 66 (string_literal -> string_literal STRING .)
    COMMA           reduce using rule 66 (string_literal -> string_literal STRING .)
    RIGHT_SQUARE    reduce using rule 66 (string_literal -> string_literal STRING .)


state 86

    (41) postfix_expression -> postfix_expression LEFT_ROUND . argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> postfix_expression LEFT_ROUND . RIGHT_ROUND
    (44) argument_expression_list -> . expression
    (45) argument_expression_list -> . argument_expression_list COMMA expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    RIGHT_ROUND     shift and go to state 114
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    argument_expression_list       shift and go to state 115
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 116
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 87

    (43) postfix_expression -> postfix_expression LEFT_SQUARE . expression RIGHT_SQUARE
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    expression                     shift and go to state 117
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 88

    (48) unary_expression -> PLUS unary_expression .

    MULTIPLY        reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    L_OP            reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    G_OP            reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    LE_OP           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    GE_OP           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    ADD_ASSIGN      reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    SUB_ASSIGN      reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    EQ_OP           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    NE_OP           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    RIGHT_ROUND     reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 48 (unary_expression -> PLUS unary_expression .)
    RIGHT_SQUARE    reduce using rule 48 (unary_expression -> PLUS unary_expression .)


state 89

    (38) relational_expression -> relational_expression LE_OP . additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 118

state 90

    (37) relational_expression -> relational_expression G_OP . additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 119

state 91

    (36) relational_expression -> relational_expression L_OP . additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 120

state 92

    (39) relational_expression -> relational_expression GE_OP . additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 121

state 93

    (77) iteration_statement -> FOR LEFT_ROUND . expression_statement expression_statement expression RIGHT_ROUND statement
    (27) expression_statement -> . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 122
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    mult_expression                shift and go to state 60
    expression                     shift and go to state 71
    primary_expression             shift and go to state 62
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 94

    (53) mult_expression -> mult_expression MULTIPLY . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 123
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 95

    (55) mult_expression -> mult_expression MODULO . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 124
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 96

    (54) mult_expression -> mult_expression DIVIDE . unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 125
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 62

state 97

    (51) unary_expression -> AMPERSAND unary_expression .

    MULTIPLY        reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    MODULO          reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    PLUS            reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    L_OP            reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    G_OP            reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    LE_OP           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    GE_OP           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    EQUAL           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    ADD_ASSIGN      reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    SUB_ASSIGN      reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    EQ_OP           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    NE_OP           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    SEMICOLON       reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    RIGHT_ROUND     reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    COMMA           reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)
    RIGHT_SQUARE    reduce using rule 51 (unary_expression -> AMPERSAND unary_expression .)


state 98

    (31) expression -> equality_expression SUB_ASSIGN . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 126
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 99

    (29) expression -> equality_expression EQUAL . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 127
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 100

    (34) equality_expression -> equality_expression NE_OP . relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    relational_expression          shift and go to state 128
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 101

    (33) equality_expression -> equality_expression EQ_OP . relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    relational_expression          shift and go to state 129
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 102

    (30) expression -> equality_expression ADD_ASSIGN . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    relational_expression          shift and go to state 54
    mult_expression                shift and go to state 60
    expression                     shift and go to state 130
    additive_expression            shift and go to state 48
    primary_expression             shift and go to state 62

state 103

    (78) selection_statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement
    (79) selection_statement -> IF LEFT_ROUND . expression RIGHT_ROUND statement ELSE statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    mult_expression                shift and go to state 60
    expression                     shift and go to state 131
    primary_expression             shift and go to state 62
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 104

    (64) primary_expression -> LEFT_ROUND expression . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 132


state 105

    (74) jump_statement -> BREAK SEMICOLON .

    RIGHT_CURL      reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    LEFT_CURL       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    MULTIPLY        reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    INT_NUM         reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    REAL_NUM        reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    LEFT_ROUND      reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)


state 106

    (75) jump_statement -> CONTINUE SEMICOLON .

    RIGHT_CURL      reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_CURL       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    MULTIPLY        reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    INT_NUM         reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    REAL_NUM        reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_ROUND      reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)


state 107

    (25) compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .

    RIGHT_CURL      reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    LEFT_CURL       reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    IF              reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    WHILE           reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    FOR             reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    RETURN          reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    BREAK           reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    CONTINUE        reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    MINUS           reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    PLUS            reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    EXCLAMATION     reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    MULTIPLY        reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    AMPERSAND       reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    INT_NUM         reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    REAL_NUM        reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    CHARACTER       reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    STRING          reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    ELSE            reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    STATIC          reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    EXTERN          reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    INT             reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    CHAR            reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)
    $end            reduce using rule 25 (compound_statement -> LEFT_CURL declaration_list_opt statement_list RIGHT_CURL .)


state 108

    (81) statement_list -> statement_list statement .

    RIGHT_CURL      reduce using rule 81 (statement_list -> statement_list statement .)
    LEFT_CURL       reduce using rule 81 (statement_list -> statement_list statement .)
    IF              reduce using rule 81 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 81 (statement_list -> statement_list statement .)
    FOR             reduce using rule 81 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 81 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 81 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 81 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 81 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 81 (statement_list -> statement_list statement .)
    EXCLAMATION     reduce using rule 81 (statement_list -> statement_list statement .)
    MULTIPLY        reduce using rule 81 (statement_list -> statement_list statement .)
    AMPERSAND       reduce using rule 81 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 81 (statement_list -> statement_list statement .)
    INT_NUM         reduce using rule 81 (statement_list -> statement_list statement .)
    REAL_NUM        reduce using rule 81 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 81 (statement_list -> statement_list statement .)
    LEFT_ROUND      reduce using rule 81 (statement_list -> statement_list statement .)
    STRING          reduce using rule 81 (statement_list -> statement_list statement .)


state 109

    (27) expression_statement -> expression SEMICOLON .

    RIGHT_CURL      reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LEFT_CURL       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    MULTIPLY        reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    INT_NUM         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    REAL_NUM        reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 27 (expression_statement -> expression SEMICOLON .)


state 110

    (73) jump_statement -> RETURN expression SEMICOLON .

    RIGHT_CURL      reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_CURL       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    MULTIPLY        reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    INT_NUM         reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    REAL_NUM        reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_ROUND      reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)


state 111

    (76) iteration_statement -> WHILE LEFT_ROUND expression . RIGHT_ROUND statement

    RIGHT_ROUND     shift and go to state 133


state 112

    (57) additive_expression -> additive_expression PLUS mult_expression .
    (53) mult_expression -> mult_expression . MULTIPLY unary_expression
    (54) mult_expression -> mult_expression . DIVIDE unary_expression
    (55) mult_expression -> mult_expression . MODULO unary_expression

    PLUS            reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    MINUS           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    L_OP            reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    G_OP            reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    LE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    GE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    EQUAL           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    ADD_ASSIGN      reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    SUB_ASSIGN      reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    NE_OP           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    SEMICOLON       reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    RIGHT_ROUND     reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    COMMA           reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    RIGHT_SQUARE    reduce using rule 57 (additive_expression -> additive_expression PLUS mult_expression .)
    MULTIPLY        shift and go to state 94
    DIVIDE          shift and go to state 96
    MODULO          shift and go to state 95


state 113

    (58) additive_expression -> additive_expression MINUS mult_expression .
    (53) mult_expression -> mult_expression . MULTIPLY unary_expression
    (54) mult_expression -> mult_expression . DIVIDE unary_expression
    (55) mult_expression -> mult_expression . MODULO unary_expression

    PLUS            reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    MINUS           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    L_OP            reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    G_OP            reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    LE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    GE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    EQUAL           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    ADD_ASSIGN      reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    SUB_ASSIGN      reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    NE_OP           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    SEMICOLON       reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    RIGHT_ROUND     reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    COMMA           reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    RIGHT_SQUARE    reduce using rule 58 (additive_expression -> additive_expression MINUS mult_expression .)
    MULTIPLY        shift and go to state 94
    DIVIDE          shift and go to state 96
    MODULO          shift and go to state 95


state 114

    (42) postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .

    LEFT_ROUND      reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LEFT_SQUARE     reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    PLUS            reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    EQUAL           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 42 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)


state 115

    (41) postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list . RIGHT_ROUND
    (45) argument_expression_list -> argument_expression_list . COMMA expression

    RIGHT_ROUND     shift and go to state 134
    COMMA           shift and go to state 135


state 116

    (44) argument_expression_list -> expression .

    RIGHT_ROUND     reduce using rule 44 (argument_expression_list -> expression .)
    COMMA           reduce using rule 44 (argument_expression_list -> expression .)


state 117

    (43) postfix_expression -> postfix_expression LEFT_SQUARE expression . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 136


state 118

    (38) relational_expression -> relational_expression LE_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS mult_expression
    (58) additive_expression -> additive_expression . MINUS mult_expression

    L_OP            reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    G_OP            reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    LE_OP           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    GE_OP           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    EQUAL           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    ADD_ASSIGN      reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    SUB_ASSIGN      reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    EQ_OP           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    NE_OP           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    SEMICOLON       reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    COMMA           reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 38 (relational_expression -> relational_expression LE_OP additive_expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 119

    (37) relational_expression -> relational_expression G_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS mult_expression
    (58) additive_expression -> additive_expression . MINUS mult_expression

    L_OP            reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    G_OP            reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    LE_OP           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    GE_OP           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    EQUAL           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    ADD_ASSIGN      reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    SUB_ASSIGN      reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    EQ_OP           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    NE_OP           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    SEMICOLON       reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    COMMA           reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 37 (relational_expression -> relational_expression G_OP additive_expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 120

    (36) relational_expression -> relational_expression L_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS mult_expression
    (58) additive_expression -> additive_expression . MINUS mult_expression

    L_OP            reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    G_OP            reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    LE_OP           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    GE_OP           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    EQUAL           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    ADD_ASSIGN      reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    SUB_ASSIGN      reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    EQ_OP           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    NE_OP           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    SEMICOLON       reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    COMMA           reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 36 (relational_expression -> relational_expression L_OP additive_expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 121

    (39) relational_expression -> relational_expression GE_OP additive_expression .
    (57) additive_expression -> additive_expression . PLUS mult_expression
    (58) additive_expression -> additive_expression . MINUS mult_expression

    L_OP            reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    G_OP            reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    LE_OP           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    GE_OP           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    EQUAL           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    ADD_ASSIGN      reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    SUB_ASSIGN      reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    EQ_OP           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    NE_OP           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    SEMICOLON       reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    COMMA           reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 39 (relational_expression -> relational_expression GE_OP additive_expression .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 122

    (77) iteration_statement -> FOR LEFT_ROUND expression_statement . expression_statement expression RIGHT_ROUND statement
    (27) expression_statement -> . expression SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 137
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    mult_expression                shift and go to state 60
    expression                     shift and go to state 71
    primary_expression             shift and go to state 62
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 123

    (53) mult_expression -> mult_expression MULTIPLY unary_expression .

    MULTIPLY        reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    DIVIDE          reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    MODULO          reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    PLUS            reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    MINUS           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    L_OP            reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    G_OP            reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    LE_OP           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    GE_OP           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    EQUAL           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    ADD_ASSIGN      reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    SUB_ASSIGN      reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    EQ_OP           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    NE_OP           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    SEMICOLON       reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    RIGHT_ROUND     reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    COMMA           reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)
    RIGHT_SQUARE    reduce using rule 53 (mult_expression -> mult_expression MULTIPLY unary_expression .)


state 124

    (55) mult_expression -> mult_expression MODULO unary_expression .

    MULTIPLY        reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    MODULO          reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    PLUS            reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    MINUS           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    L_OP            reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    G_OP            reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    LE_OP           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    GE_OP           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    EQUAL           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    ADD_ASSIGN      reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    SUB_ASSIGN      reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    EQ_OP           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    NE_OP           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    SEMICOLON       reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    RIGHT_ROUND     reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    COMMA           reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)
    RIGHT_SQUARE    reduce using rule 55 (mult_expression -> mult_expression MODULO unary_expression .)


state 125

    (54) mult_expression -> mult_expression DIVIDE unary_expression .

    MULTIPLY        reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    MODULO          reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    L_OP            reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    G_OP            reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    LE_OP           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    GE_OP           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    EQUAL           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    ADD_ASSIGN      reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    SUB_ASSIGN      reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    EQ_OP           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    NE_OP           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    RIGHT_ROUND     reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)
    RIGHT_SQUARE    reduce using rule 54 (mult_expression -> mult_expression DIVIDE unary_expression .)


state 126

    (31) expression -> equality_expression SUB_ASSIGN expression .

    SEMICOLON       reduce using rule 31 (expression -> equality_expression SUB_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 31 (expression -> equality_expression SUB_ASSIGN expression .)
    COMMA           reduce using rule 31 (expression -> equality_expression SUB_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 31 (expression -> equality_expression SUB_ASSIGN expression .)


state 127

    (29) expression -> equality_expression EQUAL expression .

    SEMICOLON       reduce using rule 29 (expression -> equality_expression EQUAL expression .)
    RIGHT_ROUND     reduce using rule 29 (expression -> equality_expression EQUAL expression .)
    COMMA           reduce using rule 29 (expression -> equality_expression EQUAL expression .)
    RIGHT_SQUARE    reduce using rule 29 (expression -> equality_expression EQUAL expression .)


state 128

    (34) equality_expression -> equality_expression NE_OP relational_expression .
    (36) relational_expression -> relational_expression . L_OP additive_expression
    (37) relational_expression -> relational_expression . G_OP additive_expression
    (38) relational_expression -> relational_expression . LE_OP additive_expression
    (39) relational_expression -> relational_expression . GE_OP additive_expression

    EQUAL           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    ADD_ASSIGN      reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    SUB_ASSIGN      reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    EQ_OP           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_ROUND     reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_SQUARE    reduce using rule 34 (equality_expression -> equality_expression NE_OP relational_expression .)
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    LE_OP           shift and go to state 89
    GE_OP           shift and go to state 92


state 129

    (33) equality_expression -> equality_expression EQ_OP relational_expression .
    (36) relational_expression -> relational_expression . L_OP additive_expression
    (37) relational_expression -> relational_expression . G_OP additive_expression
    (38) relational_expression -> relational_expression . LE_OP additive_expression
    (39) relational_expression -> relational_expression . GE_OP additive_expression

    EQUAL           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ADD_ASSIGN      reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SUB_ASSIGN      reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    EQ_OP           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_ROUND     reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_SQUARE    reduce using rule 33 (equality_expression -> equality_expression EQ_OP relational_expression .)
    L_OP            shift and go to state 91
    G_OP            shift and go to state 90
    LE_OP           shift and go to state 89
    GE_OP           shift and go to state 92


state 130

    (30) expression -> equality_expression ADD_ASSIGN expression .

    SEMICOLON       reduce using rule 30 (expression -> equality_expression ADD_ASSIGN expression .)
    RIGHT_ROUND     reduce using rule 30 (expression -> equality_expression ADD_ASSIGN expression .)
    COMMA           reduce using rule 30 (expression -> equality_expression ADD_ASSIGN expression .)
    RIGHT_SQUARE    reduce using rule 30 (expression -> equality_expression ADD_ASSIGN expression .)


state 131

    (78) selection_statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement
    (79) selection_statement -> IF LEFT_ROUND expression . RIGHT_ROUND statement ELSE statement

    RIGHT_ROUND     shift and go to state 138


state 132

    (64) primary_expression -> LEFT_ROUND expression RIGHT_ROUND .

    LEFT_ROUND      reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LEFT_SQUARE     reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PLUS            reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQUAL           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 64 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 133

    (76) iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND . statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    jump_statement                 shift and go to state 65
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54
    statement                      shift and go to state 139
    iteration_statement            shift and go to state 46
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62

state 134

    (41) postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .

    LEFT_ROUND      reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LEFT_SQUARE     reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MODULO          reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    PLUS            reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MINUS           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    L_OP            reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    G_OP            reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LE_OP           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    GE_OP           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    EQUAL           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    NE_OP           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    COMMA           reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 41 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)


state 135

    (45) argument_expression_list -> argument_expression_list COMMA . expression
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62
    mult_expression                shift and go to state 60
    expression                     shift and go to state 140
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 136

    (43) postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_ROUND      reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LEFT_SQUARE     reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 43 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)


state 137

    (77) iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement . expression RIGHT_ROUND statement
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    postfix_expression             shift and go to state 52
    equality_expression            shift and go to state 63
    mult_expression                shift and go to state 60
    expression                     shift and go to state 141
    primary_expression             shift and go to state 62
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54

state 138

    (78) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement
    (79) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND . statement ELSE statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    jump_statement                 shift and go to state 65
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54
    statement                      shift and go to state 142
    iteration_statement            shift and go to state 46
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62

state 139

    (76) iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_CURL       reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    EXCLAMATION     reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    MULTIPLY        reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    AMPERSAND       reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 76 (iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement .)


state 140

    (45) argument_expression_list -> argument_expression_list COMMA expression .

    RIGHT_ROUND     reduce using rule 45 (argument_expression_list -> argument_expression_list COMMA expression .)
    COMMA           reduce using rule 45 (argument_expression_list -> argument_expression_list COMMA expression .)


state 141

    (77) iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression . RIGHT_ROUND statement

    RIGHT_ROUND     shift and go to state 143


state 142

    (78) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .
    (79) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RIGHT_CURL      reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_CURL       reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IF              reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    FOR             reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    EXCLAMATION     reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    MULTIPLY        reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    AMPERSAND       reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    STRING          reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .)
    ELSE            shift and go to state 144

  ! ELSE            [ reduce using rule 78 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement .) ]


state 143

    (77) iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND . statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    jump_statement                 shift and go to state 65
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54
    statement                      shift and go to state 145
    iteration_statement            shift and go to state 46
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62

state 144

    (79) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE . statement
    (67) statement -> . compound_statement
    (68) statement -> . expression_statement
    (69) statement -> . selection_statement
    (70) statement -> . iteration_statement
    (71) statement -> . jump_statement
    (25) compound_statement -> . LEFT_CURL declaration_list_opt statement_list RIGHT_CURL
    (26) compound_statement -> . LEFT_CURL declaration_list_opt RIGHT_CURL
    (27) expression_statement -> . expression SEMICOLON
    (78) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement
    (79) selection_statement -> . IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
    (76) iteration_statement -> . WHILE LEFT_ROUND expression RIGHT_ROUND statement
    (77) iteration_statement -> . FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (28) expression -> . equality_expression
    (29) expression -> . equality_expression EQUAL expression
    (30) expression -> . equality_expression ADD_ASSIGN expression
    (31) expression -> . equality_expression SUB_ASSIGN expression
    (32) equality_expression -> . relational_expression
    (33) equality_expression -> . equality_expression EQ_OP relational_expression
    (34) equality_expression -> . equality_expression NE_OP relational_expression
    (35) relational_expression -> . additive_expression
    (36) relational_expression -> . relational_expression L_OP additive_expression
    (37) relational_expression -> . relational_expression G_OP additive_expression
    (38) relational_expression -> . relational_expression LE_OP additive_expression
    (39) relational_expression -> . relational_expression GE_OP additive_expression
    (56) additive_expression -> . mult_expression
    (57) additive_expression -> . additive_expression PLUS mult_expression
    (58) additive_expression -> . additive_expression MINUS mult_expression
    (52) mult_expression -> . unary_expression
    (53) mult_expression -> . mult_expression MULTIPLY unary_expression
    (54) mult_expression -> . mult_expression DIVIDE unary_expression
    (55) mult_expression -> . mult_expression MODULO unary_expression
    (46) unary_expression -> . postfix_expression
    (47) unary_expression -> . MINUS unary_expression
    (48) unary_expression -> . PLUS unary_expression
    (49) unary_expression -> . EXCLAMATION unary_expression
    (50) unary_expression -> . MULTIPLY unary_expression
    (51) unary_expression -> . AMPERSAND unary_expression
    (40) postfix_expression -> . primary_expression
    (41) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (42) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (43) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (59) primary_expression -> . IDENTIFIER
    (60) primary_expression -> . INT_NUM
    (61) primary_expression -> . REAL_NUM
    (62) primary_expression -> . CHARACTER
    (63) primary_expression -> . string_literal
    (64) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (65) string_literal -> . STRING
    (66) string_literal -> . string_literal STRING

    LEFT_CURL       shift and go to state 20
    IF              shift and go to state 64
    WHILE           shift and go to state 44
    FOR             shift and go to state 58
    RETURN          shift and go to state 41
    BREAK           shift and go to state 67
    CONTINUE        shift and go to state 69
    MINUS           shift and go to state 47
    PLUS            shift and go to state 53
    EXCLAMATION     shift and go to state 40
    MULTIPLY        shift and go to state 45
    AMPERSAND       shift and go to state 61
    IDENTIFIER      shift and go to state 57
    INT_NUM         shift and go to state 68
    REAL_NUM        shift and go to state 72
    CHARACTER       shift and go to state 59
    LEFT_ROUND      shift and go to state 66
    STRING          shift and go to state 56

    expression_statement           shift and go to state 39
    jump_statement                 shift and go to state 65
    string_literal                 shift and go to state 49
    unary_expression               shift and go to state 42
    compound_statement             shift and go to state 50
    expression                     shift and go to state 71
    selection_statement            shift and go to state 51
    postfix_expression             shift and go to state 52
    mult_expression                shift and go to state 60
    additive_expression            shift and go to state 48
    relational_expression          shift and go to state 54
    statement                      shift and go to state 146
    iteration_statement            shift and go to state 46
    equality_expression            shift and go to state 63
    primary_expression             shift and go to state 62

state 145

    (77) iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .

    RIGHT_CURL      reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_CURL       reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IF              reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    WHILE           reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    FOR             reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    RETURN          reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    BREAK           reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CONTINUE        reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MINUS           reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    PLUS            reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    EXCLAMATION     reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    MULTIPLY        reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    AMPERSAND       reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    IDENTIFIER      reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    INT_NUM         reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    REAL_NUM        reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    CHARACTER       reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    LEFT_ROUND      reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    STRING          reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)
    ELSE            reduce using rule 77 (iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement .)


state 146

    (79) selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .

    RIGHT_CURL      reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_CURL       reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IF              reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    WHILE           reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    FOR             reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    RETURN          reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    BREAK           reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CONTINUE        reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MINUS           reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    PLUS            reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    EXCLAMATION     reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    MULTIPLY        reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    AMPERSAND       reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    IDENTIFIER      reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    INT_NUM         reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    REAL_NUM        reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    CHARACTER       reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    LEFT_ROUND      reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    STRING          reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)
    ELSE            reduce using rule 79 (selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 142 resolved as shift
