Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    COMMENTS
    HEADER
    HASH

Grammar

Rule 0     S' -> primary_expression
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> HEX_NUM
Rule 3     primary_expression -> STRING
Rule 4     primary_expression -> LEFT_ROUND expression RIGHT_ROUND
Rule 5     primary_expression -> EXP_NUM
Rule 6     primary_expression -> REAL_NUM
Rule 7     primary_expression -> INT_NUM
Rule 8     primary_expression -> CHARACTER
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
Rule 11    postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND
Rule 12    postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
Rule 13    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 14    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 15    postfix_expression -> postfix_expression INC_OP
Rule 16    postfix_expression -> postfix_expression DEC_OP
Rule 17    argument_expression_list -> assignment_expression
Rule 18    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 19    unary_expression -> postfix_expression
Rule 20    unary_expression -> INC_OP unary_expression
Rule 21    unary_expression -> DEC_OP unary_expression
Rule 22    unary_expression -> unary_operator cast_expression
Rule 23    unary_expression -> SIZEOF unary_expression
Rule 24    unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND
Rule 25    unary_operator -> AMPERSAND
Rule 26    unary_operator -> MULTIPLY
Rule 27    unary_operator -> PLUS
Rule 28    unary_operator -> MINUS
Rule 29    unary_operator -> TILDA
Rule 30    unary_operator -> EXCLAMATION
Rule 31    cast_expression -> unary_expression
Rule 32    cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression
Rule 33    multiplicative_expression -> cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression MODULO cast_expression
Rule 37    additive_expression -> multiplicative_expression
Rule 38    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 39    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 40    shift_expression -> additive_expression
Rule 41    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 42    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 43    relational_expression -> shift_expression
Rule 44    relational_expression -> relational_expression L_OP shift_expression
Rule 45    relational_expression -> relational_expression G_OP shift_expression
Rule 46    relational_expression -> relational_expression LE_OP shift_expression
Rule 47    relational_expression -> relational_expression GE_OP shift_expression
Rule 48    equality_expression -> relational_expression
Rule 49    equality_expression -> equality_expression EQ_OP relational_expression
Rule 50    equality_expression -> equality_expression NE_OP relational_expression
Rule 51    and_expression -> equality_expression
Rule 52    and_expression -> and_expression AMPERSAND equality_expression
Rule 53    exclusive_or_expression -> and_expression
Rule 54    exclusive_or_expression -> exclusive_or_expression POWER and_expression
Rule 55    inclusive_or_expression -> exclusive_or_expression
Rule 56    inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression
Rule 57    logical_and_expression -> inclusive_or_expression
Rule 58    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 59    logical_or_expression -> logical_and_expression
Rule 60    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 61    conditional_expression -> logical_or_expression
Rule 62    conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
Rule 63    assignment_expression -> conditional_expression
Rule 64    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 65    assignment_operator -> EQUAL
Rule 66    assignment_operator -> MUL_ASSIGN
Rule 67    assignment_operator -> DIV_ASSIGN
Rule 68    assignment_operator -> MOD_ASSIGN
Rule 69    assignment_operator -> ADD_ASSIGN
Rule 70    assignment_operator -> SUB_ASSIGN
Rule 71    assignment_operator -> LEFT_ASSIGN
Rule 72    assignment_operator -> RIGHT_ASSIGN
Rule 73    assignment_operator -> AND_ASSIGN
Rule 74    assignment_operator -> XOR_ASSIGN
Rule 75    assignment_operator -> OR_ASSIGN
Rule 76    expression -> assignment_expression
Rule 77    expression -> expression COMMA assignment_expression
Rule 78    constant_expression -> conditional_expression
Rule 79    declaration -> declaration_specifiers SEMICOLON
Rule 80    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 81    declaration_specifiers -> storage_class_specifier
Rule 82    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 83    declaration_specifiers -> type_specifier
Rule 84    declaration_specifiers -> type_specifier declaration_specifiers
Rule 85    declaration_specifiers -> type_qualifier
Rule 86    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 87    init_declarator_list -> init_declarator
Rule 88    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 89    init_declarator -> declarator
Rule 90    init_declarator -> declarator EQUAL initializer
Rule 91    storage_class_specifier -> TYPEDEF
Rule 92    storage_class_specifier -> EXTERN
Rule 93    storage_class_specifier -> STATIC
Rule 94    storage_class_specifier -> AUTO
Rule 95    storage_class_specifier -> REGISTER
Rule 96    type_specifier -> VOID
Rule 97    type_specifier -> CHAR
Rule 98    type_specifier -> SHORT
Rule 99    type_specifier -> INT
Rule 100   type_specifier -> LONG
Rule 101   type_specifier -> FLOAT
Rule 102   type_specifier -> DOUBLE
Rule 103   type_specifier -> SIGNED
Rule 104   type_specifier -> UNSIGNED
Rule 105   type_specifier -> struct_or_union_specifier
Rule 106   type_specifier -> enum_specifier
Rule 107   struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
Rule 108   struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
Rule 109   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 110   struct_or_union -> STRUCT
Rule 111   struct_or_union -> UNION
Rule 112   struct_declaration_list -> struct_declaration
Rule 113   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 114   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 115   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 116   specifier_qualifier_list -> type_specifier
Rule 117   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 118   specifier_qualifier_list -> type_qualifier
Rule 119   struct_declarator_list -> struct_declarator
Rule 120   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 121   struct_declarator -> declarator
Rule 122   struct_declarator -> COLON constant_expression
Rule 123   struct_declarator -> declarator COLON constant_expression
Rule 124   enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL
Rule 125   enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
Rule 126   enum_specifier -> ENUM IDENTIFIER
Rule 127   enumerator_list -> enumerator
Rule 128   enumerator_list -> enumerator_list COMMA enumerator
Rule 129   enumerator -> IDENTIFIER
Rule 130   enumerator -> IDENTIFIER EQUAL constant_expression
Rule 131   type_qualifier -> CONST
Rule 132   type_qualifier -> VOLATILE
Rule 133   declarator -> pointer direct_declarator
Rule 134   declarator -> direct_declarator
Rule 135   direct_declarator -> IDENTIFIER
Rule 136   direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND
Rule 137   direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
Rule 138   direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE
Rule 139   direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
Rule 140   direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
Rule 141   direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND
Rule 142   pointer -> MULTIPLY
Rule 143   pointer -> MULTIPLY type_qualifier_list
Rule 144   pointer -> MULTIPLY pointer
Rule 145   pointer -> MULTIPLY type_qualifier_list pointer
Rule 146   type_qualifier_list -> type_qualifier
Rule 147   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 148   parameter_type_list -> parameter_list
Rule 149   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 150   parameter_list -> parameter_declaration
Rule 151   parameter_list -> parameter_list COMMA parameter_declaration
Rule 152   parameter_declaration -> declaration_specifiers declarator
Rule 153   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 154   parameter_declaration -> declaration_specifiers
Rule 155   identifier_list -> IDENTIFIER
Rule 156   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 157   type_name -> specifier_qualifier_list
Rule 158   type_name -> specifier_qualifier_list abstract_declarator
Rule 159   abstract_declarator -> pointer
Rule 160   abstract_declarator -> direct_abstract_declarator
Rule 161   abstract_declarator -> pointer direct_abstract_declarator
Rule 162   direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND
Rule 163   direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE
Rule 164   direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE
Rule 165   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
Rule 166   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
Rule 167   direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND
Rule 168   direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND
Rule 169   direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
Rule 170   direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
Rule 171   initializer -> assignment_expression
Rule 172   initializer -> LEFT_CURL initializer_list RIGHT_CURL
Rule 173   initializer -> LEFT_CURL initializer_list COMMA RIGHT_CURL
Rule 174   initializer_list -> initializer
Rule 175   initializer_list -> initializer_list COMMA initializer
Rule 176   statement -> labeled_statement
Rule 177   statement -> compound_statement
Rule 178   statement -> expression_statement
Rule 179   statement -> selection_statement
Rule 180   statement -> iteration_statement
Rule 181   statement -> jump_statement
Rule 182   labeled_statement -> IDENTIFIER COLON statement
Rule 183   labeled_statement -> CASE constant_expression COLON statement
Rule 184   labeled_statement -> DEFAULT COLON statement
Rule 185   compound_statement -> LEFT_CURL RIGHT_CURL
Rule 186   compound_statement -> LEFT_CURL statement_list RIGHT_CURL
Rule 187   compound_statement -> LEFT_CURL declaration_list RIGHT_CURL
Rule 188   compound_statement -> LEFT_CURL declaration_list statement_list RIGHT_CURL
Rule 189   declaration_list -> declaration
Rule 190   declaration_list -> declaration_list declaration
Rule 191   statement_list -> statement
Rule 192   statement_list -> statement_list statement
Rule 193   expression_statement -> SEMICOLON
Rule 194   expression_statement -> expression SEMICOLON
Rule 195   selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement
Rule 196   selection_statement -> IF LEFT_ROUND expression RIGHT_ROUND statement ELSE statement
Rule 197   selection_statement -> SWITCH LEFT_ROUND expression RIGHT_ROUND statement
Rule 198   iteration_statement -> WHILE LEFT_ROUND expression RIGHT_ROUND statement
Rule 199   iteration_statement -> DO statement WHILE LEFT_ROUND expression RIGHT_ROUND SEMICOLON
Rule 200   iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement RIGHT_ROUND statement
Rule 201   iteration_statement -> FOR LEFT_ROUND expression_statement expression_statement expression RIGHT_ROUND statement
Rule 202   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 203   jump_statement -> CONTINUE SEMICOLON
Rule 204   jump_statement -> BREAK SEMICOLON
Rule 205   jump_statement -> RETURN SEMICOLON
Rule 206   jump_statement -> RETURN expression SEMICOLON
Rule 207   translation_unit -> external_declaration
Rule 208   translation_unit -> translation_unit external_declaration
Rule 209   external_declaration -> function_definition
Rule 210   external_declaration -> declaration
Rule 211   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 212   function_definition -> declaration_specifiers declarator compound_statement
Rule 213   function_definition -> declarator declaration_list compound_statement
Rule 214   function_definition -> declarator compound_statement

Terminals, with rules where they appear

ADD_ASSIGN           : 69
AMPERSAND            : 25 52
AND_ASSIGN           : 73
AND_OP               : 58
AUTO                 : 94
BREAK                : 204
CASE                 : 183
CHAR                 : 97
CHARACTER            : 8
COLON                : 62 122 123 182 183 184
COMMA                : 18 77 88 120 128 149 151 156 173 175
COMMENT              : 
COMMENTS             : 
CONST                : 131
CONTINUE             : 203
DEC_OP               : 16 21
DEFAULT              : 184
DIVIDE               : 35
DIV_ASSIGN           : 67
DO                   : 199
DOT                  : 13
DOUBLE               : 102
ELLIPSIS             : 149
ELSE                 : 196
ENUM                 : 124 125 126
EQUAL                : 65 90 130
EQ_OP                : 49
EXCLAMATION          : 30
EXP_NUM              : 5
EXTERN               : 92
FLOAT                : 101
FOR                  : 200 201
GE_OP                : 47
GOTO                 : 202
G_OP                 : 45
HASH                 : 
HEADER               : 
HEX_NUM              : 2
IDENTIFIER           : 1 13 14 107 109 125 126 129 130 135 155 156 182 202
IF                   : 195 196
INC_OP               : 15 20
INT                  : 99
INT_NUM              : 7
LEFT_ASSIGN          : 71
LEFT_CURL            : 107 108 124 125 172 173 185 186 187 188
LEFT_OP              : 41
LEFT_ROUND           : 4 11 12 24 32 136 139 140 141 162 167 168 169 170 195 196 197 198 199 200 201
LEFT_SQUARE          : 10 137 138 163 164 165 166
LE_OP                : 46
LONG                 : 100
L_OP                 : 44
MINUS                : 28 39
MODULO               : 36
MOD_ASSIGN           : 68
MULTIPLY             : 26 34 142 143 144 145
MUL_ASSIGN           : 66
NE_OP                : 50
OR_ASSIGN            : 75
OR_OP                : 60
PIPE                 : 56
PLUS                 : 27 38
POWER                : 54
PTR_OP               : 14
QUESTION             : 62
REAL_NUM             : 6
REGISTER             : 95
RETURN               : 205 206
RIGHT_ASSIGN         : 72
RIGHT_CURL           : 107 108 124 125 172 173 185 186 187 188
RIGHT_OP             : 42
RIGHT_ROUND          : 4 11 12 24 32 136 139 140 141 162 167 168 169 170 195 196 197 198 199 200 201
RIGHT_SQUARE         : 10 137 138 163 164 165 166
SEMICOLON            : 79 80 114 193 194 199 202 203 204 205 206
SHORT                : 98
SIGNED               : 103
SIZEOF               : 23 24
STATIC               : 93
STRING               : 3
STRUCT               : 110
SUB_ASSIGN           : 70
SWITCH               : 197
TILDA                : 29
TYPEDEF              : 91
UNION                : 111
UNSIGNED             : 104
VOID                 : 96
VOLATILE             : 132
WHILE                : 198 199
XOR_ASSIGN           : 74
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 153 158 162
additive_expression  : 38 39 40 41 42
and_expression       : 52 53 54
argument_expression_list : 12 18
assignment_expression : 17 18 64 76 77 171
assignment_operator  : 64
cast_expression      : 22 32 33 34 35 36
compound_statement   : 177 211 212 213 214
conditional_expression : 62 63 78
constant_expression  : 122 123 130 137 164 166 183
declaration          : 189 190 210
declaration_list     : 187 188 190 211 213
declaration_specifiers : 79 80 82 84 86 152 153 154 211 212
declarator           : 89 90 121 123 136 152 211 212 213 214
direct_abstract_declarator : 160 161 165 166 169 170
direct_declarator    : 133 134 137 138 139 140 141
enum_specifier       : 106
enumerator           : 127 128
enumerator_list      : 124 125 128
equality_expression  : 49 50 51 52
exclusive_or_expression : 54 55 56
expression           : 4 10 62 77 194 195 196 197 198 199 201 206
expression_statement : 178 200 200 201 201
external_declaration : 207 208
function_definition  : 209
identifier_list      : 140 156
inclusive_or_expression : 56 57 58
init_declarator      : 87 88
init_declarator_list : 80 88
initializer          : 90 174 175
initializer_list     : 172 173 175
iteration_statement  : 180
jump_statement       : 181
labeled_statement    : 176
logical_and_expression : 58 59 60
logical_or_expression : 60 61 62
multiplicative_expression : 34 35 36 37 38 39
parameter_declaration : 150 151
parameter_list       : 148 149 151
parameter_type_list  : 139 168 170
pointer              : 133 144 145 159 161
postfix_expression   : 10 11 12 13 14 15 16 19
primary_expression   : 9 0
relational_expression : 44 45 46 47 48 49 50
selection_statement  : 179
shift_expression     : 41 42 43 44 45 46 47
specifier_qualifier_list : 114 115 117 157 158
statement            : 182 183 184 191 192 195 196 196 197 198 199 200 201
statement_list       : 186 188 192
storage_class_specifier : 81 82
struct_declaration   : 112 113
struct_declaration_list : 107 108 113
struct_declarator    : 119 120
struct_declarator_list : 114 120
struct_or_union      : 107 108 109
struct_or_union_specifier : 105
translation_unit     : 208
type_name            : 24 32
type_qualifier       : 85 86 117 118 146 147
type_qualifier_list  : 143 145 147
type_specifier       : 83 84 115 116
unary_expression     : 20 21 23 31 64
unary_operator       : 22

Parsing method: LALR

state 0

    (0) S' -> . primary_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 1
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    primary_expression             shift and go to state 5

state 1

    (4) primary_expression -> LEFT_ROUND . expression RIGHT_ROUND
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 25
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    expression                     shift and go to state 33
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 2

    (3) primary_expression -> STRING .

    LEFT_SQUARE     reduce using rule 3 (primary_expression -> STRING .)
    LEFT_ROUND      reduce using rule 3 (primary_expression -> STRING .)
    DOT             reduce using rule 3 (primary_expression -> STRING .)
    PTR_OP          reduce using rule 3 (primary_expression -> STRING .)
    INC_OP          reduce using rule 3 (primary_expression -> STRING .)
    DEC_OP          reduce using rule 3 (primary_expression -> STRING .)
    EQUAL           reduce using rule 3 (primary_expression -> STRING .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> STRING .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> STRING .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> STRING .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> STRING .)
    MULTIPLY        reduce using rule 3 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 3 (primary_expression -> STRING .)
    MODULO          reduce using rule 3 (primary_expression -> STRING .)
    PLUS            reduce using rule 3 (primary_expression -> STRING .)
    MINUS           reduce using rule 3 (primary_expression -> STRING .)
    LEFT_OP         reduce using rule 3 (primary_expression -> STRING .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> STRING .)
    L_OP            reduce using rule 3 (primary_expression -> STRING .)
    G_OP            reduce using rule 3 (primary_expression -> STRING .)
    LE_OP           reduce using rule 3 (primary_expression -> STRING .)
    GE_OP           reduce using rule 3 (primary_expression -> STRING .)
    EQ_OP           reduce using rule 3 (primary_expression -> STRING .)
    NE_OP           reduce using rule 3 (primary_expression -> STRING .)
    AMPERSAND       reduce using rule 3 (primary_expression -> STRING .)
    POWER           reduce using rule 3 (primary_expression -> STRING .)
    PIPE            reduce using rule 3 (primary_expression -> STRING .)
    AND_OP          reduce using rule 3 (primary_expression -> STRING .)
    QUESTION        reduce using rule 3 (primary_expression -> STRING .)
    OR_OP           reduce using rule 3 (primary_expression -> STRING .)
    RIGHT_SQUARE    reduce using rule 3 (primary_expression -> STRING .)
    COMMA           reduce using rule 3 (primary_expression -> STRING .)
    RIGHT_ROUND     reduce using rule 3 (primary_expression -> STRING .)
    COLON           reduce using rule 3 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 3 (primary_expression -> STRING .)
    RIGHT_CURL      reduce using rule 3 (primary_expression -> STRING .)
    $end            reduce using rule 3 (primary_expression -> STRING .)


state 3

    (8) primary_expression -> CHARACTER .

    LEFT_SQUARE     reduce using rule 8 (primary_expression -> CHARACTER .)
    LEFT_ROUND      reduce using rule 8 (primary_expression -> CHARACTER .)
    DOT             reduce using rule 8 (primary_expression -> CHARACTER .)
    PTR_OP          reduce using rule 8 (primary_expression -> CHARACTER .)
    INC_OP          reduce using rule 8 (primary_expression -> CHARACTER .)
    DEC_OP          reduce using rule 8 (primary_expression -> CHARACTER .)
    EQUAL           reduce using rule 8 (primary_expression -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 8 (primary_expression -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 8 (primary_expression -> CHARACTER .)
    AND_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 8 (primary_expression -> CHARACTER .)
    OR_ASSIGN       reduce using rule 8 (primary_expression -> CHARACTER .)
    MULTIPLY        reduce using rule 8 (primary_expression -> CHARACTER .)
    DIVIDE          reduce using rule 8 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 8 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 8 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 8 (primary_expression -> CHARACTER .)
    LEFT_OP         reduce using rule 8 (primary_expression -> CHARACTER .)
    RIGHT_OP        reduce using rule 8 (primary_expression -> CHARACTER .)
    L_OP            reduce using rule 8 (primary_expression -> CHARACTER .)
    G_OP            reduce using rule 8 (primary_expression -> CHARACTER .)
    LE_OP           reduce using rule 8 (primary_expression -> CHARACTER .)
    GE_OP           reduce using rule 8 (primary_expression -> CHARACTER .)
    EQ_OP           reduce using rule 8 (primary_expression -> CHARACTER .)
    NE_OP           reduce using rule 8 (primary_expression -> CHARACTER .)
    AMPERSAND       reduce using rule 8 (primary_expression -> CHARACTER .)
    POWER           reduce using rule 8 (primary_expression -> CHARACTER .)
    PIPE            reduce using rule 8 (primary_expression -> CHARACTER .)
    AND_OP          reduce using rule 8 (primary_expression -> CHARACTER .)
    QUESTION        reduce using rule 8 (primary_expression -> CHARACTER .)
    OR_OP           reduce using rule 8 (primary_expression -> CHARACTER .)
    RIGHT_SQUARE    reduce using rule 8 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 8 (primary_expression -> CHARACTER .)
    RIGHT_ROUND     reduce using rule 8 (primary_expression -> CHARACTER .)
    COLON           reduce using rule 8 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 8 (primary_expression -> CHARACTER .)
    RIGHT_CURL      reduce using rule 8 (primary_expression -> CHARACTER .)
    $end            reduce using rule 8 (primary_expression -> CHARACTER .)


state 4

    (7) primary_expression -> INT_NUM .

    LEFT_SQUARE     reduce using rule 7 (primary_expression -> INT_NUM .)
    LEFT_ROUND      reduce using rule 7 (primary_expression -> INT_NUM .)
    DOT             reduce using rule 7 (primary_expression -> INT_NUM .)
    PTR_OP          reduce using rule 7 (primary_expression -> INT_NUM .)
    INC_OP          reduce using rule 7 (primary_expression -> INT_NUM .)
    DEC_OP          reduce using rule 7 (primary_expression -> INT_NUM .)
    EQUAL           reduce using rule 7 (primary_expression -> INT_NUM .)
    MUL_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    DIV_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    MOD_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    ADD_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    SUB_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    LEFT_ASSIGN     reduce using rule 7 (primary_expression -> INT_NUM .)
    RIGHT_ASSIGN    reduce using rule 7 (primary_expression -> INT_NUM .)
    AND_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    XOR_ASSIGN      reduce using rule 7 (primary_expression -> INT_NUM .)
    OR_ASSIGN       reduce using rule 7 (primary_expression -> INT_NUM .)
    MULTIPLY        reduce using rule 7 (primary_expression -> INT_NUM .)
    DIVIDE          reduce using rule 7 (primary_expression -> INT_NUM .)
    MODULO          reduce using rule 7 (primary_expression -> INT_NUM .)
    PLUS            reduce using rule 7 (primary_expression -> INT_NUM .)
    MINUS           reduce using rule 7 (primary_expression -> INT_NUM .)
    LEFT_OP         reduce using rule 7 (primary_expression -> INT_NUM .)
    RIGHT_OP        reduce using rule 7 (primary_expression -> INT_NUM .)
    L_OP            reduce using rule 7 (primary_expression -> INT_NUM .)
    G_OP            reduce using rule 7 (primary_expression -> INT_NUM .)
    LE_OP           reduce using rule 7 (primary_expression -> INT_NUM .)
    GE_OP           reduce using rule 7 (primary_expression -> INT_NUM .)
    EQ_OP           reduce using rule 7 (primary_expression -> INT_NUM .)
    NE_OP           reduce using rule 7 (primary_expression -> INT_NUM .)
    AMPERSAND       reduce using rule 7 (primary_expression -> INT_NUM .)
    POWER           reduce using rule 7 (primary_expression -> INT_NUM .)
    PIPE            reduce using rule 7 (primary_expression -> INT_NUM .)
    AND_OP          reduce using rule 7 (primary_expression -> INT_NUM .)
    QUESTION        reduce using rule 7 (primary_expression -> INT_NUM .)
    OR_OP           reduce using rule 7 (primary_expression -> INT_NUM .)
    RIGHT_SQUARE    reduce using rule 7 (primary_expression -> INT_NUM .)
    COMMA           reduce using rule 7 (primary_expression -> INT_NUM .)
    RIGHT_ROUND     reduce using rule 7 (primary_expression -> INT_NUM .)
    COLON           reduce using rule 7 (primary_expression -> INT_NUM .)
    SEMICOLON       reduce using rule 7 (primary_expression -> INT_NUM .)
    RIGHT_CURL      reduce using rule 7 (primary_expression -> INT_NUM .)
    $end            reduce using rule 7 (primary_expression -> INT_NUM .)


state 5

    (0) S' -> primary_expression .



state 6

    (5) primary_expression -> EXP_NUM .

    LEFT_SQUARE     reduce using rule 5 (primary_expression -> EXP_NUM .)
    LEFT_ROUND      reduce using rule 5 (primary_expression -> EXP_NUM .)
    DOT             reduce using rule 5 (primary_expression -> EXP_NUM .)
    PTR_OP          reduce using rule 5 (primary_expression -> EXP_NUM .)
    INC_OP          reduce using rule 5 (primary_expression -> EXP_NUM .)
    DEC_OP          reduce using rule 5 (primary_expression -> EXP_NUM .)
    EQUAL           reduce using rule 5 (primary_expression -> EXP_NUM .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> EXP_NUM .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> EXP_NUM .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> EXP_NUM .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> EXP_NUM .)
    MULTIPLY        reduce using rule 5 (primary_expression -> EXP_NUM .)
    DIVIDE          reduce using rule 5 (primary_expression -> EXP_NUM .)
    MODULO          reduce using rule 5 (primary_expression -> EXP_NUM .)
    PLUS            reduce using rule 5 (primary_expression -> EXP_NUM .)
    MINUS           reduce using rule 5 (primary_expression -> EXP_NUM .)
    LEFT_OP         reduce using rule 5 (primary_expression -> EXP_NUM .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> EXP_NUM .)
    L_OP            reduce using rule 5 (primary_expression -> EXP_NUM .)
    G_OP            reduce using rule 5 (primary_expression -> EXP_NUM .)
    LE_OP           reduce using rule 5 (primary_expression -> EXP_NUM .)
    GE_OP           reduce using rule 5 (primary_expression -> EXP_NUM .)
    EQ_OP           reduce using rule 5 (primary_expression -> EXP_NUM .)
    NE_OP           reduce using rule 5 (primary_expression -> EXP_NUM .)
    AMPERSAND       reduce using rule 5 (primary_expression -> EXP_NUM .)
    POWER           reduce using rule 5 (primary_expression -> EXP_NUM .)
    PIPE            reduce using rule 5 (primary_expression -> EXP_NUM .)
    AND_OP          reduce using rule 5 (primary_expression -> EXP_NUM .)
    QUESTION        reduce using rule 5 (primary_expression -> EXP_NUM .)
    OR_OP           reduce using rule 5 (primary_expression -> EXP_NUM .)
    RIGHT_SQUARE    reduce using rule 5 (primary_expression -> EXP_NUM .)
    COMMA           reduce using rule 5 (primary_expression -> EXP_NUM .)
    RIGHT_ROUND     reduce using rule 5 (primary_expression -> EXP_NUM .)
    COLON           reduce using rule 5 (primary_expression -> EXP_NUM .)
    SEMICOLON       reduce using rule 5 (primary_expression -> EXP_NUM .)
    RIGHT_CURL      reduce using rule 5 (primary_expression -> EXP_NUM .)
    $end            reduce using rule 5 (primary_expression -> EXP_NUM .)


state 7

    (1) primary_expression -> IDENTIFIER .

    LEFT_SQUARE     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ROUND      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    L_OP            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    G_OP            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AMPERSAND       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    POWER           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PIPE            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    QUESTION        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_CURL      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    $end            reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 8

    (2) primary_expression -> HEX_NUM .

    LEFT_SQUARE     reduce using rule 2 (primary_expression -> HEX_NUM .)
    LEFT_ROUND      reduce using rule 2 (primary_expression -> HEX_NUM .)
    DOT             reduce using rule 2 (primary_expression -> HEX_NUM .)
    PTR_OP          reduce using rule 2 (primary_expression -> HEX_NUM .)
    INC_OP          reduce using rule 2 (primary_expression -> HEX_NUM .)
    DEC_OP          reduce using rule 2 (primary_expression -> HEX_NUM .)
    EQUAL           reduce using rule 2 (primary_expression -> HEX_NUM .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> HEX_NUM .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> HEX_NUM .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> HEX_NUM .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> HEX_NUM .)
    MULTIPLY        reduce using rule 2 (primary_expression -> HEX_NUM .)
    DIVIDE          reduce using rule 2 (primary_expression -> HEX_NUM .)
    MODULO          reduce using rule 2 (primary_expression -> HEX_NUM .)
    PLUS            reduce using rule 2 (primary_expression -> HEX_NUM .)
    MINUS           reduce using rule 2 (primary_expression -> HEX_NUM .)
    LEFT_OP         reduce using rule 2 (primary_expression -> HEX_NUM .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> HEX_NUM .)
    L_OP            reduce using rule 2 (primary_expression -> HEX_NUM .)
    G_OP            reduce using rule 2 (primary_expression -> HEX_NUM .)
    LE_OP           reduce using rule 2 (primary_expression -> HEX_NUM .)
    GE_OP           reduce using rule 2 (primary_expression -> HEX_NUM .)
    EQ_OP           reduce using rule 2 (primary_expression -> HEX_NUM .)
    NE_OP           reduce using rule 2 (primary_expression -> HEX_NUM .)
    AMPERSAND       reduce using rule 2 (primary_expression -> HEX_NUM .)
    POWER           reduce using rule 2 (primary_expression -> HEX_NUM .)
    PIPE            reduce using rule 2 (primary_expression -> HEX_NUM .)
    AND_OP          reduce using rule 2 (primary_expression -> HEX_NUM .)
    QUESTION        reduce using rule 2 (primary_expression -> HEX_NUM .)
    OR_OP           reduce using rule 2 (primary_expression -> HEX_NUM .)
    RIGHT_SQUARE    reduce using rule 2 (primary_expression -> HEX_NUM .)
    COMMA           reduce using rule 2 (primary_expression -> HEX_NUM .)
    RIGHT_ROUND     reduce using rule 2 (primary_expression -> HEX_NUM .)
    COLON           reduce using rule 2 (primary_expression -> HEX_NUM .)
    SEMICOLON       reduce using rule 2 (primary_expression -> HEX_NUM .)
    RIGHT_CURL      reduce using rule 2 (primary_expression -> HEX_NUM .)
    $end            reduce using rule 2 (primary_expression -> HEX_NUM .)


state 9

    (6) primary_expression -> REAL_NUM .

    LEFT_SQUARE     reduce using rule 6 (primary_expression -> REAL_NUM .)
    LEFT_ROUND      reduce using rule 6 (primary_expression -> REAL_NUM .)
    DOT             reduce using rule 6 (primary_expression -> REAL_NUM .)
    PTR_OP          reduce using rule 6 (primary_expression -> REAL_NUM .)
    INC_OP          reduce using rule 6 (primary_expression -> REAL_NUM .)
    DEC_OP          reduce using rule 6 (primary_expression -> REAL_NUM .)
    EQUAL           reduce using rule 6 (primary_expression -> REAL_NUM .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> REAL_NUM .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> REAL_NUM .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> REAL_NUM .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> REAL_NUM .)
    MULTIPLY        reduce using rule 6 (primary_expression -> REAL_NUM .)
    DIVIDE          reduce using rule 6 (primary_expression -> REAL_NUM .)
    MODULO          reduce using rule 6 (primary_expression -> REAL_NUM .)
    PLUS            reduce using rule 6 (primary_expression -> REAL_NUM .)
    MINUS           reduce using rule 6 (primary_expression -> REAL_NUM .)
    LEFT_OP         reduce using rule 6 (primary_expression -> REAL_NUM .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> REAL_NUM .)
    L_OP            reduce using rule 6 (primary_expression -> REAL_NUM .)
    G_OP            reduce using rule 6 (primary_expression -> REAL_NUM .)
    LE_OP           reduce using rule 6 (primary_expression -> REAL_NUM .)
    GE_OP           reduce using rule 6 (primary_expression -> REAL_NUM .)
    EQ_OP           reduce using rule 6 (primary_expression -> REAL_NUM .)
    NE_OP           reduce using rule 6 (primary_expression -> REAL_NUM .)
    AMPERSAND       reduce using rule 6 (primary_expression -> REAL_NUM .)
    POWER           reduce using rule 6 (primary_expression -> REAL_NUM .)
    PIPE            reduce using rule 6 (primary_expression -> REAL_NUM .)
    AND_OP          reduce using rule 6 (primary_expression -> REAL_NUM .)
    QUESTION        reduce using rule 6 (primary_expression -> REAL_NUM .)
    OR_OP           reduce using rule 6 (primary_expression -> REAL_NUM .)
    RIGHT_SQUARE    reduce using rule 6 (primary_expression -> REAL_NUM .)
    COMMA           reduce using rule 6 (primary_expression -> REAL_NUM .)
    RIGHT_ROUND     reduce using rule 6 (primary_expression -> REAL_NUM .)
    COLON           reduce using rule 6 (primary_expression -> REAL_NUM .)
    SEMICOLON       reduce using rule 6 (primary_expression -> REAL_NUM .)
    RIGHT_CURL      reduce using rule 6 (primary_expression -> REAL_NUM .)
    $end            reduce using rule 6 (primary_expression -> REAL_NUM .)


state 10

    (30) unary_operator -> EXCLAMATION .

    LEFT_ROUND      reduce using rule 30 (unary_operator -> EXCLAMATION .)
    INC_OP          reduce using rule 30 (unary_operator -> EXCLAMATION .)
    DEC_OP          reduce using rule 30 (unary_operator -> EXCLAMATION .)
    SIZEOF          reduce using rule 30 (unary_operator -> EXCLAMATION .)
    AMPERSAND       reduce using rule 30 (unary_operator -> EXCLAMATION .)
    MULTIPLY        reduce using rule 30 (unary_operator -> EXCLAMATION .)
    PLUS            reduce using rule 30 (unary_operator -> EXCLAMATION .)
    MINUS           reduce using rule 30 (unary_operator -> EXCLAMATION .)
    TILDA           reduce using rule 30 (unary_operator -> EXCLAMATION .)
    EXCLAMATION     reduce using rule 30 (unary_operator -> EXCLAMATION .)
    IDENTIFIER      reduce using rule 30 (unary_operator -> EXCLAMATION .)
    HEX_NUM         reduce using rule 30 (unary_operator -> EXCLAMATION .)
    STRING          reduce using rule 30 (unary_operator -> EXCLAMATION .)
    EXP_NUM         reduce using rule 30 (unary_operator -> EXCLAMATION .)
    REAL_NUM        reduce using rule 30 (unary_operator -> EXCLAMATION .)
    INT_NUM         reduce using rule 30 (unary_operator -> EXCLAMATION .)
    CHARACTER       reduce using rule 30 (unary_operator -> EXCLAMATION .)


state 11

    (64) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (31) cast_expression -> unary_expression .
    (65) assignment_operator -> . EQUAL
    (66) assignment_operator -> . MUL_ASSIGN
    (67) assignment_operator -> . DIV_ASSIGN
    (68) assignment_operator -> . MOD_ASSIGN
    (69) assignment_operator -> . ADD_ASSIGN
    (70) assignment_operator -> . SUB_ASSIGN
    (71) assignment_operator -> . LEFT_ASSIGN
    (72) assignment_operator -> . RIGHT_ASSIGN
    (73) assignment_operator -> . AND_ASSIGN
    (74) assignment_operator -> . XOR_ASSIGN
    (75) assignment_operator -> . OR_ASSIGN

    MULTIPLY        reduce using rule 31 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 31 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    L_OP            reduce using rule 31 (cast_expression -> unary_expression .)
    G_OP            reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    AMPERSAND       reduce using rule 31 (cast_expression -> unary_expression .)
    POWER           reduce using rule 31 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 31 (cast_expression -> unary_expression .)
    COLON           reduce using rule 31 (cast_expression -> unary_expression .)
    EQUAL           shift and go to state 42
    MUL_ASSIGN      shift and go to state 44
    DIV_ASSIGN      shift and go to state 45
    MOD_ASSIGN      shift and go to state 39
    ADD_ASSIGN      shift and go to state 47
    SUB_ASSIGN      shift and go to state 38
    LEFT_ASSIGN     shift and go to state 46
    RIGHT_ASSIGN    shift and go to state 48
    AND_ASSIGN      shift and go to state 43
    XOR_ASSIGN      shift and go to state 40
    OR_ASSIGN       shift and go to state 41

    assignment_operator            shift and go to state 49

state 12

    (21) unary_expression -> DEC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 1
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 50
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23

state 13

    (55) inclusive_or_expression -> exclusive_or_expression .
    (54) exclusive_or_expression -> exclusive_or_expression . POWER and_expression

    PIPE            reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    QUESTION        reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_ROUND     reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_SQUARE    reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    RIGHT_CURL      reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    POWER           shift and go to state 51


state 14

    (26) unary_operator -> MULTIPLY .

    LEFT_ROUND      reduce using rule 26 (unary_operator -> MULTIPLY .)
    INC_OP          reduce using rule 26 (unary_operator -> MULTIPLY .)
    DEC_OP          reduce using rule 26 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 26 (unary_operator -> MULTIPLY .)
    AMPERSAND       reduce using rule 26 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 26 (unary_operator -> MULTIPLY .)
    PLUS            reduce using rule 26 (unary_operator -> MULTIPLY .)
    MINUS           reduce using rule 26 (unary_operator -> MULTIPLY .)
    TILDA           reduce using rule 26 (unary_operator -> MULTIPLY .)
    EXCLAMATION     reduce using rule 26 (unary_operator -> MULTIPLY .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> MULTIPLY .)
    HEX_NUM         reduce using rule 26 (unary_operator -> MULTIPLY .)
    STRING          reduce using rule 26 (unary_operator -> MULTIPLY .)
    EXP_NUM         reduce using rule 26 (unary_operator -> MULTIPLY .)
    REAL_NUM        reduce using rule 26 (unary_operator -> MULTIPLY .)
    INT_NUM         reduce using rule 26 (unary_operator -> MULTIPLY .)
    CHARACTER       reduce using rule 26 (unary_operator -> MULTIPLY .)


state 15

    (23) unary_expression -> SIZEOF . unary_expression
    (24) unary_expression -> SIZEOF . LEFT_ROUND type_name RIGHT_ROUND
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 53
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23

state 16

    (28) unary_operator -> MINUS .

    LEFT_ROUND      reduce using rule 28 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 28 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 28 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 28 (unary_operator -> MINUS .)
    AMPERSAND       reduce using rule 28 (unary_operator -> MINUS .)
    MULTIPLY        reduce using rule 28 (unary_operator -> MINUS .)
    PLUS            reduce using rule 28 (unary_operator -> MINUS .)
    MINUS           reduce using rule 28 (unary_operator -> MINUS .)
    TILDA           reduce using rule 28 (unary_operator -> MINUS .)
    EXCLAMATION     reduce using rule 28 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> MINUS .)
    HEX_NUM         reduce using rule 28 (unary_operator -> MINUS .)
    STRING          reduce using rule 28 (unary_operator -> MINUS .)
    EXP_NUM         reduce using rule 28 (unary_operator -> MINUS .)
    REAL_NUM        reduce using rule 28 (unary_operator -> MINUS .)
    INT_NUM         reduce using rule 28 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 28 (unary_operator -> MINUS .)


state 17

    (19) unary_expression -> postfix_expression .
    (10) postfix_expression -> postfix_expression . LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> postfix_expression . LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> postfix_expression . LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (14) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (15) postfix_expression -> postfix_expression . INC_OP
    (16) postfix_expression -> postfix_expression . DEC_OP

    MULTIPLY        reduce using rule 19 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 19 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 19 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 19 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> postfix_expression .)
    L_OP            reduce using rule 19 (unary_expression -> postfix_expression .)
    G_OP            reduce using rule 19 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    AMPERSAND       reduce using rule 19 (unary_expression -> postfix_expression .)
    POWER           reduce using rule 19 (unary_expression -> postfix_expression .)
    PIPE            reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> postfix_expression .)
    QUESTION        reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_SQUARE    reduce using rule 19 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 19 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_ROUND     reduce using rule 19 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 19 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 19 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_CURL      reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_SQUARE     shift and go to state 55
    LEFT_ROUND      shift and go to state 54
    DOT             shift and go to state 59
    PTR_OP          shift and go to state 57
    INC_OP          shift and go to state 56
    DEC_OP          shift and go to state 58


state 18

    (27) unary_operator -> PLUS .

    LEFT_ROUND      reduce using rule 27 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 27 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 27 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 27 (unary_operator -> PLUS .)
    AMPERSAND       reduce using rule 27 (unary_operator -> PLUS .)
    MULTIPLY        reduce using rule 27 (unary_operator -> PLUS .)
    PLUS            reduce using rule 27 (unary_operator -> PLUS .)
    MINUS           reduce using rule 27 (unary_operator -> PLUS .)
    TILDA           reduce using rule 27 (unary_operator -> PLUS .)
    EXCLAMATION     reduce using rule 27 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> PLUS .)
    HEX_NUM         reduce using rule 27 (unary_operator -> PLUS .)
    STRING          reduce using rule 27 (unary_operator -> PLUS .)
    EXP_NUM         reduce using rule 27 (unary_operator -> PLUS .)
    REAL_NUM        reduce using rule 27 (unary_operator -> PLUS .)
    INT_NUM         reduce using rule 27 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 27 (unary_operator -> PLUS .)


state 19

    (29) unary_operator -> TILDA .

    LEFT_ROUND      reduce using rule 29 (unary_operator -> TILDA .)
    INC_OP          reduce using rule 29 (unary_operator -> TILDA .)
    DEC_OP          reduce using rule 29 (unary_operator -> TILDA .)
    SIZEOF          reduce using rule 29 (unary_operator -> TILDA .)
    AMPERSAND       reduce using rule 29 (unary_operator -> TILDA .)
    MULTIPLY        reduce using rule 29 (unary_operator -> TILDA .)
    PLUS            reduce using rule 29 (unary_operator -> TILDA .)
    MINUS           reduce using rule 29 (unary_operator -> TILDA .)
    TILDA           reduce using rule 29 (unary_operator -> TILDA .)
    EXCLAMATION     reduce using rule 29 (unary_operator -> TILDA .)
    IDENTIFIER      reduce using rule 29 (unary_operator -> TILDA .)
    HEX_NUM         reduce using rule 29 (unary_operator -> TILDA .)
    STRING          reduce using rule 29 (unary_operator -> TILDA .)
    EXP_NUM         reduce using rule 29 (unary_operator -> TILDA .)
    REAL_NUM        reduce using rule 29 (unary_operator -> TILDA .)
    INT_NUM         reduce using rule 29 (unary_operator -> TILDA .)
    CHARACTER       reduce using rule 29 (unary_operator -> TILDA .)


state 20

    (53) exclusive_or_expression -> and_expression .
    (52) and_expression -> and_expression . AMPERSAND equality_expression

    POWER           reduce using rule 53 (exclusive_or_expression -> and_expression .)
    PIPE            reduce using rule 53 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 53 (exclusive_or_expression -> and_expression .)
    QUESTION        reduce using rule 53 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 53 (exclusive_or_expression -> and_expression .)
    RIGHT_SQUARE    reduce using rule 53 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 53 (exclusive_or_expression -> and_expression .)
    RIGHT_CURL      reduce using rule 53 (exclusive_or_expression -> and_expression .)
    RIGHT_ROUND     reduce using rule 53 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 53 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 53 (exclusive_or_expression -> and_expression .)
    AMPERSAND       shift and go to state 60


state 21

    (33) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 33 (multiplicative_expression -> cast_expression .)
    MODULO          reduce using rule 33 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    L_OP            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    G_OP            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    AMPERSAND       reduce using rule 33 (multiplicative_expression -> cast_expression .)
    POWER           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    PIPE            reduce using rule 33 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 33 (multiplicative_expression -> cast_expression .)
    QUESTION        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_ROUND     reduce using rule 33 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_SQUARE    reduce using rule 33 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_CURL      reduce using rule 33 (multiplicative_expression -> cast_expression .)


state 22

    (61) conditional_expression -> logical_or_expression .
    (62) conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression
    (60) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    RIGHT_ROUND     reduce using rule 61 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 61 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 61 (conditional_expression -> logical_or_expression .)
    RIGHT_CURL      reduce using rule 61 (conditional_expression -> logical_or_expression .)
    RIGHT_SQUARE    reduce using rule 61 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 61 (conditional_expression -> logical_or_expression .)
    QUESTION        shift and go to state 61
    OR_OP           shift and go to state 62


state 23

    (22) unary_expression -> unary_operator . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    cast_expression                shift and go to state 64
    unary_operator                 shift and go to state 23

state 24

    (48) equality_expression -> relational_expression .
    (44) relational_expression -> relational_expression . L_OP shift_expression
    (45) relational_expression -> relational_expression . G_OP shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    AMPERSAND       reduce using rule 48 (equality_expression -> relational_expression .)
    POWER           reduce using rule 48 (equality_expression -> relational_expression .)
    PIPE            reduce using rule 48 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 48 (equality_expression -> relational_expression .)
    QUESTION        reduce using rule 48 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    RIGHT_ROUND     reduce using rule 48 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 48 (equality_expression -> relational_expression .)
    RIGHT_SQUARE    reduce using rule 48 (equality_expression -> relational_expression .)
    COLON           reduce using rule 48 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 48 (equality_expression -> relational_expression .)
    RIGHT_CURL      reduce using rule 48 (equality_expression -> relational_expression .)
    L_OP            shift and go to state 68
    G_OP            shift and go to state 67
    LE_OP           shift and go to state 66
    GE_OP           shift and go to state 69


state 25

    (76) expression -> assignment_expression .

    COLON           reduce using rule 76 (expression -> assignment_expression .)
    COMMA           reduce using rule 76 (expression -> assignment_expression .)
    RIGHT_ROUND     reduce using rule 76 (expression -> assignment_expression .)
    RIGHT_SQUARE    reduce using rule 76 (expression -> assignment_expression .)


state 26

    (37) additive_expression -> multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (35) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (36) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 37 (additive_expression -> multiplicative_expression .)
    L_OP            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    G_OP            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    AMPERSAND       reduce using rule 37 (additive_expression -> multiplicative_expression .)
    POWER           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    PIPE            reduce using rule 37 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 37 (additive_expression -> multiplicative_expression .)
    QUESTION        reduce using rule 37 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_ROUND     reduce using rule 37 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_SQUARE    reduce using rule 37 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_CURL      reduce using rule 37 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 70
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 71


state 27

    (40) shift_expression -> additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 40 (shift_expression -> additive_expression .)
    L_OP            reduce using rule 40 (shift_expression -> additive_expression .)
    G_OP            reduce using rule 40 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    AMPERSAND       reduce using rule 40 (shift_expression -> additive_expression .)
    POWER           reduce using rule 40 (shift_expression -> additive_expression .)
    PIPE            reduce using rule 40 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 40 (shift_expression -> additive_expression .)
    QUESTION        reduce using rule 40 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_ROUND     reduce using rule 40 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_SQUARE    reduce using rule 40 (shift_expression -> additive_expression .)
    COLON           reduce using rule 40 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_CURL      reduce using rule 40 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 28

    (25) unary_operator -> AMPERSAND .

    LEFT_ROUND      reduce using rule 25 (unary_operator -> AMPERSAND .)
    INC_OP          reduce using rule 25 (unary_operator -> AMPERSAND .)
    DEC_OP          reduce using rule 25 (unary_operator -> AMPERSAND .)
    SIZEOF          reduce using rule 25 (unary_operator -> AMPERSAND .)
    AMPERSAND       reduce using rule 25 (unary_operator -> AMPERSAND .)
    MULTIPLY        reduce using rule 25 (unary_operator -> AMPERSAND .)
    PLUS            reduce using rule 25 (unary_operator -> AMPERSAND .)
    MINUS           reduce using rule 25 (unary_operator -> AMPERSAND .)
    TILDA           reduce using rule 25 (unary_operator -> AMPERSAND .)
    EXCLAMATION     reduce using rule 25 (unary_operator -> AMPERSAND .)
    IDENTIFIER      reduce using rule 25 (unary_operator -> AMPERSAND .)
    HEX_NUM         reduce using rule 25 (unary_operator -> AMPERSAND .)
    STRING          reduce using rule 25 (unary_operator -> AMPERSAND .)
    EXP_NUM         reduce using rule 25 (unary_operator -> AMPERSAND .)
    REAL_NUM        reduce using rule 25 (unary_operator -> AMPERSAND .)
    INT_NUM         reduce using rule 25 (unary_operator -> AMPERSAND .)
    CHARACTER       reduce using rule 25 (unary_operator -> AMPERSAND .)


state 29

    (9) postfix_expression -> primary_expression .

    LEFT_SQUARE     reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_ROUND      reduce using rule 9 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 9 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    EQUAL           reduce using rule 9 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 9 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 9 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 9 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 9 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> primary_expression .)
    L_OP            reduce using rule 9 (postfix_expression -> primary_expression .)
    G_OP            reduce using rule 9 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    AMPERSAND       reduce using rule 9 (postfix_expression -> primary_expression .)
    POWER           reduce using rule 9 (postfix_expression -> primary_expression .)
    PIPE            reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    QUESTION        reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_ROUND     reduce using rule 9 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_SQUARE    reduce using rule 9 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 9 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_CURL      reduce using rule 9 (postfix_expression -> primary_expression .)


state 30

    (59) logical_or_expression -> logical_and_expression .
    (58) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUESTION        reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    RIGHT_SQUARE    reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    RIGHT_CURL      reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    RIGHT_ROUND     reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 75


state 31

    (51) and_expression -> equality_expression .
    (49) equality_expression -> equality_expression . EQ_OP relational_expression
    (50) equality_expression -> equality_expression . NE_OP relational_expression

    AMPERSAND       reduce using rule 51 (and_expression -> equality_expression .)
    POWER           reduce using rule 51 (and_expression -> equality_expression .)
    PIPE            reduce using rule 51 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 51 (and_expression -> equality_expression .)
    QUESTION        reduce using rule 51 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 51 (and_expression -> equality_expression .)
    RIGHT_ROUND     reduce using rule 51 (and_expression -> equality_expression .)
    COMMA           reduce using rule 51 (and_expression -> equality_expression .)
    RIGHT_SQUARE    reduce using rule 51 (and_expression -> equality_expression .)
    COLON           reduce using rule 51 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 51 (and_expression -> equality_expression .)
    RIGHT_CURL      reduce using rule 51 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 77
    NE_OP           shift and go to state 76


state 32

    (4) primary_expression -> LEFT_ROUND . expression RIGHT_ROUND
    (32) cast_expression -> LEFT_ROUND . type_name RIGHT_ROUND cast_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (157) type_name -> . specifier_qualifier_list
    (158) type_name -> . specifier_qualifier_list abstract_declarator
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    ENUM            shift and go to state 90
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    unary_expression               shift and go to state 11
    struct_or_union_specifier      shift and go to state 80
    exclusive_or_expression        shift and go to state 13
    and_expression                 shift and go to state 20
    type_specifier                 shift and go to state 84
    inclusive_or_expression        shift and go to state 34
    type_name                      shift and go to state 85
    postfix_expression             shift and go to state 17
    relational_expression          shift and go to state 24
    cast_expression                shift and go to state 21
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    struct_or_union                shift and go to state 87
    assignment_expression          shift and go to state 25
    multiplicative_expression      shift and go to state 26
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29
    logical_and_expression         shift and go to state 30
    shift_expression               shift and go to state 35
    equality_expression            shift and go to state 31
    enum_specifier                 shift and go to state 97
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 96
    conditional_expression         shift and go to state 36
    expression                     shift and go to state 33

state 33

    (4) primary_expression -> LEFT_ROUND expression . RIGHT_ROUND
    (77) expression -> expression . COMMA assignment_expression

    RIGHT_ROUND     shift and go to state 99
    COMMA           shift and go to state 100


state 34

    (57) logical_and_expression -> inclusive_or_expression .
    (56) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    QUESTION        reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_ROUND     reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_SQUARE    reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    RIGHT_CURL      reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    PIPE            shift and go to state 101


state 35

    (43) relational_expression -> shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 43 (relational_expression -> shift_expression .)
    G_OP            reduce using rule 43 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    AMPERSAND       reduce using rule 43 (relational_expression -> shift_expression .)
    POWER           reduce using rule 43 (relational_expression -> shift_expression .)
    PIPE            reduce using rule 43 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> shift_expression .)
    QUESTION        reduce using rule 43 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    RIGHT_ROUND     reduce using rule 43 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> shift_expression .)
    RIGHT_CURL      reduce using rule 43 (relational_expression -> shift_expression .)
    RIGHT_SQUARE    reduce using rule 43 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 102
    RIGHT_OP        shift and go to state 103


state 36

    (63) assignment_expression -> conditional_expression .

    RIGHT_ROUND     reduce using rule 63 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 63 (assignment_expression -> conditional_expression .)
    RIGHT_SQUARE    reduce using rule 63 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 63 (assignment_expression -> conditional_expression .)


state 37

    (20) unary_expression -> INC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 1
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 104
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23

state 38

    (70) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    AMPERSAND       reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    MULTIPLY        reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    TILDA           reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    EXCLAMATION     reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    HEX_NUM         reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    STRING          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    LEFT_ROUND      reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    EXP_NUM         reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    REAL_NUM        reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    INT_NUM         reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    CHARACTER       reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)


state 39

    (68) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    AMPERSAND       reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    MULTIPLY        reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    TILDA           reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    EXCLAMATION     reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    HEX_NUM         reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    STRING          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    LEFT_ROUND      reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    EXP_NUM         reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    REAL_NUM        reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    INT_NUM         reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    CHARACTER       reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)


state 40

    (74) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    AMPERSAND       reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    MULTIPLY        reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    TILDA           reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    EXCLAMATION     reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    HEX_NUM         reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    STRING          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    LEFT_ROUND      reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    EXP_NUM         reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    REAL_NUM        reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    INT_NUM         reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    CHARACTER       reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)


state 41

    (75) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    AMPERSAND       reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    MULTIPLY        reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    TILDA           reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    EXCLAMATION     reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    HEX_NUM         reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    STRING          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    LEFT_ROUND      reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    EXP_NUM         reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    REAL_NUM        reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    INT_NUM         reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    CHARACTER       reduce using rule 75 (assignment_operator -> OR_ASSIGN .)


state 42

    (65) assignment_operator -> EQUAL .

    INC_OP          reduce using rule 65 (assignment_operator -> EQUAL .)
    DEC_OP          reduce using rule 65 (assignment_operator -> EQUAL .)
    SIZEOF          reduce using rule 65 (assignment_operator -> EQUAL .)
    AMPERSAND       reduce using rule 65 (assignment_operator -> EQUAL .)
    MULTIPLY        reduce using rule 65 (assignment_operator -> EQUAL .)
    PLUS            reduce using rule 65 (assignment_operator -> EQUAL .)
    MINUS           reduce using rule 65 (assignment_operator -> EQUAL .)
    TILDA           reduce using rule 65 (assignment_operator -> EQUAL .)
    EXCLAMATION     reduce using rule 65 (assignment_operator -> EQUAL .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> EQUAL .)
    HEX_NUM         reduce using rule 65 (assignment_operator -> EQUAL .)
    STRING          reduce using rule 65 (assignment_operator -> EQUAL .)
    LEFT_ROUND      reduce using rule 65 (assignment_operator -> EQUAL .)
    EXP_NUM         reduce using rule 65 (assignment_operator -> EQUAL .)
    REAL_NUM        reduce using rule 65 (assignment_operator -> EQUAL .)
    INT_NUM         reduce using rule 65 (assignment_operator -> EQUAL .)
    CHARACTER       reduce using rule 65 (assignment_operator -> EQUAL .)


state 43

    (73) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    AMPERSAND       reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    MULTIPLY        reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    TILDA           reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    EXCLAMATION     reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    HEX_NUM         reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    STRING          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    LEFT_ROUND      reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    EXP_NUM         reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    REAL_NUM        reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    INT_NUM         reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    CHARACTER       reduce using rule 73 (assignment_operator -> AND_ASSIGN .)


state 44

    (66) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    AMPERSAND       reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    MULTIPLY        reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    TILDA           reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    EXCLAMATION     reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    HEX_NUM         reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    STRING          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    LEFT_ROUND      reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    EXP_NUM         reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    REAL_NUM        reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    INT_NUM         reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    CHARACTER       reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)


state 45

    (67) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    AMPERSAND       reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    MULTIPLY        reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    TILDA           reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    EXCLAMATION     reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    HEX_NUM         reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    STRING          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    LEFT_ROUND      reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    EXP_NUM         reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    REAL_NUM        reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    INT_NUM         reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    CHARACTER       reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)


state 46

    (71) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    AMPERSAND       reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    MULTIPLY        reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    TILDA           reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    EXCLAMATION     reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    HEX_NUM         reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    STRING          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    LEFT_ROUND      reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    EXP_NUM         reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    REAL_NUM        reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    INT_NUM         reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    CHARACTER       reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)


state 47

    (69) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    AMPERSAND       reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    MULTIPLY        reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    TILDA           reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    EXCLAMATION     reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    HEX_NUM         reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    STRING          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    LEFT_ROUND      reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    EXP_NUM         reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    REAL_NUM        reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    INT_NUM         reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    CHARACTER       reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)


state 48

    (72) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    AMPERSAND       reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    MULTIPLY        reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    TILDA           reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    EXCLAMATION     reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    HEX_NUM         reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    STRING          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    LEFT_ROUND      reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    EXP_NUM         reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    REAL_NUM        reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    INT_NUM         reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    CHARACTER       reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)


state 49

    (64) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 105
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 50

    (21) unary_expression -> DEC_OP unary_expression .

    MULTIPLY        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MODULO          reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    L_OP            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    G_OP            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AMPERSAND       reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    POWER           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    PIPE            reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    QUESTION        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_SQUARE    reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    EQUAL           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ROUND     reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SEMICOLON       reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_CURL      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)


state 51

    (54) exclusive_or_expression -> exclusive_or_expression POWER . and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    and_expression                 shift and go to state 106
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    equality_expression            shift and go to state 31
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24

state 52

    (23) unary_expression -> SIZEOF unary_expression .

    MULTIPLY        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MODULO          reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    L_OP            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    G_OP            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AMPERSAND       reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    POWER           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    PIPE            reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    QUESTION        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SQUARE    reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ROUND     reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_CURL      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)


state 53

    (24) unary_expression -> SIZEOF LEFT_ROUND . type_name RIGHT_ROUND
    (4) primary_expression -> LEFT_ROUND . expression RIGHT_ROUND
    (157) type_name -> . specifier_qualifier_list
    (158) type_name -> . specifier_qualifier_list abstract_declarator
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    ENUM            shift and go to state 90
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 11
    struct_or_union_specifier      shift and go to state 80
    exclusive_or_expression        shift and go to state 13
    and_expression                 shift and go to state 20
    type_specifier                 shift and go to state 84
    inclusive_or_expression        shift and go to state 34
    type_name                      shift and go to state 107
    postfix_expression             shift and go to state 17
    relational_expression          shift and go to state 24
    cast_expression                shift and go to state 21
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    struct_or_union                shift and go to state 87
    assignment_expression          shift and go to state 25
    multiplicative_expression      shift and go to state 26
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29
    logical_and_expression         shift and go to state 30
    shift_expression               shift and go to state 35
    equality_expression            shift and go to state 31
    enum_specifier                 shift and go to state 97
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 96
    conditional_expression         shift and go to state 36
    expression                     shift and go to state 33

state 54

    (11) postfix_expression -> postfix_expression LEFT_ROUND . RIGHT_ROUND
    (12) postfix_expression -> postfix_expression LEFT_ROUND . argument_expression_list RIGHT_ROUND
    (17) argument_expression_list -> . assignment_expression
    (18) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    RIGHT_ROUND     shift and go to state 108
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 109
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    argument_expression_list       shift and go to state 110
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 55

    (10) postfix_expression -> postfix_expression LEFT_SQUARE . expression RIGHT_SQUARE
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 25
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    expression                     shift and go to state 111
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 56

    (15) postfix_expression -> postfix_expression INC_OP .

    LEFT_SQUARE     reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ROUND      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DOT             reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    EQUAL           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MULTIPLY        reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MODULO          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    L_OP            reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    G_OP            reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    AMPERSAND       reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    POWER           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    PIPE            reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    QUESTION        reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ROUND     reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_SQUARE    reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    SEMICOLON       reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_CURL      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)


state 57

    (14) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 112


state 58

    (16) postfix_expression -> postfix_expression DEC_OP .

    LEFT_SQUARE     reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ROUND      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DOT             reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    EQUAL           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MULTIPLY        reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MODULO          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    L_OP            reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    G_OP            reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    AMPERSAND       reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    POWER           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    PIPE            reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    QUESTION        reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ROUND     reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_SQUARE    reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    SEMICOLON       reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_CURL      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)


state 59

    (13) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 113


state 60

    (52) and_expression -> and_expression AMPERSAND . equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    equality_expression            shift and go to state 114
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24

state 61

    (62) conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 25
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    expression                     shift and go to state 115
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 62

    (60) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    and_expression                 shift and go to state 20
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 116
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 24

state 63

    (31) cast_expression -> unary_expression .

    MULTIPLY        reduce using rule 31 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 31 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 31 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 31 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    L_OP            reduce using rule 31 (cast_expression -> unary_expression .)
    G_OP            reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    AMPERSAND       reduce using rule 31 (cast_expression -> unary_expression .)
    POWER           reduce using rule 31 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    QUESTION        reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_ROUND     reduce using rule 31 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_SQUARE    reduce using rule 31 (cast_expression -> unary_expression .)
    COLON           reduce using rule 31 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_CURL      reduce using rule 31 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 31 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 31 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 31 (cast_expression -> unary_expression .)


state 64

    (22) unary_expression -> unary_operator cast_expression .

    MULTIPLY        reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MODULO          reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    L_OP            reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    G_OP            reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    AMPERSAND       reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    POWER           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    PIPE            reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    QUESTION        reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SQUARE    reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ROUND     reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_CURL      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)


state 65

    (32) cast_expression -> LEFT_ROUND . type_name RIGHT_ROUND cast_expression
    (4) primary_expression -> LEFT_ROUND . expression RIGHT_ROUND
    (157) type_name -> . specifier_qualifier_list
    (158) type_name -> . specifier_qualifier_list abstract_declarator
    (76) expression -> . assignment_expression
    (77) expression -> . expression COMMA assignment_expression
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    ENUM            shift and go to state 90
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 11
    struct_or_union_specifier      shift and go to state 80
    exclusive_or_expression        shift and go to state 13
    and_expression                 shift and go to state 20
    type_specifier                 shift and go to state 84
    inclusive_or_expression        shift and go to state 34
    type_name                      shift and go to state 85
    postfix_expression             shift and go to state 17
    relational_expression          shift and go to state 24
    cast_expression                shift and go to state 21
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    struct_or_union                shift and go to state 87
    assignment_expression          shift and go to state 25
    multiplicative_expression      shift and go to state 26
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29
    logical_and_expression         shift and go to state 30
    shift_expression               shift and go to state 35
    equality_expression            shift and go to state 31
    enum_specifier                 shift and go to state 97
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 96
    conditional_expression         shift and go to state 36
    expression                     shift and go to state 33

state 66

    (46) relational_expression -> relational_expression LE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 117
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 67

    (45) relational_expression -> relational_expression G_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 118
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 68

    (44) relational_expression -> relational_expression L_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 119
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 69

    (47) relational_expression -> relational_expression GE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 70

    (34) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    cast_expression                shift and go to state 121
    unary_operator                 shift and go to state 23

state 71

    (36) multiplicative_expression -> multiplicative_expression MODULO . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    cast_expression                shift and go to state 122
    unary_operator                 shift and go to state 23

state 72

    (35) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    cast_expression                shift and go to state 123
    unary_operator                 shift and go to state 23

state 73

    (38) additive_expression -> additive_expression PLUS . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 124
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    primary_expression             shift and go to state 29

state 74

    (39) additive_expression -> additive_expression MINUS . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 125
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    primary_expression             shift and go to state 29

state 75

    (58) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 126
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    additive_expression            shift and go to state 27
    and_expression                 shift and go to state 20
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 24

state 76

    (50) equality_expression -> equality_expression NE_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    relational_expression          shift and go to state 127
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 77

    (49) equality_expression -> equality_expression EQ_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    relational_expression          shift and go to state 128
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    primary_expression             shift and go to state 29

state 78

    (98) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 98 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 98 (type_specifier -> SHORT .)
    STATIC          reduce using rule 98 (type_specifier -> SHORT .)
    AUTO            reduce using rule 98 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 98 (type_specifier -> SHORT .)
    VOID            reduce using rule 98 (type_specifier -> SHORT .)
    CHAR            reduce using rule 98 (type_specifier -> SHORT .)
    SHORT           reduce using rule 98 (type_specifier -> SHORT .)
    INT             reduce using rule 98 (type_specifier -> SHORT .)
    LONG            reduce using rule 98 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 98 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 98 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 98 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 98 (type_specifier -> SHORT .)
    CONST           reduce using rule 98 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 98 (type_specifier -> SHORT .)
    ENUM            reduce using rule 98 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 98 (type_specifier -> SHORT .)
    UNION           reduce using rule 98 (type_specifier -> SHORT .)
    MULTIPLY        reduce using rule 98 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 98 (type_specifier -> SHORT .)
    LEFT_ROUND      reduce using rule 98 (type_specifier -> SHORT .)
    LEFT_SQUARE     reduce using rule 98 (type_specifier -> SHORT .)
    COMMA           reduce using rule 98 (type_specifier -> SHORT .)
    RIGHT_ROUND     reduce using rule 98 (type_specifier -> SHORT .)
    COLON           reduce using rule 98 (type_specifier -> SHORT .)


state 79

    (131) type_qualifier -> CONST .

    VOID            reduce using rule 131 (type_qualifier -> CONST .)
    CHAR            reduce using rule 131 (type_qualifier -> CONST .)
    SHORT           reduce using rule 131 (type_qualifier -> CONST .)
    INT             reduce using rule 131 (type_qualifier -> CONST .)
    LONG            reduce using rule 131 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 131 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 131 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 131 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 131 (type_qualifier -> CONST .)
    CONST           reduce using rule 131 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 131 (type_qualifier -> CONST .)
    ENUM            reduce using rule 131 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 131 (type_qualifier -> CONST .)
    UNION           reduce using rule 131 (type_qualifier -> CONST .)
    MULTIPLY        reduce using rule 131 (type_qualifier -> CONST .)
    LEFT_ROUND      reduce using rule 131 (type_qualifier -> CONST .)
    LEFT_SQUARE     reduce using rule 131 (type_qualifier -> CONST .)
    RIGHT_ROUND     reduce using rule 131 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 131 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 131 (type_qualifier -> CONST .)
    STATIC          reduce using rule 131 (type_qualifier -> CONST .)
    AUTO            reduce using rule 131 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 131 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 131 (type_qualifier -> CONST .)
    COMMA           reduce using rule 131 (type_qualifier -> CONST .)
    COLON           reduce using rule 131 (type_qualifier -> CONST .)


state 80

    (105) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    MULTIPLY        reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    LEFT_ROUND      reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    LEFT_SQUARE     reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    RIGHT_ROUND     reduce using rule 105 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 105 (type_specifier -> struct_or_union_specifier .)


state 81

    (96) type_specifier -> VOID .

    TYPEDEF         reduce using rule 96 (type_specifier -> VOID .)
    EXTERN          reduce using rule 96 (type_specifier -> VOID .)
    STATIC          reduce using rule 96 (type_specifier -> VOID .)
    AUTO            reduce using rule 96 (type_specifier -> VOID .)
    REGISTER        reduce using rule 96 (type_specifier -> VOID .)
    VOID            reduce using rule 96 (type_specifier -> VOID .)
    CHAR            reduce using rule 96 (type_specifier -> VOID .)
    SHORT           reduce using rule 96 (type_specifier -> VOID .)
    INT             reduce using rule 96 (type_specifier -> VOID .)
    LONG            reduce using rule 96 (type_specifier -> VOID .)
    FLOAT           reduce using rule 96 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 96 (type_specifier -> VOID .)
    SIGNED          reduce using rule 96 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 96 (type_specifier -> VOID .)
    CONST           reduce using rule 96 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 96 (type_specifier -> VOID .)
    ENUM            reduce using rule 96 (type_specifier -> VOID .)
    STRUCT          reduce using rule 96 (type_specifier -> VOID .)
    UNION           reduce using rule 96 (type_specifier -> VOID .)
    MULTIPLY        reduce using rule 96 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 96 (type_specifier -> VOID .)
    LEFT_ROUND      reduce using rule 96 (type_specifier -> VOID .)
    LEFT_SQUARE     reduce using rule 96 (type_specifier -> VOID .)
    COMMA           reduce using rule 96 (type_specifier -> VOID .)
    RIGHT_ROUND     reduce using rule 96 (type_specifier -> VOID .)
    COLON           reduce using rule 96 (type_specifier -> VOID .)


state 82

    (97) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 97 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 97 (type_specifier -> CHAR .)
    STATIC          reduce using rule 97 (type_specifier -> CHAR .)
    AUTO            reduce using rule 97 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 97 (type_specifier -> CHAR .)
    VOID            reduce using rule 97 (type_specifier -> CHAR .)
    CHAR            reduce using rule 97 (type_specifier -> CHAR .)
    SHORT           reduce using rule 97 (type_specifier -> CHAR .)
    INT             reduce using rule 97 (type_specifier -> CHAR .)
    LONG            reduce using rule 97 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 97 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 97 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 97 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 97 (type_specifier -> CHAR .)
    CONST           reduce using rule 97 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 97 (type_specifier -> CHAR .)
    ENUM            reduce using rule 97 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 97 (type_specifier -> CHAR .)
    UNION           reduce using rule 97 (type_specifier -> CHAR .)
    MULTIPLY        reduce using rule 97 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 97 (type_specifier -> CHAR .)
    LEFT_ROUND      reduce using rule 97 (type_specifier -> CHAR .)
    LEFT_SQUARE     reduce using rule 97 (type_specifier -> CHAR .)
    COMMA           reduce using rule 97 (type_specifier -> CHAR .)
    RIGHT_ROUND     reduce using rule 97 (type_specifier -> CHAR .)
    COLON           reduce using rule 97 (type_specifier -> CHAR .)


state 83

    (100) type_specifier -> LONG .

    TYPEDEF         reduce using rule 100 (type_specifier -> LONG .)
    EXTERN          reduce using rule 100 (type_specifier -> LONG .)
    STATIC          reduce using rule 100 (type_specifier -> LONG .)
    AUTO            reduce using rule 100 (type_specifier -> LONG .)
    REGISTER        reduce using rule 100 (type_specifier -> LONG .)
    VOID            reduce using rule 100 (type_specifier -> LONG .)
    CHAR            reduce using rule 100 (type_specifier -> LONG .)
    SHORT           reduce using rule 100 (type_specifier -> LONG .)
    INT             reduce using rule 100 (type_specifier -> LONG .)
    LONG            reduce using rule 100 (type_specifier -> LONG .)
    FLOAT           reduce using rule 100 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 100 (type_specifier -> LONG .)
    SIGNED          reduce using rule 100 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 100 (type_specifier -> LONG .)
    CONST           reduce using rule 100 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 100 (type_specifier -> LONG .)
    ENUM            reduce using rule 100 (type_specifier -> LONG .)
    STRUCT          reduce using rule 100 (type_specifier -> LONG .)
    UNION           reduce using rule 100 (type_specifier -> LONG .)
    MULTIPLY        reduce using rule 100 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> LONG .)
    LEFT_ROUND      reduce using rule 100 (type_specifier -> LONG .)
    LEFT_SQUARE     reduce using rule 100 (type_specifier -> LONG .)
    COMMA           reduce using rule 100 (type_specifier -> LONG .)
    RIGHT_ROUND     reduce using rule 100 (type_specifier -> LONG .)
    COLON           reduce using rule 100 (type_specifier -> LONG .)


state 84

    (115) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (116) specifier_qualifier_list -> type_specifier .
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    MULTIPLY        reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    LEFT_ROUND      reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    LEFT_SQUARE     reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    RIGHT_ROUND     reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 116 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 129

state 85

    (32) cast_expression -> LEFT_ROUND type_name . RIGHT_ROUND cast_expression

    RIGHT_ROUND     shift and go to state 130


state 86

    (104) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 104 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 104 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 104 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 104 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 104 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 104 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 104 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 104 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 104 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 104 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 104 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 104 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 104 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 104 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 104 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 104 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 104 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 104 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 104 (type_specifier -> UNSIGNED .)
    MULTIPLY        reduce using rule 104 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> UNSIGNED .)
    LEFT_ROUND      reduce using rule 104 (type_specifier -> UNSIGNED .)
    LEFT_SQUARE     reduce using rule 104 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 104 (type_specifier -> UNSIGNED .)
    RIGHT_ROUND     reduce using rule 104 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 104 (type_specifier -> UNSIGNED .)


state 87

    (107) struct_or_union_specifier -> struct_or_union . IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> struct_or_union . LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 131
    LEFT_CURL       shift and go to state 132


state 88

    (102) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 102 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 102 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 102 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 102 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 102 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 102 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 102 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 102 (type_specifier -> DOUBLE .)
    INT             reduce using rule 102 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 102 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 102 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 102 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 102 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 102 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 102 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 102 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 102 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 102 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 102 (type_specifier -> DOUBLE .)
    MULTIPLY        reduce using rule 102 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> DOUBLE .)
    LEFT_ROUND      reduce using rule 102 (type_specifier -> DOUBLE .)
    LEFT_SQUARE     reduce using rule 102 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 102 (type_specifier -> DOUBLE .)
    RIGHT_ROUND     reduce using rule 102 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 102 (type_specifier -> DOUBLE .)


state 89

    (111) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 111 (struct_or_union -> UNION .)
    LEFT_CURL       reduce using rule 111 (struct_or_union -> UNION .)


state 90

    (124) enum_specifier -> ENUM . LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> ENUM . IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> ENUM . IDENTIFIER

    LEFT_CURL       shift and go to state 134
    IDENTIFIER      shift and go to state 133


state 91

    (101) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 101 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 101 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 101 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 101 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 101 (type_specifier -> FLOAT .)
    VOID            reduce using rule 101 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 101 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 101 (type_specifier -> FLOAT .)
    INT             reduce using rule 101 (type_specifier -> FLOAT .)
    LONG            reduce using rule 101 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 101 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 101 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 101 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 101 (type_specifier -> FLOAT .)
    CONST           reduce using rule 101 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 101 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 101 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 101 (type_specifier -> FLOAT .)
    UNION           reduce using rule 101 (type_specifier -> FLOAT .)
    MULTIPLY        reduce using rule 101 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> FLOAT .)
    LEFT_ROUND      reduce using rule 101 (type_specifier -> FLOAT .)
    LEFT_SQUARE     reduce using rule 101 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 101 (type_specifier -> FLOAT .)
    RIGHT_ROUND     reduce using rule 101 (type_specifier -> FLOAT .)
    COLON           reduce using rule 101 (type_specifier -> FLOAT .)


state 92

    (110) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 110 (struct_or_union -> STRUCT .)
    LEFT_CURL       reduce using rule 110 (struct_or_union -> STRUCT .)


state 93

    (99) type_specifier -> INT .

    TYPEDEF         reduce using rule 99 (type_specifier -> INT .)
    EXTERN          reduce using rule 99 (type_specifier -> INT .)
    STATIC          reduce using rule 99 (type_specifier -> INT .)
    AUTO            reduce using rule 99 (type_specifier -> INT .)
    REGISTER        reduce using rule 99 (type_specifier -> INT .)
    VOID            reduce using rule 99 (type_specifier -> INT .)
    CHAR            reduce using rule 99 (type_specifier -> INT .)
    SHORT           reduce using rule 99 (type_specifier -> INT .)
    INT             reduce using rule 99 (type_specifier -> INT .)
    LONG            reduce using rule 99 (type_specifier -> INT .)
    FLOAT           reduce using rule 99 (type_specifier -> INT .)
    DOUBLE          reduce using rule 99 (type_specifier -> INT .)
    SIGNED          reduce using rule 99 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 99 (type_specifier -> INT .)
    CONST           reduce using rule 99 (type_specifier -> INT .)
    VOLATILE        reduce using rule 99 (type_specifier -> INT .)
    ENUM            reduce using rule 99 (type_specifier -> INT .)
    STRUCT          reduce using rule 99 (type_specifier -> INT .)
    UNION           reduce using rule 99 (type_specifier -> INT .)
    MULTIPLY        reduce using rule 99 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 99 (type_specifier -> INT .)
    LEFT_ROUND      reduce using rule 99 (type_specifier -> INT .)
    LEFT_SQUARE     reduce using rule 99 (type_specifier -> INT .)
    COMMA           reduce using rule 99 (type_specifier -> INT .)
    RIGHT_ROUND     reduce using rule 99 (type_specifier -> INT .)
    COLON           reduce using rule 99 (type_specifier -> INT .)


state 94

    (117) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (118) specifier_qualifier_list -> type_qualifier .
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    MULTIPLY        reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    LEFT_ROUND      reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    LEFT_SQUARE     reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    RIGHT_ROUND     reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    COLON           reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 118 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 135

state 95

    (103) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 103 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 103 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 103 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 103 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 103 (type_specifier -> SIGNED .)
    VOID            reduce using rule 103 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 103 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 103 (type_specifier -> SIGNED .)
    INT             reduce using rule 103 (type_specifier -> SIGNED .)
    LONG            reduce using rule 103 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 103 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 103 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 103 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 103 (type_specifier -> SIGNED .)
    CONST           reduce using rule 103 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 103 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 103 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 103 (type_specifier -> SIGNED .)
    UNION           reduce using rule 103 (type_specifier -> SIGNED .)
    MULTIPLY        reduce using rule 103 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> SIGNED .)
    LEFT_ROUND      reduce using rule 103 (type_specifier -> SIGNED .)
    LEFT_SQUARE     reduce using rule 103 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 103 (type_specifier -> SIGNED .)
    RIGHT_ROUND     reduce using rule 103 (type_specifier -> SIGNED .)
    COLON           reduce using rule 103 (type_specifier -> SIGNED .)


state 96

    (157) type_name -> specifier_qualifier_list .
    (158) type_name -> specifier_qualifier_list . abstract_declarator
    (159) abstract_declarator -> . pointer
    (160) abstract_declarator -> . direct_abstract_declarator
    (161) abstract_declarator -> . pointer direct_abstract_declarator
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND

    RIGHT_ROUND     reduce using rule 157 (type_name -> specifier_qualifier_list .)
    MULTIPLY        shift and go to state 139
    LEFT_ROUND      shift and go to state 136
    LEFT_SQUARE     shift and go to state 137

    abstract_declarator            shift and go to state 138
    direct_abstract_declarator     shift and go to state 140
    pointer                        shift and go to state 141

state 97

    (106) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 106 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 106 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 106 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 106 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 106 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 106 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 106 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 106 (type_specifier -> enum_specifier .)
    INT             reduce using rule 106 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 106 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 106 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 106 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 106 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 106 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 106 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 106 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 106 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 106 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 106 (type_specifier -> enum_specifier .)
    MULTIPLY        reduce using rule 106 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> enum_specifier .)
    LEFT_ROUND      reduce using rule 106 (type_specifier -> enum_specifier .)
    LEFT_SQUARE     reduce using rule 106 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 106 (type_specifier -> enum_specifier .)
    RIGHT_ROUND     reduce using rule 106 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 106 (type_specifier -> enum_specifier .)


state 98

    (132) type_qualifier -> VOLATILE .

    VOID            reduce using rule 132 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 132 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 132 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 132 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 132 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 132 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 132 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 132 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 132 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 132 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 132 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 132 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 132 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 132 (type_qualifier -> VOLATILE .)
    MULTIPLY        reduce using rule 132 (type_qualifier -> VOLATILE .)
    LEFT_ROUND      reduce using rule 132 (type_qualifier -> VOLATILE .)
    LEFT_SQUARE     reduce using rule 132 (type_qualifier -> VOLATILE .)
    RIGHT_ROUND     reduce using rule 132 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 132 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 132 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 132 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 132 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 132 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 132 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 132 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 132 (type_qualifier -> VOLATILE .)


state 99

    (4) primary_expression -> LEFT_ROUND expression RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DOT             reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PTR_OP          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    INC_OP          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DEC_OP          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQUAL           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MULTIPLY        reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    DIVIDE          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MODULO          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PLUS            reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    MINUS           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LEFT_OP         reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    L_OP            reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    G_OP            reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    LE_OP           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    GE_OP           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    EQ_OP           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    NE_OP           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AMPERSAND       reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    POWER           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    PIPE            reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    AND_OP          reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    QUESTION        reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    OR_OP           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COMMA           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    COLON           reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    SEMICOLON       reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    RIGHT_CURL      reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)
    $end            reduce using rule 4 (primary_expression -> LEFT_ROUND expression RIGHT_ROUND .)


state 100

    (77) expression -> expression COMMA . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 142
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 101

    (56) inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    exclusive_or_expression        shift and go to state 143
    postfix_expression             shift and go to state 17
    additive_expression            shift and go to state 27
    and_expression                 shift and go to state 20
    primary_expression             shift and go to state 29
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    shift_expression               shift and go to state 35
    equality_expression            shift and go to state 31
    relational_expression          shift and go to state 24

state 102

    (41) shift_expression -> shift_expression LEFT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    additive_expression            shift and go to state 144
    primary_expression             shift and go to state 29

state 103

    (42) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    postfix_expression             shift and go to state 17
    unary_operator                 shift and go to state 23
    cast_expression                shift and go to state 21
    additive_expression            shift and go to state 145
    primary_expression             shift and go to state 29

state 104

    (20) unary_expression -> INC_OP unary_expression .

    MULTIPLY        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MODULO          reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    L_OP            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    G_OP            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AMPERSAND       reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    POWER           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    PIPE            reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    QUESTION        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_SQUARE    reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    EQUAL           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ROUND     reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SEMICOLON       reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_CURL      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)


state 105

    (64) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RIGHT_ROUND     reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_SQUARE    reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 106

    (54) exclusive_or_expression -> exclusive_or_expression POWER and_expression .
    (52) and_expression -> and_expression . AMPERSAND equality_expression

    POWER           reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    PIPE            reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    AND_OP          reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    QUESTION        reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    OR_OP           reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    RIGHT_SQUARE    reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    COMMA           reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    RIGHT_CURL      reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    RIGHT_ROUND     reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    COLON           reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    SEMICOLON       reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression POWER and_expression .)
    AMPERSAND       shift and go to state 60


state 107

    (24) unary_expression -> SIZEOF LEFT_ROUND type_name . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 146


state 108

    (11) postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    DOT             reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    EQUAL           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MULTIPLY        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MODULO          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    L_OP            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    G_OP            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    AMPERSAND       reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    POWER           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    PIPE            reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    QUESTION        reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)
    RIGHT_CURL      reduce using rule 11 (postfix_expression -> postfix_expression LEFT_ROUND RIGHT_ROUND .)


state 109

    (17) argument_expression_list -> assignment_expression .

    RIGHT_ROUND     reduce using rule 17 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 17 (argument_expression_list -> assignment_expression .)


state 110

    (12) postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list . RIGHT_ROUND
    (18) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RIGHT_ROUND     shift and go to state 147
    COMMA           shift and go to state 148


state 111

    (10) postfix_expression -> postfix_expression LEFT_SQUARE expression . RIGHT_SQUARE
    (77) expression -> expression . COMMA assignment_expression

    RIGHT_SQUARE    shift and go to state 149
    COMMA           shift and go to state 100


state 112

    (14) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    LEFT_SQUARE     reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ROUND      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DOT             reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUAL           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MULTIPLY        reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MODULO          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    L_OP            reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    G_OP            reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AMPERSAND       reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    POWER           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PIPE            reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    QUESTION        reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_CURL      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 113

    (13) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LEFT_SQUARE     reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ROUND      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUAL           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    L_OP            reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    G_OP            reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    POWER           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PIPE            reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION        reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SQUARE    reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_CURL      reduce using rule 13 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 114

    (52) and_expression -> and_expression AMPERSAND equality_expression .
    (49) equality_expression -> equality_expression . EQ_OP relational_expression
    (50) equality_expression -> equality_expression . NE_OP relational_expression

    AMPERSAND       reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    POWER           reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    PIPE            reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    AND_OP          reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    QUESTION        reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    OR_OP           reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    RIGHT_ROUND     reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    COMMA           reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    RIGHT_SQUARE    reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    COLON           reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    RIGHT_CURL      reduce using rule 52 (and_expression -> and_expression AMPERSAND equality_expression .)
    EQ_OP           shift and go to state 77
    NE_OP           shift and go to state 76


state 115

    (62) conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression
    (77) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 150
    COMMA           shift and go to state 100


state 116

    (60) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (58) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    QUESTION        reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RIGHT_SQUARE    reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RIGHT_CURL      reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    RIGHT_ROUND     reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMICOLON       reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 75


state 117

    (46) relational_expression -> relational_expression LE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    G_OP            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    AMPERSAND       reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    POWER           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    PIPE            reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    QUESTION        reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_ROUND     reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_CURL      reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    RIGHT_SQUARE    reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 102
    RIGHT_OP        shift and go to state 103


state 118

    (45) relational_expression -> relational_expression G_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    G_OP            reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    AMPERSAND       reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    POWER           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    PIPE            reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    AND_OP          reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    QUESTION        reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    OR_OP           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    RIGHT_ROUND     reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    COLON           reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    RIGHT_CURL      reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    RIGHT_SQUARE    reduce using rule 45 (relational_expression -> relational_expression G_OP shift_expression .)
    LEFT_OP         shift and go to state 102
    RIGHT_OP        shift and go to state 103


state 119

    (44) relational_expression -> relational_expression L_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    G_OP            reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    AMPERSAND       reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    POWER           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    PIPE            reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    AND_OP          reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    QUESTION        reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    OR_OP           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    RIGHT_ROUND     reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    COLON           reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    RIGHT_CURL      reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    RIGHT_SQUARE    reduce using rule 44 (relational_expression -> relational_expression L_OP shift_expression .)
    LEFT_OP         shift and go to state 102
    RIGHT_OP        shift and go to state 103


state 120

    (47) relational_expression -> relational_expression GE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    L_OP            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    G_OP            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    AMPERSAND       reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    POWER           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    PIPE            reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    QUESTION        reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_ROUND     reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMICOLON       reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_CURL      reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    RIGHT_SQUARE    reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 102
    RIGHT_OP        shift and go to state 103


state 121

    (34) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MODULO          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    PLUS            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MINUS           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    L_OP            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    G_OP            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    AMPERSAND       reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    POWER           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    PIPE            reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    QUESTION        reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_ROUND     reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_SQUARE    reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMICOLON       reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_CURL      reduce using rule 34 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 122

    (36) multiplicative_expression -> multiplicative_expression MODULO cast_expression .

    MULTIPLY        reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    DIVIDE          reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MODULO          reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    PLUS            reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    MINUS           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    L_OP            reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    G_OP            reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    AMPERSAND       reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    POWER           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    PIPE            reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    AND_OP          reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    QUESTION        reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    OR_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RIGHT_ROUND     reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COMMA           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RIGHT_SQUARE    reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    COLON           reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    SEMICOLON       reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)
    RIGHT_CURL      reduce using rule 36 (multiplicative_expression -> multiplicative_expression MODULO cast_expression .)


state 123

    (35) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULO          reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    L_OP            reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    G_OP            reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AMPERSAND       reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    POWER           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PIPE            reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_OP          reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION        reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_ROUND     reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SQUARE    reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_CURL      reduce using rule 35 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 124

    (38) additive_expression -> additive_expression PLUS multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (35) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (36) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    L_OP            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    G_OP            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMPERSAND       reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    POWER           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PIPE            reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION        reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_ROUND     reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_SQUARE    reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CURL      reduce using rule 38 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTIPLY        shift and go to state 70
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 71


state 125

    (39) additive_expression -> additive_expression MINUS multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (35) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (36) multiplicative_expression -> multiplicative_expression . MODULO cast_expression

    PLUS            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    L_OP            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    G_OP            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMPERSAND       reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    POWER           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PIPE            reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION        reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_ROUND     reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_SQUARE    reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_CURL      reduce using rule 39 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTIPLY        shift and go to state 70
    DIVIDE          shift and go to state 72
    MODULO          shift and go to state 71


state 126

    (58) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (56) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    AND_OP          reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    QUESTION        reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RIGHT_ROUND     reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RIGHT_SQUARE    reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMICOLON       reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    RIGHT_CURL      reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    PIPE            shift and go to state 101


state 127

    (50) equality_expression -> equality_expression NE_OP relational_expression .
    (44) relational_expression -> relational_expression . L_OP shift_expression
    (45) relational_expression -> relational_expression . G_OP shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    AMPERSAND       reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    POWER           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    PIPE            reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    QUESTION        reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_ROUND     reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_SQUARE    reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    RIGHT_CURL      reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    L_OP            shift and go to state 68
    G_OP            shift and go to state 67
    LE_OP           shift and go to state 66
    GE_OP           shift and go to state 69


state 128

    (49) equality_expression -> equality_expression EQ_OP relational_expression .
    (44) relational_expression -> relational_expression . L_OP shift_expression
    (45) relational_expression -> relational_expression . G_OP shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AMPERSAND       reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    POWER           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    PIPE            reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    QUESTION        reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_ROUND     reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_SQUARE    reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    RIGHT_CURL      reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    L_OP            shift and go to state 68
    G_OP            shift and go to state 67
    LE_OP           shift and go to state 66
    GE_OP           shift and go to state 69


state 129

    (115) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    MULTIPLY        reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LEFT_ROUND      reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    LEFT_SQUARE     reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    RIGHT_ROUND     reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    COLON           reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 115 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 130

    (32) cast_expression -> LEFT_ROUND type_name RIGHT_ROUND . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    postfix_expression             shift and go to state 17
    primary_expression             shift and go to state 29
    cast_expression                shift and go to state 151
    unary_operator                 shift and go to state 23

state 131

    (107) struct_or_union_specifier -> struct_or_union IDENTIFIER . LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    LEFT_CURL       shift and go to state 152
    TYPEDEF         reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    MULTIPLY        reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LEFT_ROUND      reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LEFT_SQUARE     reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 109 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 132

    (108) struct_or_union_specifier -> struct_or_union LEFT_CURL . struct_declaration_list RIGHT_CURL
    (112) struct_declaration_list -> . struct_declaration
    (113) struct_declaration_list -> . struct_declaration_list struct_declaration
    (114) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    struct_declaration             shift and go to state 154
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 155
    struct_declaration_list        shift and go to state 153

state 133

    (125) enum_specifier -> ENUM IDENTIFIER . LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> ENUM IDENTIFIER .

    LEFT_CURL       shift and go to state 156
    TYPEDEF         reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    MULTIPLY        reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    LEFT_ROUND      reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    LEFT_SQUARE     reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 126 (enum_specifier -> ENUM IDENTIFIER .)


state 134

    (124) enum_specifier -> ENUM LEFT_CURL . enumerator_list RIGHT_CURL
    (127) enumerator_list -> . enumerator
    (128) enumerator_list -> . enumerator_list COMMA enumerator
    (129) enumerator -> . IDENTIFIER
    (130) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 159

    enumerator_list                shift and go to state 158
    enumerator                     shift and go to state 157

state 135

    (117) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    MULTIPLY        reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LEFT_ROUND      reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    LEFT_SQUARE     reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    RIGHT_ROUND     reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    COLON           reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 117 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 136

    (162) direct_abstract_declarator -> LEFT_ROUND . abstract_declarator RIGHT_ROUND
    (167) direct_abstract_declarator -> LEFT_ROUND . RIGHT_ROUND
    (168) direct_abstract_declarator -> LEFT_ROUND . parameter_type_list RIGHT_ROUND
    (159) abstract_declarator -> . pointer
    (160) abstract_declarator -> . direct_abstract_declarator
    (161) abstract_declarator -> . pointer direct_abstract_declarator
    (148) parameter_type_list -> . parameter_list
    (149) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (150) parameter_list -> . parameter_declaration
    (151) parameter_list -> . parameter_list COMMA parameter_declaration
    (152) parameter_declaration -> . declaration_specifiers declarator
    (153) parameter_declaration -> . declaration_specifiers abstract_declarator
    (154) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_ROUND     shift and go to state 161
    MULTIPLY        shift and go to state 139
    LEFT_ROUND      shift and go to state 136
    LEFT_SQUARE     shift and go to state 137
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    parameter_list                 shift and go to state 171
    type_qualifier                 shift and go to state 172
    parameter_type_list            shift and go to state 168
    parameter_declaration          shift and go to state 169
    abstract_declarator            shift and go to state 173
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    declaration_specifiers         shift and go to state 170
    direct_abstract_declarator     shift and go to state 140
    pointer                        shift and go to state 141

state 137

    (163) direct_abstract_declarator -> LEFT_SQUARE . RIGHT_SQUARE
    (164) direct_abstract_declarator -> LEFT_SQUARE . constant_expression RIGHT_SQUARE
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    RIGHT_SQUARE    shift and go to state 175
    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 174
    relational_expression          shift and go to state 24

state 138

    (158) type_name -> specifier_qualifier_list abstract_declarator .

    RIGHT_ROUND     reduce using rule 158 (type_name -> specifier_qualifier_list abstract_declarator .)


state 139

    (142) pointer -> MULTIPLY .
    (143) pointer -> MULTIPLY . type_qualifier_list
    (144) pointer -> MULTIPLY . pointer
    (145) pointer -> MULTIPLY . type_qualifier_list pointer
    (146) type_qualifier_list -> . type_qualifier
    (147) type_qualifier_list -> . type_qualifier_list type_qualifier
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 142 (pointer -> MULTIPLY .)
    LEFT_ROUND      reduce using rule 142 (pointer -> MULTIPLY .)
    LEFT_SQUARE     reduce using rule 142 (pointer -> MULTIPLY .)
    COMMA           reduce using rule 142 (pointer -> MULTIPLY .)
    RIGHT_ROUND     reduce using rule 142 (pointer -> MULTIPLY .)
    MULTIPLY        shift and go to state 139
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98

    type_qualifier_list            shift and go to state 178
    pointer                        shift and go to state 179
    type_qualifier                 shift and go to state 177

state 140

    (160) abstract_declarator -> direct_abstract_declarator .
    (165) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (169) direct_abstract_declarator -> direct_abstract_declarator . LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> direct_abstract_declarator . LEFT_ROUND parameter_type_list RIGHT_ROUND

    RIGHT_ROUND     reduce using rule 160 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 160 (abstract_declarator -> direct_abstract_declarator .)
    LEFT_SQUARE     shift and go to state 181
    LEFT_ROUND      shift and go to state 180


state 141

    (159) abstract_declarator -> pointer .
    (161) abstract_declarator -> pointer . direct_abstract_declarator
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND

    RIGHT_ROUND     reduce using rule 159 (abstract_declarator -> pointer .)
    LEFT_ROUND      shift and go to state 136
    LEFT_SQUARE     shift and go to state 137

    direct_abstract_declarator     shift and go to state 182

state 142

    (77) expression -> expression COMMA assignment_expression .

    COLON           reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    RIGHT_ROUND     reduce using rule 77 (expression -> expression COMMA assignment_expression .)
    RIGHT_SQUARE    reduce using rule 77 (expression -> expression COMMA assignment_expression .)


state 143

    (56) inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .
    (54) exclusive_or_expression -> exclusive_or_expression . POWER and_expression

    PIPE            reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    AND_OP          reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    QUESTION        reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    OR_OP           reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RIGHT_ROUND     reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COMMA           reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COLON           reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RIGHT_SQUARE    reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    SEMICOLON       reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RIGHT_CURL      reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    POWER           shift and go to state 51


state 144

    (41) shift_expression -> shift_expression LEFT_OP additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    L_OP            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    G_OP            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AMPERSAND       reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    POWER           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PIPE            reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    QUESTION        reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMICOLON       reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_CURL      reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 145

    (42) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (38) additive_expression -> additive_expression . PLUS multiplicative_expression
    (39) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    L_OP            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    G_OP            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AMPERSAND       reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    POWER           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PIPE            reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    QUESTION        reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_ROUND     reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_SQUARE    reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMICOLON       reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_CURL      reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 146

    (24) unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .

    MULTIPLY        reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    DIVIDE          reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    MODULO          reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    PLUS            reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    MINUS           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    LEFT_OP         reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    RIGHT_OP        reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    L_OP            reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    G_OP            reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    LE_OP           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    GE_OP           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    EQ_OP           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    NE_OP           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    AMPERSAND       reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    POWER           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    PIPE            reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    AND_OP          reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    QUESTION        reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    OR_OP           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    EQUAL           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    MUL_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    DIV_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    MOD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    LEFT_ASSIGN     reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    AND_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    XOR_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    OR_ASSIGN       reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    COMMA           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    COLON           reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    SEMICOLON       reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)
    RIGHT_CURL      reduce using rule 24 (unary_expression -> SIZEOF LEFT_ROUND type_name RIGHT_ROUND .)


state 147

    (12) postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    DOT             reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    EQUAL           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MULTIPLY        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MODULO          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    L_OP            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    G_OP            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    AMPERSAND       reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    POWER           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    PIPE            reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    QUESTION        reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_SQUARE    reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)
    RIGHT_CURL      reduce using rule 12 (postfix_expression -> postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND .)


state 148

    (18) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression

    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    LEFT_ROUND      shift and go to state 32
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    additive_expression            shift and go to state 27
    relational_expression          shift and go to state 24
    assignment_expression          shift and go to state 183
    unary_expression               shift and go to state 11
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    and_expression                 shift and go to state 20
    equality_expression            shift and go to state 31
    conditional_expression         shift and go to state 36
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    logical_or_expression          shift and go to state 22
    unary_operator                 shift and go to state 23
    primary_expression             shift and go to state 29

state 149

    (10) postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    DOT             reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    DEC_OP          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    EQUAL           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MULTIPLY        reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    DIVIDE          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MODULO          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    PLUS            reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    MINUS           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    L_OP            reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    G_OP            reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    AMPERSAND       reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    POWER           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    PIPE            reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    QUESTION        reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    COMMA           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_SQUARE    reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    COLON           reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)
    RIGHT_CURL      reduce using rule 10 (postfix_expression -> postfix_expression LEFT_SQUARE expression RIGHT_SQUARE .)


state 150

    (62) conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 184
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    and_expression                 shift and go to state 20
    relational_expression          shift and go to state 24

state 151

    (32) cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .

    MULTIPLY        reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    DIVIDE          reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    MODULO          reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    PLUS            reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    MINUS           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    L_OP            reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    G_OP            reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    AMPERSAND       reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    POWER           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    PIPE            reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    AND_OP          reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    QUESTION        reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    OR_OP           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    RIGHT_ROUND     reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    COMMA           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    RIGHT_SQUARE    reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    COLON           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    SEMICOLON       reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    RIGHT_CURL      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    EQUAL           reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    MUL_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    DIV_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    MOD_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    ADD_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    SUB_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    LEFT_ASSIGN     reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    AND_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    XOR_ASSIGN      reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)
    OR_ASSIGN       reduce using rule 32 (cast_expression -> LEFT_ROUND type_name RIGHT_ROUND cast_expression .)


state 152

    (107) struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL . struct_declaration_list RIGHT_CURL
    (112) struct_declaration_list -> . struct_declaration
    (113) struct_declaration_list -> . struct_declaration_list struct_declaration
    (114) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    struct_declaration             shift and go to state 154
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 155
    struct_declaration_list        shift and go to state 185

state 153

    (108) struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list . RIGHT_CURL
    (113) struct_declaration_list -> struct_declaration_list . struct_declaration
    (114) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_CURL      shift and go to state 186
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    struct_declaration             shift and go to state 187
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 155

state 154

    (112) struct_declaration_list -> struct_declaration .

    RIGHT_CURL      reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 112 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 112 (struct_declaration_list -> struct_declaration .)


state 155

    (114) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (119) struct_declarator_list -> . struct_declarator
    (120) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (121) struct_declarator -> . declarator
    (122) struct_declarator -> . COLON constant_expression
    (123) struct_declarator -> . declarator COLON constant_expression
    (133) declarator -> . pointer direct_declarator
    (134) declarator -> . direct_declarator
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    COLON           shift and go to state 193
    MULTIPLY        shift and go to state 139
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 189

    struct_declarator              shift and go to state 188
    struct_declarator_list         shift and go to state 195
    direct_declarator              shift and go to state 191
    declarator                     shift and go to state 192
    pointer                        shift and go to state 190

state 156

    (125) enum_specifier -> ENUM IDENTIFIER LEFT_CURL . enumerator_list RIGHT_CURL
    (127) enumerator_list -> . enumerator
    (128) enumerator_list -> . enumerator_list COMMA enumerator
    (129) enumerator -> . IDENTIFIER
    (130) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 159

    enumerator_list                shift and go to state 196
    enumerator                     shift and go to state 157

state 157

    (127) enumerator_list -> enumerator .

    RIGHT_CURL      reduce using rule 127 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 127 (enumerator_list -> enumerator .)


state 158

    (124) enum_specifier -> ENUM LEFT_CURL enumerator_list . RIGHT_CURL
    (128) enumerator_list -> enumerator_list . COMMA enumerator

    RIGHT_CURL      shift and go to state 197
    COMMA           shift and go to state 198


state 159

    (129) enumerator -> IDENTIFIER .
    (130) enumerator -> IDENTIFIER . EQUAL constant_expression

    RIGHT_CURL      reduce using rule 129 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 129 (enumerator -> IDENTIFIER .)
    EQUAL           shift and go to state 199


state 160

    (81) declaration_specifiers -> storage_class_specifier .
    (82) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    MULTIPLY        reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    LEFT_ROUND      reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    LEFT_SQUARE     reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    RIGHT_ROUND     reduce using rule 81 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 172
    declaration_specifiers         shift and go to state 200

state 161

    (167) direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 167 (direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 167 (direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 167 (direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 167 (direct_abstract_declarator -> LEFT_ROUND RIGHT_ROUND .)


state 162

    (92) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 92 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 92 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 92 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 92 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 92 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 92 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 92 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 92 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 92 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 92 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 92 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 92 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 92 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 92 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 92 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 92 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 92 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 92 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 92 (storage_class_specifier -> EXTERN .)
    MULTIPLY        reduce using rule 92 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 92 (storage_class_specifier -> EXTERN .)
    LEFT_ROUND      reduce using rule 92 (storage_class_specifier -> EXTERN .)
    LEFT_SQUARE     reduce using rule 92 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 92 (storage_class_specifier -> EXTERN .)
    RIGHT_ROUND     reduce using rule 92 (storage_class_specifier -> EXTERN .)


state 163

    (93) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 93 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 93 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 93 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 93 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 93 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 93 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 93 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 93 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 93 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 93 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 93 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 93 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 93 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 93 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 93 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 93 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 93 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 93 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 93 (storage_class_specifier -> STATIC .)
    MULTIPLY        reduce using rule 93 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 93 (storage_class_specifier -> STATIC .)
    LEFT_ROUND      reduce using rule 93 (storage_class_specifier -> STATIC .)
    LEFT_SQUARE     reduce using rule 93 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 93 (storage_class_specifier -> STATIC .)
    RIGHT_ROUND     reduce using rule 93 (storage_class_specifier -> STATIC .)


state 164

    (83) declaration_specifiers -> type_specifier .
    (84) declaration_specifiers -> type_specifier . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    MULTIPLY        reduce using rule 83 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 83 (declaration_specifiers -> type_specifier .)
    LEFT_ROUND      reduce using rule 83 (declaration_specifiers -> type_specifier .)
    LEFT_SQUARE     reduce using rule 83 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 83 (declaration_specifiers -> type_specifier .)
    RIGHT_ROUND     reduce using rule 83 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 172
    declaration_specifiers         shift and go to state 201

state 165

    (95) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 95 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 95 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 95 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 95 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 95 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 95 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 95 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 95 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 95 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 95 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 95 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 95 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 95 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 95 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 95 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 95 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 95 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 95 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 95 (storage_class_specifier -> REGISTER .)
    MULTIPLY        reduce using rule 95 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 95 (storage_class_specifier -> REGISTER .)
    LEFT_ROUND      reduce using rule 95 (storage_class_specifier -> REGISTER .)
    LEFT_SQUARE     reduce using rule 95 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 95 (storage_class_specifier -> REGISTER .)
    RIGHT_ROUND     reduce using rule 95 (storage_class_specifier -> REGISTER .)


state 166

    (94) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 94 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 94 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 94 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 94 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 94 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 94 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 94 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 94 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 94 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 94 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 94 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 94 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 94 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 94 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 94 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 94 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 94 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 94 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 94 (storage_class_specifier -> AUTO .)
    MULTIPLY        reduce using rule 94 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 94 (storage_class_specifier -> AUTO .)
    LEFT_ROUND      reduce using rule 94 (storage_class_specifier -> AUTO .)
    LEFT_SQUARE     reduce using rule 94 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 94 (storage_class_specifier -> AUTO .)
    RIGHT_ROUND     reduce using rule 94 (storage_class_specifier -> AUTO .)


state 167

    (91) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    MULTIPLY        reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    LEFT_ROUND      reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    LEFT_SQUARE     reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 91 (storage_class_specifier -> TYPEDEF .)
    RIGHT_ROUND     reduce using rule 91 (storage_class_specifier -> TYPEDEF .)


state 168

    (168) direct_abstract_declarator -> LEFT_ROUND parameter_type_list . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 202


state 169

    (150) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 150 (parameter_list -> parameter_declaration .)
    RIGHT_ROUND     reduce using rule 150 (parameter_list -> parameter_declaration .)


state 170

    (152) parameter_declaration -> declaration_specifiers . declarator
    (153) parameter_declaration -> declaration_specifiers . abstract_declarator
    (154) parameter_declaration -> declaration_specifiers .
    (133) declarator -> . pointer direct_declarator
    (134) declarator -> . direct_declarator
    (159) abstract_declarator -> . pointer
    (160) abstract_declarator -> . direct_abstract_declarator
    (161) abstract_declarator -> . pointer direct_abstract_declarator
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND

    COMMA           reduce using rule 154 (parameter_declaration -> declaration_specifiers .)
    RIGHT_ROUND     reduce using rule 154 (parameter_declaration -> declaration_specifiers .)
    MULTIPLY        shift and go to state 139
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 203
    LEFT_SQUARE     shift and go to state 137

    direct_declarator              shift and go to state 191
    abstract_declarator            shift and go to state 204
    declarator                     shift and go to state 205
    direct_abstract_declarator     shift and go to state 140
    pointer                        shift and go to state 206

state 171

    (148) parameter_type_list -> parameter_list .
    (149) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (151) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_ROUND     reduce using rule 148 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 207


state 172

    (85) declaration_specifiers -> type_qualifier .
    (86) declaration_specifiers -> type_qualifier . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    MULTIPLY        reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    LEFT_ROUND      reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    LEFT_SQUARE     reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    RIGHT_ROUND     reduce using rule 85 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 172
    declaration_specifiers         shift and go to state 208

state 173

    (162) direct_abstract_declarator -> LEFT_ROUND abstract_declarator . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 209


state 174

    (164) direct_abstract_declarator -> LEFT_SQUARE constant_expression . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 210


state 175

    (163) direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 163 (direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 163 (direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 163 (direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 163 (direct_abstract_declarator -> LEFT_SQUARE RIGHT_SQUARE .)


state 176

    (78) constant_expression -> conditional_expression .

    RIGHT_SQUARE    reduce using rule 78 (constant_expression -> conditional_expression .)
    RIGHT_CURL      reduce using rule 78 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 78 (constant_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 78 (constant_expression -> conditional_expression .)


state 177

    (146) type_qualifier_list -> type_qualifier .

    MULTIPLY        reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    LEFT_ROUND      reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    LEFT_SQUARE     reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    RIGHT_ROUND     reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 146 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 146 (type_qualifier_list -> type_qualifier .)


state 178

    (143) pointer -> MULTIPLY type_qualifier_list .
    (145) pointer -> MULTIPLY type_qualifier_list . pointer
    (147) type_qualifier_list -> type_qualifier_list . type_qualifier
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 143 (pointer -> MULTIPLY type_qualifier_list .)
    LEFT_ROUND      reduce using rule 143 (pointer -> MULTIPLY type_qualifier_list .)
    LEFT_SQUARE     reduce using rule 143 (pointer -> MULTIPLY type_qualifier_list .)
    COMMA           reduce using rule 143 (pointer -> MULTIPLY type_qualifier_list .)
    RIGHT_ROUND     reduce using rule 143 (pointer -> MULTIPLY type_qualifier_list .)
    MULTIPLY        shift and go to state 139
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98

    pointer                        shift and go to state 212
    type_qualifier                 shift and go to state 211

state 179

    (144) pointer -> MULTIPLY pointer .

    IDENTIFIER      reduce using rule 144 (pointer -> MULTIPLY pointer .)
    LEFT_ROUND      reduce using rule 144 (pointer -> MULTIPLY pointer .)
    LEFT_SQUARE     reduce using rule 144 (pointer -> MULTIPLY pointer .)
    COMMA           reduce using rule 144 (pointer -> MULTIPLY pointer .)
    RIGHT_ROUND     reduce using rule 144 (pointer -> MULTIPLY pointer .)


state 180

    (169) direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND . RIGHT_ROUND
    (170) direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND . parameter_type_list RIGHT_ROUND
    (148) parameter_type_list -> . parameter_list
    (149) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (150) parameter_list -> . parameter_declaration
    (151) parameter_list -> . parameter_list COMMA parameter_declaration
    (152) parameter_declaration -> . declaration_specifiers declarator
    (153) parameter_declaration -> . declaration_specifiers abstract_declarator
    (154) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_ROUND     shift and go to state 213
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    parameter_list                 shift and go to state 171
    parameter_type_list            shift and go to state 214
    parameter_declaration          shift and go to state 169
    type_qualifier                 shift and go to state 172
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    declaration_specifiers         shift and go to state 170

state 181

    (165) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE . RIGHT_SQUARE
    (166) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE . constant_expression RIGHT_SQUARE
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    RIGHT_SQUARE    shift and go to state 216
    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 215
    relational_expression          shift and go to state 24

state 182

    (161) abstract_declarator -> pointer direct_abstract_declarator .
    (165) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (169) direct_abstract_declarator -> direct_abstract_declarator . LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> direct_abstract_declarator . LEFT_ROUND parameter_type_list RIGHT_ROUND

    RIGHT_ROUND     reduce using rule 161 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 161 (abstract_declarator -> pointer direct_abstract_declarator .)
    LEFT_SQUARE     shift and go to state 181
    LEFT_ROUND      shift and go to state 180


state 183

    (18) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RIGHT_ROUND     reduce using rule 18 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 18 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 184

    (62) conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .

    RIGHT_ROUND     reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COMMA           reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    COLON           reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RIGHT_CURL      reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    RIGHT_SQUARE    reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 62 (conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression .)


state 185

    (107) struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list . RIGHT_CURL
    (113) struct_declaration_list -> struct_declaration_list . struct_declaration
    (114) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (115) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (116) specifier_qualifier_list -> . type_specifier
    (117) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (118) specifier_qualifier_list -> . type_qualifier
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_CURL      shift and go to state 217
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 84
    struct_declaration             shift and go to state 187
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    type_qualifier                 shift and go to state 94
    specifier_qualifier_list       shift and go to state 155

state 186

    (108) struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .

    TYPEDEF         reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    EXTERN          reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    STATIC          reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    AUTO            reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    REGISTER        reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    VOID            reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    CHAR            reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    SHORT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    INT             reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LONG            reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    FLOAT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    DOUBLE          reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    SIGNED          reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    CONST           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    VOLATILE        reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    ENUM            reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    STRUCT          reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    UNION           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    MULTIPLY        reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LEFT_SQUARE     reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    COMMA           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    RIGHT_ROUND     reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)
    COLON           reduce using rule 108 (struct_or_union_specifier -> struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL .)


state 187

    (113) struct_declaration_list -> struct_declaration_list struct_declaration .

    RIGHT_CURL      reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 113 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 188

    (119) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 119 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 119 (struct_declarator_list -> struct_declarator .)


state 189

    (136) direct_declarator -> LEFT_ROUND . declarator RIGHT_ROUND
    (133) declarator -> . pointer direct_declarator
    (134) declarator -> . direct_declarator
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    MULTIPLY        shift and go to state 139
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 189

    direct_declarator              shift and go to state 191
    declarator                     shift and go to state 218
    pointer                        shift and go to state 190

state 190

    (133) declarator -> pointer . direct_declarator
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 189

    direct_declarator              shift and go to state 219

state 191

    (134) declarator -> direct_declarator .
    (137) direct_declarator -> direct_declarator . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> direct_declarator . LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> direct_declarator . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> direct_declarator . LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> direct_declarator . LEFT_ROUND RIGHT_ROUND

    COMMA           reduce using rule 134 (declarator -> direct_declarator .)
    RIGHT_ROUND     reduce using rule 134 (declarator -> direct_declarator .)
    COLON           reduce using rule 134 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 134 (declarator -> direct_declarator .)
    LEFT_SQUARE     shift and go to state 221
    LEFT_ROUND      shift and go to state 220


state 192

    (121) struct_declarator -> declarator .
    (123) struct_declarator -> declarator . COLON constant_expression

    SEMICOLON       reduce using rule 121 (struct_declarator -> declarator .)
    COMMA           reduce using rule 121 (struct_declarator -> declarator .)
    COLON           shift and go to state 222


state 193

    (122) struct_declarator -> COLON . constant_expression
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 223
    relational_expression          shift and go to state 24

state 194

    (135) direct_declarator -> IDENTIFIER .

    LEFT_SQUARE     reduce using rule 135 (direct_declarator -> IDENTIFIER .)
    LEFT_ROUND      reduce using rule 135 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 135 (direct_declarator -> IDENTIFIER .)
    RIGHT_ROUND     reduce using rule 135 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 135 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 135 (direct_declarator -> IDENTIFIER .)


state 195

    (114) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (120) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 225
    COMMA           shift and go to state 224


state 196

    (125) enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list . RIGHT_CURL
    (128) enumerator_list -> enumerator_list . COMMA enumerator

    RIGHT_CURL      shift and go to state 226
    COMMA           shift and go to state 198


state 197

    (124) enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .

    TYPEDEF         reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    EXTERN          reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    STATIC          reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    AUTO            reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    REGISTER        reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    VOID            reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    CHAR            reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    SHORT           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    INT             reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    LONG            reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    FLOAT           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    DOUBLE          reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    SIGNED          reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    CONST           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    VOLATILE        reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    ENUM            reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    STRUCT          reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    UNION           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    MULTIPLY        reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    LEFT_SQUARE     reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    COMMA           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    RIGHT_ROUND     reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)
    COLON           reduce using rule 124 (enum_specifier -> ENUM LEFT_CURL enumerator_list RIGHT_CURL .)


state 198

    (128) enumerator_list -> enumerator_list COMMA . enumerator
    (129) enumerator -> . IDENTIFIER
    (130) enumerator -> . IDENTIFIER EQUAL constant_expression

    IDENTIFIER      shift and go to state 159

    enumerator                     shift and go to state 227

state 199

    (130) enumerator -> IDENTIFIER EQUAL . constant_expression
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 228
    relational_expression          shift and go to state 24

state 200

    (82) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    MULTIPLY        reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LEFT_ROUND      reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LEFT_SQUARE     reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RIGHT_ROUND     reduce using rule 82 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 201

    (84) declaration_specifiers -> type_specifier declaration_specifiers .

    MULTIPLY        reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LEFT_ROUND      reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LEFT_SQUARE     reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RIGHT_ROUND     reduce using rule 84 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 202

    (168) direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 168 (direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 168 (direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    COMMA           reduce using rule 168 (direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 168 (direct_abstract_declarator -> LEFT_ROUND parameter_type_list RIGHT_ROUND .)


state 203

    (136) direct_declarator -> LEFT_ROUND . declarator RIGHT_ROUND
    (162) direct_abstract_declarator -> LEFT_ROUND . abstract_declarator RIGHT_ROUND
    (167) direct_abstract_declarator -> LEFT_ROUND . RIGHT_ROUND
    (168) direct_abstract_declarator -> LEFT_ROUND . parameter_type_list RIGHT_ROUND
    (133) declarator -> . pointer direct_declarator
    (134) declarator -> . direct_declarator
    (159) abstract_declarator -> . pointer
    (160) abstract_declarator -> . direct_abstract_declarator
    (161) abstract_declarator -> . pointer direct_abstract_declarator
    (148) parameter_type_list -> . parameter_list
    (149) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (150) parameter_list -> . parameter_declaration
    (151) parameter_list -> . parameter_list COMMA parameter_declaration
    (152) parameter_declaration -> . declaration_specifiers declarator
    (153) parameter_declaration -> . declaration_specifiers abstract_declarator
    (154) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_ROUND     shift and go to state 161
    MULTIPLY        shift and go to state 139
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 203
    LEFT_SQUARE     shift and go to state 137
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    parameter_list                 shift and go to state 171
    type_qualifier                 shift and go to state 172
    parameter_type_list            shift and go to state 168
    parameter_declaration          shift and go to state 169
    direct_declarator              shift and go to state 191
    abstract_declarator            shift and go to state 173
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    declaration_specifiers         shift and go to state 170
    declarator                     shift and go to state 218
    direct_abstract_declarator     shift and go to state 140
    pointer                        shift and go to state 206

state 204

    (153) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 153 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    RIGHT_ROUND     reduce using rule 153 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 205

    (152) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 152 (parameter_declaration -> declaration_specifiers declarator .)
    RIGHT_ROUND     reduce using rule 152 (parameter_declaration -> declaration_specifiers declarator .)


state 206

    (133) declarator -> pointer . direct_declarator
    (159) abstract_declarator -> pointer .
    (161) abstract_declarator -> pointer . direct_abstract_declarator
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND
    (162) direct_abstract_declarator -> . LEFT_ROUND abstract_declarator RIGHT_ROUND
    (163) direct_abstract_declarator -> . LEFT_SQUARE RIGHT_SQUARE
    (164) direct_abstract_declarator -> . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (165) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE
    (166) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (167) direct_abstract_declarator -> . LEFT_ROUND RIGHT_ROUND
    (168) direct_abstract_declarator -> . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (169) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND RIGHT_ROUND
    (170) direct_abstract_declarator -> . direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND

    RIGHT_ROUND     reduce using rule 159 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 159 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 203
    LEFT_SQUARE     shift and go to state 137

    direct_declarator              shift and go to state 219
    direct_abstract_declarator     shift and go to state 182

state 207

    (149) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (151) parameter_list -> parameter_list COMMA . parameter_declaration
    (152) parameter_declaration -> . declaration_specifiers declarator
    (153) parameter_declaration -> . declaration_specifiers abstract_declarator
    (154) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 229
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    enum_specifier                 shift and go to state 97
    parameter_declaration          shift and go to state 230
    type_qualifier                 shift and go to state 172
    struct_or_union_specifier      shift and go to state 80
    declaration_specifiers         shift and go to state 170

state 208

    (86) declaration_specifiers -> type_qualifier declaration_specifiers .

    MULTIPLY        reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LEFT_ROUND      reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LEFT_SQUARE     reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RIGHT_ROUND     reduce using rule 86 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 209

    (162) direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 162 (direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 162 (direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND .)
    COMMA           reduce using rule 162 (direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 162 (direct_abstract_declarator -> LEFT_ROUND abstract_declarator RIGHT_ROUND .)


state 210

    (164) direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 164 (direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 164 (direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    COMMA           reduce using rule 164 (direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 164 (direct_abstract_declarator -> LEFT_SQUARE constant_expression RIGHT_SQUARE .)


state 211

    (147) type_qualifier_list -> type_qualifier_list type_qualifier .

    MULTIPLY        reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LEFT_ROUND      reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LEFT_SQUARE     reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RIGHT_ROUND     reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 147 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 212

    (145) pointer -> MULTIPLY type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LEFT_ROUND      reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list pointer .)
    LEFT_SQUARE     reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list pointer .)
    COMMA           reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list pointer .)
    RIGHT_ROUND     reduce using rule 145 (pointer -> MULTIPLY type_qualifier_list pointer .)


state 213

    (169) direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND RIGHT_ROUND .)


state 214

    (170) direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 231


state 215

    (166) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 232


state 216

    (165) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE RIGHT_SQUARE .)


state 217

    (107) struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .

    TYPEDEF         reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    EXTERN          reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    STATIC          reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    AUTO            reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    REGISTER        reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    VOID            reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    CHAR            reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    SHORT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    INT             reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LONG            reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    FLOAT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    DOUBLE          reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    SIGNED          reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    CONST           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    VOLATILE        reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    ENUM            reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    STRUCT          reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    UNION           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    MULTIPLY        reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    LEFT_SQUARE     reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    COMMA           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    RIGHT_ROUND     reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)
    COLON           reduce using rule 107 (struct_or_union_specifier -> struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL .)


state 218

    (136) direct_declarator -> LEFT_ROUND declarator . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 233


state 219

    (133) declarator -> pointer direct_declarator .
    (137) direct_declarator -> direct_declarator . LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> direct_declarator . LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> direct_declarator . LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> direct_declarator . LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> direct_declarator . LEFT_ROUND RIGHT_ROUND

    COMMA           reduce using rule 133 (declarator -> pointer direct_declarator .)
    RIGHT_ROUND     reduce using rule 133 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 133 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 133 (declarator -> pointer direct_declarator .)
    LEFT_SQUARE     shift and go to state 221
    LEFT_ROUND      shift and go to state 220


state 220

    (139) direct_declarator -> direct_declarator LEFT_ROUND . parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> direct_declarator LEFT_ROUND . identifier_list RIGHT_ROUND
    (141) direct_declarator -> direct_declarator LEFT_ROUND . RIGHT_ROUND
    (148) parameter_type_list -> . parameter_list
    (149) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (155) identifier_list -> . IDENTIFIER
    (156) identifier_list -> . identifier_list COMMA IDENTIFIER
    (150) parameter_list -> . parameter_declaration
    (151) parameter_list -> . parameter_list COMMA parameter_declaration
    (152) parameter_declaration -> . declaration_specifiers declarator
    (153) parameter_declaration -> . declaration_specifiers abstract_declarator
    (154) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . storage_class_specifier
    (82) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_specifier
    (84) declaration_specifiers -> . type_specifier declaration_specifiers
    (85) declaration_specifiers -> . type_qualifier
    (86) declaration_specifiers -> . type_qualifier declaration_specifiers
    (91) storage_class_specifier -> . TYPEDEF
    (92) storage_class_specifier -> . EXTERN
    (93) storage_class_specifier -> . STATIC
    (94) storage_class_specifier -> . AUTO
    (95) storage_class_specifier -> . REGISTER
    (96) type_specifier -> . VOID
    (97) type_specifier -> . CHAR
    (98) type_specifier -> . SHORT
    (99) type_specifier -> . INT
    (100) type_specifier -> . LONG
    (101) type_specifier -> . FLOAT
    (102) type_specifier -> . DOUBLE
    (103) type_specifier -> . SIGNED
    (104) type_specifier -> . UNSIGNED
    (105) type_specifier -> . struct_or_union_specifier
    (106) type_specifier -> . enum_specifier
    (131) type_qualifier -> . CONST
    (132) type_qualifier -> . VOLATILE
    (107) struct_or_union_specifier -> . struct_or_union IDENTIFIER LEFT_CURL struct_declaration_list RIGHT_CURL
    (108) struct_or_union_specifier -> . struct_or_union LEFT_CURL struct_declaration_list RIGHT_CURL
    (109) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (124) enum_specifier -> . ENUM LEFT_CURL enumerator_list RIGHT_CURL
    (125) enum_specifier -> . ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL
    (126) enum_specifier -> . ENUM IDENTIFIER
    (110) struct_or_union -> . STRUCT
    (111) struct_or_union -> . UNION

    RIGHT_ROUND     shift and go to state 234
    IDENTIFIER      shift and go to state 235
    TYPEDEF         shift and go to state 167
    EXTERN          shift and go to state 162
    STATIC          shift and go to state 163
    AUTO            shift and go to state 166
    REGISTER        shift and go to state 165
    VOID            shift and go to state 81
    CHAR            shift and go to state 82
    SHORT           shift and go to state 78
    INT             shift and go to state 93
    LONG            shift and go to state 83
    FLOAT           shift and go to state 91
    DOUBLE          shift and go to state 88
    SIGNED          shift and go to state 95
    UNSIGNED        shift and go to state 86
    CONST           shift and go to state 79
    VOLATILE        shift and go to state 98
    ENUM            shift and go to state 90
    STRUCT          shift and go to state 92
    UNION           shift and go to state 89

    storage_class_specifier        shift and go to state 160
    struct_or_union                shift and go to state 87
    type_specifier                 shift and go to state 164
    parameter_list                 shift and go to state 171
    parameter_type_list            shift and go to state 236
    parameter_declaration          shift and go to state 169
    type_qualifier                 shift and go to state 172
    enum_specifier                 shift and go to state 97
    struct_or_union_specifier      shift and go to state 80
    declaration_specifiers         shift and go to state 170
    identifier_list                shift and go to state 237

state 221

    (137) direct_declarator -> direct_declarator LEFT_SQUARE . constant_expression RIGHT_SQUARE
    (138) direct_declarator -> direct_declarator LEFT_SQUARE . RIGHT_SQUARE
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    RIGHT_SQUARE    shift and go to state 239
    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    multiplicative_expression      shift and go to state 26
    unary_expression               shift and go to state 63
    exclusive_or_expression        shift and go to state 13
    inclusive_or_expression        shift and go to state 34
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 238
    relational_expression          shift and go to state 24

state 222

    (123) struct_declarator -> declarator COLON . constant_expression
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression QUESTION expression COLON conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression POWER and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression AMPERSAND equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression L_OP shift_expression
    (45) relational_expression -> . relational_expression G_OP shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression PLUS multiplicative_expression
    (39) additive_expression -> . additive_expression MINUS multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (35) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (36) multiplicative_expression -> . multiplicative_expression MODULO cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . LEFT_ROUND type_name RIGHT_ROUND cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF LEFT_ROUND type_name RIGHT_ROUND
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression LEFT_SQUARE expression RIGHT_SQUARE
    (11) postfix_expression -> . postfix_expression LEFT_ROUND RIGHT_ROUND
    (12) postfix_expression -> . postfix_expression LEFT_ROUND argument_expression_list RIGHT_ROUND
    (13) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (14) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . AMPERSAND
    (26) unary_operator -> . MULTIPLY
    (27) unary_operator -> . PLUS
    (28) unary_operator -> . MINUS
    (29) unary_operator -> . TILDA
    (30) unary_operator -> . EXCLAMATION
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . HEX_NUM
    (3) primary_expression -> . STRING
    (4) primary_expression -> . LEFT_ROUND expression RIGHT_ROUND
    (5) primary_expression -> . EXP_NUM
    (6) primary_expression -> . REAL_NUM
    (7) primary_expression -> . INT_NUM
    (8) primary_expression -> . CHARACTER

    LEFT_ROUND      shift and go to state 65
    INC_OP          shift and go to state 37
    DEC_OP          shift and go to state 12
    SIZEOF          shift and go to state 15
    AMPERSAND       shift and go to state 28
    MULTIPLY        shift and go to state 14
    PLUS            shift and go to state 18
    MINUS           shift and go to state 16
    TILDA           shift and go to state 19
    EXCLAMATION     shift and go to state 10
    IDENTIFIER      shift and go to state 7
    HEX_NUM         shift and go to state 8
    STRING          shift and go to state 2
    EXP_NUM         shift and go to state 6
    REAL_NUM        shift and go to state 9
    INT_NUM         shift and go to state 4
    CHARACTER       shift and go to state 3

    unary_expression               shift and go to state 63
    multiplicative_expression      shift and go to state 26
    inclusive_or_expression        shift and go to state 34
    exclusive_or_expression        shift and go to state 13
    postfix_expression             shift and go to state 17
    shift_expression               shift and go to state 35
    additive_expression            shift and go to state 27
    equality_expression            shift and go to state 31
    and_expression                 shift and go to state 20
    unary_operator                 shift and go to state 23
    conditional_expression         shift and go to state 176
    cast_expression                shift and go to state 21
    logical_and_expression         shift and go to state 30
    primary_expression             shift and go to state 29
    logical_or_expression          shift and go to state 22
    constant_expression            shift and go to state 240
    relational_expression          shift and go to state 24

state 223

    (122) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 122 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 122 (struct_declarator -> COLON constant_expression .)


state 224

    (120) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (121) struct_declarator -> . declarator
    (122) struct_declarator -> . COLON constant_expression
    (123) struct_declarator -> . declarator COLON constant_expression
    (133) declarator -> . pointer direct_declarator
    (134) declarator -> . direct_declarator
    (142) pointer -> . MULTIPLY
    (143) pointer -> . MULTIPLY type_qualifier_list
    (144) pointer -> . MULTIPLY pointer
    (145) pointer -> . MULTIPLY type_qualifier_list pointer
    (135) direct_declarator -> . IDENTIFIER
    (136) direct_declarator -> . LEFT_ROUND declarator RIGHT_ROUND
    (137) direct_declarator -> . direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE
    (138) direct_declarator -> . direct_declarator LEFT_SQUARE RIGHT_SQUARE
    (139) direct_declarator -> . direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND
    (140) direct_declarator -> . direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND
    (141) direct_declarator -> . direct_declarator LEFT_ROUND RIGHT_ROUND

    COLON           shift and go to state 193
    MULTIPLY        shift and go to state 139
    IDENTIFIER      shift and go to state 194
    LEFT_ROUND      shift and go to state 189

    struct_declarator              shift and go to state 241
    direct_declarator              shift and go to state 191
    declarator                     shift and go to state 192
    pointer                        shift and go to state 190

state 225

    (114) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    RIGHT_CURL      reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ENUM            reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNION           reduce using rule 114 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 226

    (125) enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .

    TYPEDEF         reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    EXTERN          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    STATIC          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    AUTO            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    REGISTER        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    VOID            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    CHAR            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    SHORT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    INT             reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    LONG            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    FLOAT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    DOUBLE          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    SIGNED          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    UNSIGNED        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    CONST           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    VOLATILE        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    ENUM            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    STRUCT          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    UNION           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    MULTIPLY        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    IDENTIFIER      reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    LEFT_ROUND      reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    LEFT_SQUARE     reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    COMMA           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    RIGHT_ROUND     reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)
    COLON           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER LEFT_CURL enumerator_list RIGHT_CURL .)


state 227

    (128) enumerator_list -> enumerator_list COMMA enumerator .

    RIGHT_CURL      reduce using rule 128 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 128 (enumerator_list -> enumerator_list COMMA enumerator .)


state 228

    (130) enumerator -> IDENTIFIER EQUAL constant_expression .

    RIGHT_CURL      reduce using rule 130 (enumerator -> IDENTIFIER EQUAL constant_expression .)
    COMMA           reduce using rule 130 (enumerator -> IDENTIFIER EQUAL constant_expression .)


state 229

    (149) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RIGHT_ROUND     reduce using rule 149 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 230

    (151) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 151 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RIGHT_ROUND     reduce using rule 151 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 231

    (170) direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 170 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 170 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    COMMA           reduce using rule 170 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 170 (direct_abstract_declarator -> direct_abstract_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)


state 232

    (166) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    COMMA           reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)


state 233

    (136) direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)
    COMMA           reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)
    COLON           reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)
    SEMICOLON       reduce using rule 136 (direct_declarator -> LEFT_ROUND declarator RIGHT_ROUND .)


state 234

    (141) direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    COMMA           reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    COLON           reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)
    SEMICOLON       reduce using rule 141 (direct_declarator -> direct_declarator LEFT_ROUND RIGHT_ROUND .)


state 235

    (155) identifier_list -> IDENTIFIER .

    RIGHT_ROUND     reduce using rule 155 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 155 (identifier_list -> IDENTIFIER .)


state 236

    (139) direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list . RIGHT_ROUND

    RIGHT_ROUND     shift and go to state 242


state 237

    (140) direct_declarator -> direct_declarator LEFT_ROUND identifier_list . RIGHT_ROUND
    (156) identifier_list -> identifier_list . COMMA IDENTIFIER

    RIGHT_ROUND     shift and go to state 243
    COMMA           shift and go to state 244


state 238

    (137) direct_declarator -> direct_declarator LEFT_SQUARE constant_expression . RIGHT_SQUARE

    RIGHT_SQUARE    shift and go to state 245


state 239

    (138) direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)
    COMMA           reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)
    COLON           reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 138 (direct_declarator -> direct_declarator LEFT_SQUARE RIGHT_SQUARE .)


state 240

    (123) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 123 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 123 (struct_declarator -> declarator COLON constant_expression .)


state 241

    (120) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 120 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 120 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 242

    (139) direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    COMMA           reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    COLON           reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 139 (direct_declarator -> direct_declarator LEFT_ROUND parameter_type_list RIGHT_ROUND .)


state 243

    (140) direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .

    LEFT_SQUARE     reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)
    LEFT_ROUND      reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)
    COMMA           reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)
    RIGHT_ROUND     reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)
    COLON           reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)
    SEMICOLON       reduce using rule 140 (direct_declarator -> direct_declarator LEFT_ROUND identifier_list RIGHT_ROUND .)


state 244

    (156) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 246


state 245

    (137) direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .

    LEFT_SQUARE     reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    LEFT_ROUND      reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    COMMA           reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    RIGHT_ROUND     reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    COLON           reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)
    SEMICOLON       reduce using rule 137 (direct_declarator -> direct_declarator LEFT_SQUARE constant_expression RIGHT_SQUARE .)


state 246

    (156) identifier_list -> identifier_list COMMA IDENTIFIER .

    RIGHT_ROUND     reduce using rule 156 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 156 (identifier_list -> identifier_list COMMA IDENTIFIER .)

